{"ast":null,"code":"const BrowserAdapter = {\n  createCanvas: (width, height) => {\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = width;\n    canvas.height = height;\n    return canvas;\n  },\n  getCanvasRenderingContext2D: () => CanvasRenderingContext2D,\n  getWebGLRenderingContext: () => WebGLRenderingContext,\n  getNavigator: () => navigator,\n  getBaseUrl: () => {\n    var _document$baseURI;\n    return (_document$baseURI = document.baseURI) !== null && _document$baseURI !== void 0 ? _document$baseURI : window.location.href;\n  },\n  getFontFaceSet: () => document.fonts,\n  fetch: (url, options) => fetch(url, options),\n  parseXML: xml => {\n    const parser = new DOMParser();\n    return parser.parseFromString(xml, \"text/xml\");\n  }\n};\nexport { BrowserAdapter };","map":{"version":3,"mappings":"AA0BO,MAAMA,cAAiB;EAO1BC,cAAcA,CAACC,OAAeC,MAC9B;IACU,eAASC,QAAS,eAAc,QAAQ;IAE9CC,OAAOH,KAAQ;IACfG,OAAOF,MAAS;IAET;EAAA,CACX;EACAG,6BAA6BA,MAAMC;EACnCC,0BAA0BA,MAAMC;EAChCC,cAAcA,MAAMC;EACpBC,UAAY;IAAA;IAAA,4BAAOR,QAAS,yEAAWS,OAAOC,QAAS;EAAA;EACvDC,gBAAgBA,MAAMX,QAAS;EAC/BY,OAAOA,CAACC,KAAkBC,OAA0B,WAAMD,KAAKC,OAAO;EACtEC,UAAWC,GACX;IACU,eAAS,IAAIC,SAAU;IAEtB,cAAOC,eAAgB,MAAK,UAAU;EAAA;AAErD","names":["BrowserAdapter","createCanvas","width","height","document","canvas","getCanvasRenderingContext2D","CanvasRenderingContext2D","getWebGLRenderingContext","WebGLRenderingContext","getNavigator","navigator","getBaseUrl","window","location","getFontFaceSet","fetch","url","options","parseXML","xml","DOMParser","parseFromString"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/settings/src/adapter.ts"],"sourcesContent":["import type { ICanvas } from './ICanvas';\nimport type { ICanvasRenderingContext2D } from './ICanvasRenderingContext2D';\n\n/**\n * This interface describes all the DOM dependent calls that Pixi makes throughout its codebase.\n * Implementations of this interface can be used to make sure Pixi will work in any environment,\n * such as browser, Web Workers, and Node.js.\n * @memberof PIXI\n */\nexport interface IAdapter\n{\n    /** Returns a canvas object that can be used to create a webgl context. */\n    createCanvas: (width?: number, height?: number) => ICanvas;\n    /** Returns a 2D rendering context. */\n    getCanvasRenderingContext2D: () => { prototype: ICanvasRenderingContext2D; };\n    /** Returns a WebGL rendering context. */\n    getWebGLRenderingContext: () => typeof WebGLRenderingContext;\n    /** Returns a partial implementation of the browsers window.navigator */\n    getNavigator: () => { userAgent: string };\n    /** Returns the current base URL For browser environments this is either the document.baseURI or window.location.href */\n    getBaseUrl: () => string;\n    getFontFaceSet: () => FontFaceSet | null;\n    fetch: (url: RequestInfo, options?: RequestInit) => Promise<Response>;\n    parseXML: (xml: string) => Document;\n}\n\nexport const BrowserAdapter = {\n    /**\n     * Creates a canvas element of the given size.\n     * This canvas is created using the browser's native canvas element.\n     * @param width - width of the canvas\n     * @param height - height of the canvas\n     */\n    createCanvas: (width: number, height: number): HTMLCanvasElement =>\n    {\n        const canvas = document.createElement('canvas');\n\n        canvas.width = width;\n        canvas.height = height;\n\n        return canvas;\n    },\n    getCanvasRenderingContext2D: () => CanvasRenderingContext2D,\n    getWebGLRenderingContext: () => WebGLRenderingContext,\n    getNavigator: () => navigator,\n    getBaseUrl: () => (document.baseURI ?? window.location.href),\n    getFontFaceSet: () => document.fonts,\n    fetch: (url: RequestInfo, options?: RequestInit) => fetch(url, options),\n    parseXML: (xml: string) =>\n    {\n        const parser = new DOMParser();\n\n        return parser.parseFromString(xml, 'text/xml');\n    },\n} as IAdapter;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}