{"ast":null,"code":"class ObservablePoint {\n  constructor(cb, scope) {\n    let x = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let y = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    this._x = x;\n    this._y = y;\n    this.cb = cb;\n    this.scope = scope;\n  }\n  clone() {\n    let cb = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.cb;\n    let scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.scope;\n    return new ObservablePoint(cb, scope, this._x, this._y);\n  }\n  set() {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : x;\n    if (this._x !== x || this._y !== y) {\n      this._x = x;\n      this._y = y;\n      this.cb.call(this.scope);\n    }\n    return this;\n  }\n  copyFrom(p) {\n    if (this._x !== p.x || this._y !== p.y) {\n      this._x = p.x;\n      this._y = p.y;\n      this.cb.call(this.scope);\n    }\n    return this;\n  }\n  copyTo(p) {\n    p.set(this._x, this._y);\n    return p;\n  }\n  equals(p) {\n    return p.x === this._x && p.y === this._y;\n  }\n  toString() {\n    return \"[@pixi/math:ObservablePoint x=\".concat(0, \" y=\", 0, \" scope=\", this.scope, \"]\");\n  }\n  get x() {\n    return this._x;\n  }\n  set x(value) {\n    if (this._x !== value) {\n      this._x = value;\n      this.cb.call(this.scope);\n    }\n  }\n  get y() {\n    return this._y;\n  }\n  set y(value) {\n    if (this._y !== value) {\n      this._y = value;\n      this.cb.call(this.scope);\n    }\n  }\n}\nexport { ObservablePoint };","map":{"version":3,"mappings":"AAYO,MAAMA,eACb;EAiBIC,YAAYC,EAAsB,SAClC;IAAA,IAD4CC,CAAI;IAAA,IAAGC,wEAAI,CACvD;IACI,KAAKC,EAAK;IACV,KAAKC,EAAK;IAEV,KAAKJ,EAAK;IACV,KAAKK,KAAQ;EAAA;EAYjBC,QACA;IAAA,IADMN,EAAK,4EAAKA,EAAI;IAAA,gFAAQ,KAAKK,KACjC;IACI,OAAO,IAAIP,eAAgB,KAAIO,OAAO,IAAK,KAAI,KAAKD,EAAE;EAAA;EAU1DG,GAAIA,GACJ;IAAA,IADIN,wEAAI,CAAG;IAAA,4EAAIA,CACf;IACI,IAAI,IAAK,QAAOA,CAAK,SAAKG,OAAOF,CACjC;MACI,KAAKC,EAAK;MACV,KAAKC,EAAK;MACL,QAAGI,IAAK,MAAKH,KAAK;IAAA;IAGpB;EAAA;EAQXI,SAASC,CACT;IACI,IAAI,KAAKP,EAAO,OAAEF,KAAK,IAAK,QAAOS,EAAER,CACrC;MACI,KAAKC,KAAKO,CAAE;MACZ,KAAKN,KAAKM,CAAE;MACP,QAAGF,IAAK,MAAKH,KAAK;IAAA;IAGpB;EAAA;EAQXM,OAAyBD,CACzB;IACIA,EAAEH,GAAI,MAAKJ,EAAI,OAAKC,EAAE;IAEf;EAAA;EAQXQ,OAAOF,CACP;IACI,OAAQA,EAAET,CAAM,UAAKE,EAAQ,MAAED,MAAM,IAAK;EAAA;EAI9CW,QACAA;IACW,+CAAiC,CAAO,uBAAW,IAAK;EAAA;EAKnE,IAAIZ,CACJA;IACI,OAAO,IAAK;EAAA;EAGhB,IAAIA,EAAEa,KACN;IACQ,SAAKX,OAAOW,KAChB;MACI,KAAKX,EAAK;MACL,QAAGK,IAAK,MAAKH,KAAK;IAAA;EAC3B;EAIJ,IAAIH,CACJA;IACI,OAAO,IAAK;EAAA;EAGhB,IAAIA,EAAEY,KACN;IACQ,SAAKV,OAAOU,KAChB;MACI,KAAKV,EAAK;MACL,QAAGI,IAAK,MAAKH,KAAK;IAAA;EAC3B;AAER","names":["ObservablePoint","constructor","cb","x","y","_x","_y","scope","clone","set","call","copyFrom","p","copyTo","equals","toString","value"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/math/src/ObservablePoint.ts"],"sourcesContent":["import type { IPoint } from './IPoint';\nimport type { IPointData } from './IPointData';\n\nexport interface ObservablePoint extends GlobalMixins.Point, IPoint {}\n\n/**\n * The ObservablePoint object represents a location in a two-dimensional coordinate system, where `x` represents\n * the position on the horizontal axis and `y` represents the position on the vertical axis.\n *\n * An `ObservablePoint` is a point that triggers a callback when the point's position is changed.\n * @memberof PIXI\n */\nexport class ObservablePoint<T = any> implements IPoint\n{\n    /** The callback function triggered when `x` and/or `y` are changed */\n    public cb: (this: T) => any;\n\n    /** The owner of the callback */\n    public scope: any;\n\n    _x: number;\n    _y: number;\n\n    /**\n     * Creates a new `ObservablePoint`\n     * @param cb - callback function triggered when `x` and/or `y` are changed\n     * @param scope - owner of callback\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=0] - position of the point on the y axis\n     */\n    constructor(cb: (this: T) => any, scope: T, x = 0, y = 0)\n    {\n        this._x = x;\n        this._y = y;\n\n        this.cb = cb;\n        this.scope = scope;\n    }\n\n    /**\n     * Creates a clone of this point.\n     * The callback and scope params can be overridden otherwise they will default\n     * to the clone object's values.\n     * @override\n     * @param cb - The callback function triggered when `x` and/or `y` are changed\n     * @param scope - The owner of the callback\n     * @returns a copy of this observable point\n     */\n    clone(cb = this.cb, scope = this.scope): ObservablePoint\n    {\n        return new ObservablePoint(cb, scope, this._x, this._y);\n    }\n\n    /**\n     * Sets the point to a new `x` and `y` position.\n     * If `y` is omitted, both `x` and `y` will be set to `x`.\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=x] - position of the point on the y axis\n     * @returns The observable point instance itself\n     */\n    set(x = 0, y = x): this\n    {\n        if (this._x !== x || this._y !== y)\n        {\n            this._x = x;\n            this._y = y;\n            this.cb.call(this.scope);\n        }\n\n        return this;\n    }\n\n    /**\n     * Copies x and y from the given point (`p`)\n     * @param p - The point to copy from. Can be any of type that is or extends `IPointData`\n     * @returns The observable point instance itself\n     */\n    copyFrom(p: IPointData): this\n    {\n        if (this._x !== p.x || this._y !== p.y)\n        {\n            this._x = p.x;\n            this._y = p.y;\n            this.cb.call(this.scope);\n        }\n\n        return this;\n    }\n\n    /**\n     * Copies this point's x and y into that of the given point (`p`)\n     * @param p - The point to copy to. Can be any of type that is or extends `IPointData`\n     * @returns The point (`p`) with values updated\n     */\n    copyTo<T extends IPoint>(p: T): T\n    {\n        p.set(this._x, this._y);\n\n        return p;\n    }\n\n    /**\n     * Accepts another point (`p`) and returns `true` if the given point is equal to this point\n     * @param p - The point to check\n     * @returns Returns `true` if both `x` and `y` are equal\n     */\n    equals(p: IPointData): boolean\n    {\n        return (p.x === this._x) && (p.y === this._y);\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:ObservablePoint x=${0} y=${0} scope=${this.scope}]`;\n    }\n    // #endif\n\n    /** Position of the observable point on the x axis. */\n    get x(): number\n    {\n        return this._x;\n    }\n\n    set x(value: number)\n    {\n        if (this._x !== value)\n        {\n            this._x = value;\n            this.cb.call(this.scope);\n        }\n    }\n\n    /** Position of the observable point on the y axis. */\n    get y(): number\n    {\n        return this._y;\n    }\n\n    set y(value: number)\n    {\n        if (this._y !== value)\n        {\n            this._y = value;\n            this.cb.call(this.scope);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}