{"ast":null,"code":"import { ExtensionType, extensions } from '@pixi/extensions';\nimport { string2hex, hex2string, hex2rgb } from '@pixi/utils';\nclass BackgroundSystem {\n  constructor() {\n    this.clearBeforeRender = true;\n    this._backgroundColor = 0;\n    this._backgroundColorRgba = [0, 0, 0, 1];\n    this._backgroundColorString = \"#000000\";\n    this.color = this._backgroundColor;\n    this.alpha = 1;\n  }\n  init(options) {\n    this.clearBeforeRender = options.clearBeforeRender;\n    if (options.color) {\n      this.color = typeof options.color === \"string\" ? string2hex(options.color) : options.color;\n    }\n    this.alpha = options.alpha;\n  }\n  get color() {\n    return this._backgroundColor;\n  }\n  set color(value) {\n    this._backgroundColor = value;\n    this._backgroundColorString = hex2string(value);\n    hex2rgb(value, this._backgroundColorRgba);\n  }\n  get alpha() {\n    return this._backgroundColorRgba[3];\n  }\n  set alpha(value) {\n    this._backgroundColorRgba[3] = value;\n  }\n  get colorRgba() {\n    return this._backgroundColorRgba;\n  }\n  get colorString() {\n    return this._backgroundColorString;\n  }\n  destroy() {}\n}\nBackgroundSystem.extension = {\n  type: [ExtensionType.RendererSystem, ExtensionType.CanvasRendererSystem],\n  name: \"background\"\n};\nextensions.add(BackgroundSystem);\nexport { BackgroundSystem };","map":{"version":3,"mappings":";;AAoBO,MAAMA,gBACb;EAyBIC,WACAA;IACI,KAAKC,iBAAoB;IAEzB,KAAKC,gBAAmB;IAExB,KAAKC,oBAAuB,IAAC,CAAG,KAAG,GAAG,CAAC;IAEvC,KAAKC,sBAAyB;IAE9B,KAAKC,QAAQ,IAAK;IAClB,KAAKC,KAAQ;EAAA;EAOjBC,KAAKC,OACL;IACI,KAAKP,oBAAoBO,OAAQ;IAEjC,IAAIA,QAAQH,KACZ;MACS,aAAQ,OAAOG,OAAQ,WAAU,WAChCC,UAAW,SAAQJ,KAAK,IACxBG,OAAQ;IAAA;IAGlB,KAAKF,QAAQE,OAAQ;EAAA;EAOzB,IAAIH,KACJA;IACI,OAAO,IAAK;EAAA;EAGhB,IAAIA,MAAMK,KACV;IACI,KAAKR,gBAAmB;IACnB,8BAAyBS,WAAWD,KAAK;IACtCE,eAAO,KAAKT,oBAAoB;EAAA;EAO5C,IAAIG,KACJA;IACI,OAAO,KAAKH,oBAAqB;EAAA;EAGrC,IAAIG,MAAMI,KACV;IACI,KAAKP,qBAAqB,CAAK;EAAA;EAQnC,IAAIU,SACJA;IACI,OAAO,IAAK;EAAA;EAQhB,IAAIC,WACJA;IACI,OAAO,IAAK;EAAA;EAGhBC,OACAA;AAGJ;AAhHahB,iBAGFiB,SAA+B;EAClCC,IAAM,GACFC,aAAc,iBACdA,aAAc,sBAClB;EACAC,IAAM;AACV;AAyGJC,WAAWC,IAAItB,gBAAgB","names":["BackgroundSystem","constructor","clearBeforeRender","_backgroundColor","_backgroundColorRgba","_backgroundColorString","color","alpha","init","options","string2hex","value","hex2string","hex2rgb","colorRgba","colorString","destroy","extension","type","ExtensionType","name","extensions","add"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/core/src/background/BackgroundSystem.ts"],"sourcesContent":["import { extensions, ExtensionType } from '@pixi/extensions';\nimport { hex2rgb, hex2string, string2hex } from '@pixi/utils';\n\nimport type { ExtensionMetadata } from '@pixi/extensions';\nimport type { ISystem } from '../system/ISystem';\n\nexport interface BackgroundOptions\n{\n    /** the main canvas background alpha. From 0 (fully transparent) to 1 (fully opaque). */\n    alpha: number,\n    /** the main canvas background color. */\n    color: number | string,\n    /** sets if the renderer will clear the canvas or not before the new render pass. */\n    clearBeforeRender: boolean,\n}\n\n/**\n * The background system manages the background color and alpha of the main view.\n * @memberof PIXI\n */\nexport class BackgroundSystem implements ISystem<BackgroundOptions>\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        type: [\n            ExtensionType.RendererSystem,\n            ExtensionType.CanvasRendererSystem\n        ],\n        name: 'background',\n    };\n\n    /**\n     * This sets if the CanvasRenderer will clear the canvas or not before the new render pass.\n     * If the scene is NOT transparent PixiJS will use a canvas sized fillRect operation every\n     * frame to set the canvas background color. If the scene is transparent PixiJS will use clearRect\n     * to clear the canvas every frame. Disable this by setting this to false. For example, if\n     * your game has a canvas filling background image you often don't need this set.\n     * @member {boolean}\n     * @default\n     */\n    public clearBeforeRender: boolean;\n\n    private _backgroundColorString: string;\n    private _backgroundColorRgba: number[];\n    private _backgroundColor: number;\n\n    constructor()\n    {\n        this.clearBeforeRender = true;\n\n        this._backgroundColor = 0x000000;\n\n        this._backgroundColorRgba = [0, 0, 0, 1];\n\n        this._backgroundColorString = '#000000';\n\n        this.color = this._backgroundColor; // run bg color setter\n        this.alpha = 1;\n    }\n\n    /**\n     * initiates the background system\n     * @param {BackgroundOptions} options - the options for the background colors\n     */\n    init(options: BackgroundOptions): void\n    {\n        this.clearBeforeRender = options.clearBeforeRender;\n\n        if (options.color)\n        {\n            this.color = typeof options.color === 'string'\n                ? string2hex(options.color)\n                : options.color;\n        }\n\n        this.alpha = options.alpha;\n    }\n\n    /**\n     * The background color to fill if not transparent\n     * @member {number}\n     */\n    get color(): number\n    {\n        return this._backgroundColor;\n    }\n\n    set color(value: number)\n    {\n        this._backgroundColor = value;\n        this._backgroundColorString = hex2string(value);\n        hex2rgb(value, this._backgroundColorRgba);\n    }\n\n    /**\n     * The background color alpha. Setting this to 0 will make the canvas transparent.\n     * @member {number}\n     */\n    get alpha(): number\n    {\n        return this._backgroundColorRgba[3];\n    }\n\n    set alpha(value: number)\n    {\n        this._backgroundColorRgba[3] = value;\n    }\n\n    /**\n     * The background color as an [R, G, B, A] array.\n     * @member {number[]}\n     * @protected\n     */\n    get colorRgba(): number[]\n    {\n        return this._backgroundColorRgba;\n    }\n\n    /**\n     * The background color as a string.\n     * @member {string}\n     * @protected\n     */\n    get colorString(): string\n    {\n        return this._backgroundColorString;\n    }\n\n    destroy(): void\n    {\n        // ka boom!\n    }\n}\n\nextensions.add(BackgroundSystem);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}