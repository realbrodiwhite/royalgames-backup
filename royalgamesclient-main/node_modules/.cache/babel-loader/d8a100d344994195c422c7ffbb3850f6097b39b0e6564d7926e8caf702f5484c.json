{"ast":null,"code":"import { ENV } from '@pixi/constants';\nimport { ExtensionType, extensions } from '@pixi/extensions';\nimport { settings } from '@pixi/settings';\nlet CONTEXT_UID_COUNTER = 0;\nclass ContextSystem {\n  constructor(renderer) {\n    this.renderer = renderer;\n    this.webGLVersion = 1;\n    this.extensions = {};\n    this.supports = {\n      uint32Indices: false\n    };\n    this.handleContextLost = this.handleContextLost.bind(this);\n    this.handleContextRestored = this.handleContextRestored.bind(this);\n  }\n  get isLost() {\n    return !this.gl || this.gl.isContextLost();\n  }\n  contextChange(gl) {\n    this.gl = gl;\n    this.renderer.gl = gl;\n    this.renderer.CONTEXT_UID = CONTEXT_UID_COUNTER++;\n  }\n  init(options) {\n    if (options.context) {\n      this.initFromContext(options.context);\n    } else {\n      const alpha = this.renderer.background.alpha < 1;\n      const premultipliedAlpha = options.premultipliedAlpha;\n      this.preserveDrawingBuffer = options.preserveDrawingBuffer;\n      this.useContextAlpha = options.useContextAlpha;\n      this.powerPreference = options.powerPreference;\n      this.initFromOptions({\n        alpha,\n        premultipliedAlpha,\n        antialias: options.antialias,\n        stencil: true,\n        preserveDrawingBuffer: options.preserveDrawingBuffer,\n        powerPreference: options.powerPreference\n      });\n    }\n  }\n  initFromContext(gl) {\n    this.gl = gl;\n    this.validateContext(gl);\n    this.renderer.gl = gl;\n    this.renderer.CONTEXT_UID = CONTEXT_UID_COUNTER++;\n    this.renderer.runners.contextChange.emit(gl);\n    const view = this.renderer.view;\n    if (view.addEventListener !== void 0) {\n      view.addEventListener(\"webglcontextlost\", this.handleContextLost, false);\n      view.addEventListener(\"webglcontextrestored\", this.handleContextRestored, false);\n    }\n  }\n  initFromOptions(options) {\n    const gl = this.createContext(this.renderer.view, options);\n    this.initFromContext(gl);\n  }\n  createContext(canvas, options) {\n    let gl;\n    if (settings.PREFER_ENV >= ENV.WEBGL2) {\n      gl = canvas.getContext(\"webgl2\", options);\n    }\n    if (gl) {\n      this.webGLVersion = 2;\n    } else {\n      this.webGLVersion = 1;\n      gl = canvas.getContext(\"webgl\", options) || canvas.getContext(\"experimental-webgl\", options);\n      if (!gl) {\n        throw new Error(\"This browser does not support WebGL. Try using the canvas renderer\");\n      }\n    }\n    this.gl = gl;\n    this.getExtensions();\n    return this.gl;\n  }\n  getExtensions() {\n    const {\n      gl\n    } = this;\n    const common = {\n      loseContext: gl.getExtension(\"WEBGL_lose_context\"),\n      anisotropicFiltering: gl.getExtension(\"EXT_texture_filter_anisotropic\"),\n      floatTextureLinear: gl.getExtension(\"OES_texture_float_linear\"),\n      s3tc: gl.getExtension(\"WEBGL_compressed_texture_s3tc\"),\n      s3tc_sRGB: gl.getExtension(\"WEBGL_compressed_texture_s3tc_srgb\"),\n      etc: gl.getExtension(\"WEBGL_compressed_texture_etc\"),\n      etc1: gl.getExtension(\"WEBGL_compressed_texture_etc1\"),\n      pvrtc: gl.getExtension(\"WEBGL_compressed_texture_pvrtc\") || gl.getExtension(\"WEBKIT_WEBGL_compressed_texture_pvrtc\"),\n      atc: gl.getExtension(\"WEBGL_compressed_texture_atc\"),\n      astc: gl.getExtension(\"WEBGL_compressed_texture_astc\")\n    };\n    if (this.webGLVersion === 1) {\n      Object.assign(this.extensions, common, {\n        drawBuffers: gl.getExtension(\"WEBGL_draw_buffers\"),\n        depthTexture: gl.getExtension(\"WEBGL_depth_texture\"),\n        vertexArrayObject: gl.getExtension(\"OES_vertex_array_object\") || gl.getExtension(\"MOZ_OES_vertex_array_object\") || gl.getExtension(\"WEBKIT_OES_vertex_array_object\"),\n        uint32ElementIndex: gl.getExtension(\"OES_element_index_uint\"),\n        floatTexture: gl.getExtension(\"OES_texture_float\"),\n        floatTextureLinear: gl.getExtension(\"OES_texture_float_linear\"),\n        textureHalfFloat: gl.getExtension(\"OES_texture_half_float\"),\n        textureHalfFloatLinear: gl.getExtension(\"OES_texture_half_float_linear\")\n      });\n    } else if (this.webGLVersion === 2) {\n      Object.assign(this.extensions, common, {\n        colorBufferFloat: gl.getExtension(\"EXT_color_buffer_float\")\n      });\n    }\n  }\n  handleContextLost(event) {\n    event.preventDefault();\n    setTimeout(() => {\n      if (this.gl.isContextLost() && this.extensions.loseContext) {\n        this.extensions.loseContext.restoreContext();\n      }\n    }, 0);\n  }\n  handleContextRestored() {\n    this.renderer.runners.contextChange.emit(this.gl);\n  }\n  destroy() {\n    const view = this.renderer.view;\n    this.renderer = null;\n    if (view.removeEventListener !== void 0) {\n      view.removeEventListener(\"webglcontextlost\", this.handleContextLost);\n      view.removeEventListener(\"webglcontextrestored\", this.handleContextRestored);\n    }\n    this.gl.useProgram(null);\n    if (this.extensions.loseContext) {\n      this.extensions.loseContext.loseContext();\n    }\n  }\n  postrender() {\n    if (this.renderer.objectRenderer.renderingToScreen) {\n      this.gl.flush();\n    }\n  }\n  validateContext(gl) {\n    const attributes = gl.getContextAttributes();\n    const isWebGl2 = \"WebGL2RenderingContext\" in globalThis && gl instanceof globalThis.WebGL2RenderingContext;\n    if (isWebGl2) {\n      this.webGLVersion = 2;\n    }\n    if (attributes && !attributes.stencil) {\n      console.warn(\"Provided WebGL context does not have a stencil buffer, masks may not render correctly\");\n    }\n    const hasuint32 = isWebGl2 || !!gl.getExtension(\"OES_element_index_uint\");\n    this.supports.uint32Indices = hasuint32;\n    if (!hasuint32) {\n      console.warn(\"Provided WebGL context does not support 32 index buffer, complex graphics may not render correctly\");\n    }\n  }\n}\nContextSystem.extension = {\n  type: ExtensionType.RendererSystem,\n  name: \"context\"\n};\nextensions.add(ContextSystem);\nexport { ContextSystem };","map":{"version":3,"mappings":"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","names":["CONTEXT_UID_COUNTER","ContextSystem","constructor","renderer","webGLVersion","extensions","supports","uint32Indices","handleContextLost","handleContextRestored","isLost","gl","isContextLost","contextChange","CONTEXT_UID","init","options","context","alpha","premultipliedAlpha","preserveDrawingBuffer","useContextAlpha","powerPreference","initFromOptions","antialias","stencil","initFromContext","validateContext","addEventListener","view","createContext","canvas","PREFER_ENV","WEBGL2","getContext","Error","getExtensions","common","loseContext","anisotropicFiltering","floatTextureLinear","s3tc","s3tc_sRGB","etc","etc1","pvrtc","getExtension","atc","astc","Object","drawBuffers","depthTexture","vertexArrayObject","uint32ElementIndex","floatTexture","textureHalfFloat","textureHalfFloatLinear","colorBufferFloat","event","preventDefault","setTimeout","restoreContext","destroy","removeEventListener","useProgram","postrender","renderingToScreen","flush","getContextAttributes","isWebGl2","globalThis","attributes","console","warn","hasuint32","extension","type","ExtensionType","name","add"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/core/src/context/ContextSystem.ts"],"sourcesContent":["import { ENV } from '@pixi/constants';\nimport { extensions, ExtensionType } from '@pixi/extensions';\nimport { settings } from '@pixi/settings';\n\nimport type { ExtensionMetadata } from '@pixi/extensions';\nimport type { ICanvas } from '@pixi/settings';\nimport type { IRenderingContext } from '../IRenderer';\nimport type { Renderer } from '../Renderer';\nimport type { ISystem } from '../system/ISystem';\nimport type { WebGLExtensions } from './WebGLExtensions';\n\nlet CONTEXT_UID_COUNTER = 0;\n\nexport interface ISupportDict\n{\n    uint32Indices: boolean;\n}\n\nexport interface ContextOptions\n{\n    context?: IRenderingContext;\n    /**\n     * Use premultipliedAlpha instead\n     * @deprecated since 7.0.0\n     */\n    useContextAlpha?: boolean | 'notMultiplied';\n    premultipliedAlpha?: boolean;\n    powerPreference?: WebGLPowerPreference;\n    preserveDrawingBuffer?: boolean;\n    antialias?: boolean;\n}\n\n/**\n * System plugin to the renderer to manage the context.\n * @memberof PIXI\n */\nexport class ContextSystem implements ISystem<ContextOptions>\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        type: ExtensionType.RendererSystem,\n        name: 'context',\n    };\n\n    /**\n     * Either 1 or 2 to reflect the WebGL version being used.\n     * @readonly\n     */\n    public webGLVersion: number;\n\n    /**\n     * Features supported by current context.\n     * @type {object}\n     * @readonly\n     * @property {boolean} uint32Indices - Support for 32-bit indices buffer.\n     */\n    readonly supports: ISupportDict;\n\n    preserveDrawingBuffer: boolean;\n    powerPreference: WebGLPowerPreference;\n\n    /**\n     * Pass-thru setting for the canvas' context `alpha` property. This is typically\n     * not something you need to fiddle with. If you want transparency, use `backgroundAlpha`.\n     * @member {boolean}\n     * @deprecated since 7.0.0\n     */\n    useContextAlpha: boolean | 'notMultiplied';\n\n    protected CONTEXT_UID: number;\n    protected gl: IRenderingContext;\n\n    /**\n     * Extensions available.\n     * @type {object}\n     * @readonly\n     * @property {WEBGL_draw_buffers} drawBuffers - WebGL v1 extension\n     * @property {WEBGL_depth_texture} depthTexture - WebGL v1 extension\n     * @property {OES_texture_float} floatTexture - WebGL v1 extension\n     * @property {WEBGL_lose_context} loseContext - WebGL v1 extension\n     * @property {OES_vertex_array_object} vertexArrayObject - WebGL v1 extension\n     * @property {EXT_texture_filter_anisotropic} anisotropicFiltering - WebGL v1 and v2 extension\n     */\n    public extensions: WebGLExtensions;\n\n    private renderer: Renderer;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n\n        this.webGLVersion = 1;\n        this.extensions = {};\n\n        this.supports = {\n            uint32Indices: false,\n        };\n\n        // Bind functions\n        this.handleContextLost = this.handleContextLost.bind(this);\n        this.handleContextRestored = this.handleContextRestored.bind(this);\n    }\n\n    /**\n     * `true` if the context is lost\n     * @readonly\n     */\n    get isLost(): boolean\n    {\n        return (!this.gl || this.gl.isContextLost());\n    }\n\n    /**\n     * Handles the context change event.\n     * @param {WebGLRenderingContext} gl - New WebGL context.\n     */\n    protected contextChange(gl: IRenderingContext): void\n    {\n        this.gl = gl;\n        this.renderer.gl = gl;\n        this.renderer.CONTEXT_UID = CONTEXT_UID_COUNTER++;\n    }\n\n    init(options: ContextOptions): void\n    {\n        /*\n         * The options passed in to create a new WebGL context.\n         */\n        if (options.context)\n        {\n            this.initFromContext(options.context);\n        }\n        else\n        {\n            const alpha = this.renderer.background.alpha < 1;\n            const premultipliedAlpha = options.premultipliedAlpha;\n\n            this.preserveDrawingBuffer = options.preserveDrawingBuffer;\n            this.useContextAlpha = options.useContextAlpha;\n            this.powerPreference = options.powerPreference;\n\n            this.initFromOptions({\n                alpha,\n                premultipliedAlpha,\n                antialias: options.antialias,\n                stencil: true,\n                preserveDrawingBuffer: options.preserveDrawingBuffer,\n                powerPreference: options.powerPreference,\n            });\n        }\n    }\n\n    /**\n     * Initializes the context.\n     * @protected\n     * @param {WebGLRenderingContext} gl - WebGL context\n     */\n    initFromContext(gl: IRenderingContext): void\n    {\n        this.gl = gl;\n        this.validateContext(gl);\n        this.renderer.gl = gl;\n        this.renderer.CONTEXT_UID = CONTEXT_UID_COUNTER++;\n        this.renderer.runners.contextChange.emit(gl);\n\n        const view = this.renderer.view;\n\n        if (view.addEventListener !== undefined)\n        {\n            view.addEventListener('webglcontextlost', this.handleContextLost, false);\n            view.addEventListener('webglcontextrestored', this.handleContextRestored, false);\n        }\n    }\n\n    /**\n     * Initialize from context options\n     * @protected\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext\n     * @param {object} options - context attributes\n     */\n    initFromOptions(options: WebGLContextAttributes): void\n    {\n        const gl = this.createContext(this.renderer.view, options);\n\n        this.initFromContext(gl);\n    }\n\n    /**\n     * Helper class to create a WebGL Context\n     * @param canvas - the canvas element that we will get the context from\n     * @param options - An options object that gets passed in to the canvas element containing the\n     *    context attributes\n     * @see https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement/getContext\n     * @returns {WebGLRenderingContext} the WebGL context\n     */\n    createContext(canvas: ICanvas, options: WebGLContextAttributes): IRenderingContext\n    {\n        let gl;\n\n        if (settings.PREFER_ENV >= ENV.WEBGL2)\n        {\n            gl = canvas.getContext('webgl2', options);\n        }\n\n        if (gl)\n        {\n            this.webGLVersion = 2;\n        }\n        else\n        {\n            this.webGLVersion = 1;\n\n            gl = canvas.getContext('webgl', options) || canvas.getContext('experimental-webgl', options);\n\n            if (!gl)\n            {\n                // fail, not able to get a context\n                throw new Error('This browser does not support WebGL. Try using the canvas renderer');\n            }\n        }\n\n        this.gl = gl as IRenderingContext;\n\n        this.getExtensions();\n\n        return this.gl;\n    }\n\n    /** Auto-populate the {@link PIXI.ContextSystem.extensions extensions}. */\n    protected getExtensions(): void\n    {\n        // time to set up default extensions that Pixi uses.\n        const { gl } = this;\n\n        const common = {\n            loseContext: gl.getExtension('WEBGL_lose_context'),\n            anisotropicFiltering: gl.getExtension('EXT_texture_filter_anisotropic'),\n            floatTextureLinear: gl.getExtension('OES_texture_float_linear'),\n\n            s3tc: gl.getExtension('WEBGL_compressed_texture_s3tc'),\n            s3tc_sRGB: gl.getExtension('WEBGL_compressed_texture_s3tc_srgb'), // eslint-disable-line camelcase\n            etc: gl.getExtension('WEBGL_compressed_texture_etc'),\n            etc1: gl.getExtension('WEBGL_compressed_texture_etc1'),\n            pvrtc: gl.getExtension('WEBGL_compressed_texture_pvrtc')\n                || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc'),\n            atc: gl.getExtension('WEBGL_compressed_texture_atc'),\n            astc: gl.getExtension('WEBGL_compressed_texture_astc')\n        };\n\n        if (this.webGLVersion === 1)\n        {\n            Object.assign(this.extensions, common, {\n                drawBuffers: gl.getExtension('WEBGL_draw_buffers'),\n                depthTexture: gl.getExtension('WEBGL_depth_texture'),\n                vertexArrayObject: gl.getExtension('OES_vertex_array_object')\n                    || gl.getExtension('MOZ_OES_vertex_array_object')\n                    || gl.getExtension('WEBKIT_OES_vertex_array_object'),\n                uint32ElementIndex: gl.getExtension('OES_element_index_uint'),\n                // Floats and half-floats\n                floatTexture: gl.getExtension('OES_texture_float'),\n                floatTextureLinear: gl.getExtension('OES_texture_float_linear'),\n                textureHalfFloat: gl.getExtension('OES_texture_half_float'),\n                textureHalfFloatLinear: gl.getExtension('OES_texture_half_float_linear'),\n            });\n        }\n        else if (this.webGLVersion === 2)\n        {\n            Object.assign(this.extensions, common, {\n                // Floats and half-floats\n                colorBufferFloat: gl.getExtension('EXT_color_buffer_float')\n            });\n        }\n    }\n\n    /**\n     * Handles a lost webgl context\n     * @param {WebGLContextEvent} event - The context lost event.\n     */\n    protected handleContextLost(event: WebGLContextEvent): void\n    {\n        // Prevent default to be able to restore the context\n        event.preventDefault();\n\n        // Restore the context after this event has exited\n        setTimeout(() =>\n        {\n            if (this.gl.isContextLost() && this.extensions.loseContext)\n            {\n                this.extensions.loseContext.restoreContext();\n            }\n        }, 0);\n    }\n\n    /** Handles a restored webgl context. */\n    protected handleContextRestored(): void\n    {\n        this.renderer.runners.contextChange.emit(this.gl);\n    }\n\n    destroy(): void\n    {\n        const view = this.renderer.view;\n\n        this.renderer = null;\n\n        // remove listeners\n        if (view.removeEventListener !== undefined)\n        {\n            view.removeEventListener('webglcontextlost', this.handleContextLost);\n            view.removeEventListener('webglcontextrestored', this.handleContextRestored);\n        }\n\n        this.gl.useProgram(null);\n\n        if (this.extensions.loseContext)\n        {\n            this.extensions.loseContext.loseContext();\n        }\n    }\n\n    /** Handle the post-render runner event. */\n    protected postrender(): void\n    {\n        if (this.renderer.objectRenderer.renderingToScreen)\n        {\n            this.gl.flush();\n        }\n    }\n\n    /**\n     * Validate context.\n     * @param {WebGLRenderingContext} gl - Render context.\n     */\n    protected validateContext(gl: IRenderingContext): void\n    {\n        const attributes = gl.getContextAttributes();\n\n        const isWebGl2 = 'WebGL2RenderingContext' in globalThis && gl instanceof globalThis.WebGL2RenderingContext;\n\n        if (isWebGl2)\n        {\n            this.webGLVersion = 2;\n        }\n\n        // this is going to be fairly simple for now.. but at least we have room to grow!\n        if (attributes && !attributes.stencil)\n        {\n            /* eslint-disable max-len, no-console */\n            console.warn('Provided WebGL context does not have a stencil buffer, masks may not render correctly');\n            /* eslint-enable max-len, no-console */\n        }\n\n        const hasuint32 = isWebGl2 || !!(gl as WebGLRenderingContext).getExtension('OES_element_index_uint');\n\n        this.supports.uint32Indices = hasuint32;\n\n        if (!hasuint32)\n        {\n            /* eslint-disable max-len, no-console */\n            console.warn('Provided WebGL context does not support 32 index buffer, complex graphics may not render correctly');\n            /* eslint-enable max-len, no-console */\n        }\n    }\n}\n\nextensions.add(ContextSystem);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}