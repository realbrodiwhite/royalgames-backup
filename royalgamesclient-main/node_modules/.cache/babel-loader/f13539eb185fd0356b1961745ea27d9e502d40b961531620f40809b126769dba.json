{"ast":null,"code":"import { LoaderParserPriority, copySearchParams } from '@pixi/assets';\nimport { ExtensionType, utils, settings, extensions } from '@pixi/core';\nimport { BitmapFont } from './BitmapFont.mjs';\nimport './formats/index.mjs';\nimport { TextFormat } from './formats/TextFormat.mjs';\nimport { XMLStringFormat } from './formats/XMLStringFormat.mjs';\nconst validExtensions = [\".xml\", \".fnt\"];\nconst loadBitmapFont = {\n  extension: {\n    type: ExtensionType.LoadParser,\n    priority: LoaderParserPriority.Normal\n  },\n  test(url) {\n    return validExtensions.includes(utils.path.extname(url).toLowerCase());\n  },\n  async testParse(data) {\n    return TextFormat.test(data) || XMLStringFormat.test(data);\n  },\n  async parse(asset, data, loader) {\n    const fontData = TextFormat.test(asset) ? TextFormat.parse(asset) : XMLStringFormat.parse(asset);\n    const {\n      src\n    } = data;\n    const {\n      page: pages\n    } = fontData;\n    const textureUrls = [];\n    for (let i = 0; i < pages.length; ++i) {\n      const pageFile = pages[i].file;\n      let imagePath = utils.path.join(utils.path.dirname(src), pageFile);\n      imagePath = copySearchParams(imagePath, src);\n      textureUrls.push(imagePath);\n    }\n    const loadedTextures = await loader.load(textureUrls);\n    const textures = textureUrls.map(url => loadedTextures[url]);\n    return BitmapFont.install(fontData, textures, true);\n  },\n  async load(url, _options) {\n    const response = await settings.ADAPTER.fetch(url);\n    return response.text();\n  },\n  unload(bitmapFont) {\n    bitmapFont.destroy();\n  }\n};\nextensions.add(loadBitmapFont);\nexport { loadBitmapFont };","map":{"version":3,"mappings":";;;;;;AASA,MAAMA,kBAAkB,CAAC,QAAQ,MAAM;AAGhC,MAAMC,cAAiB;EAC1BC,SAAW;IACPC,MAAMC,aAAc;IACpBC,UAAUC,oBAAqB;EAAA,CACnC;EAEAC,KAAKC,GACL;IACW,uBAAgBC,SAASC,KAAM,MAAKC,QAAQH,GAAG,EAAEI,aAAa;EAAA,CACzE;EAEA,MAAMC,UAAUC,IAChB;IACI,OAAOC,WAAWR,IAAK,KAAI,CAAK,oBAAgBA,KAAKO,IAAI;EAAA,CAC7D;EAEA,MAAME,MAAMC,KAAe,QAAiBC,MAC5C;IACU,iBAA2BH,UAAW,MAAKE,KAAK,IAChDF,UAAW,OAAME,KAAK,IACtBE,eAAgB,OAAMF,KAAK;IAEjC,MAAM;MAAEG;IAAQ;IACV;MAAEC,MAAMC;IAAU;IACxB,MAAMC,cAAc,EAAC;IAErB,SAASC,IAAI,CAAG,MAAIF,KAAM,SAAQ,EAAEE,CACpC;MACU,iBAAWF,MAAME,CAAG;MACtB,gBAAYd,MAAMe,IAAK,MAAKf,MAAMe,IAAK,SAAQL,GAAG,GAAGM,QAAQ;MAErDC,6BAAiBA,WAAWP,GAAG;MAE3CG,YAAYK,KAAKD,SAAS;IAAA;IAG9B,MAAME,cAAiB,SAAMX,MAAO,MAAcK,WAAW;IAC7D,MAAMO,WAAWP,WAAY,KAAKf,OAAQqB,eAAerB,GAAI;IAE7D,OAAOuB,UAAW,SAAQC,QAAU,YAAU,IAAI;EAAA,CACtD;EAEA,MAAMC,IAAKA,MAAaC,QACxB;IACI,MAAMC,QAAW,SAAMC,QAAS,SAAQC,MAAM7B,GAAG;IAEjD,OAAO2B,SAASG,IAAK;EAAA,CACzB;EAEAC,OAAOC,UACP;IACIA,WAAWC,OAAQ;EAAA;AAE3B;AAEAC,WAAWC,IAAI1C,cAAc","names":["validExtensions","loadBitmapFont","extension","type","ExtensionType","priority","LoaderParserPriority","test","url","includes","utils","extname","toLowerCase","testParse","data","TextFormat","parse","asset","loader","XMLStringFormat","src","page","pages","textureUrls","i","path","pageFile","imagePath","push","loadedTextures","textures","BitmapFont","fontData","load","_options","response","settings","fetch","text","unload","bitmapFont","destroy","extensions","add"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/text-bitmap/src/loadBitmapFont.ts"],"sourcesContent":["import { copySearchParams, LoaderParserPriority } from '@pixi/assets';\nimport { extensions, ExtensionType, settings, utils } from '@pixi/core';\nimport { BitmapFont } from './BitmapFont';\nimport { TextFormat, XMLStringFormat } from './formats';\n\nimport type { LoadAsset, Loader, LoaderParser } from '@pixi/assets';\nimport type { Texture } from '@pixi/core';\nimport type { BitmapFontData } from './BitmapFontData';\n\nconst validExtensions = ['.xml', '.fnt'];\n\n/** simple loader plugin for loading in bitmap fonts! */\nexport const loadBitmapFont = {\n    extension: {\n        type: ExtensionType.LoadParser,\n        priority: LoaderParserPriority.Normal,\n    },\n\n    test(url: string): boolean\n    {\n        return validExtensions.includes(utils.path.extname(url).toLowerCase());\n    },\n\n    async testParse(data: string): Promise<boolean>\n    {\n        return TextFormat.test(data) || XMLStringFormat.test(data);\n    },\n\n    async parse(asset: string, data: LoadAsset, loader: Loader): Promise<BitmapFont>\n    {\n        const fontData: BitmapFontData = TextFormat.test(asset)\n            ? TextFormat.parse(asset)\n            : XMLStringFormat.parse(asset);\n\n        const { src } = data;\n        const { page: pages } = fontData;\n        const textureUrls = [];\n\n        for (let i = 0; i < pages.length; ++i)\n        {\n            const pageFile = pages[i].file;\n            let imagePath = utils.path.join(utils.path.dirname(src), pageFile);\n\n            imagePath = copySearchParams(imagePath, src);\n\n            textureUrls.push(imagePath);\n        }\n\n        const loadedTextures = await loader.load<Texture>(textureUrls);\n        const textures = textureUrls.map((url) => loadedTextures[url]);\n\n        return BitmapFont.install(fontData, textures, true);\n    },\n\n    async load(url: string, _options: LoadAsset): Promise<string>\n    {\n        const response = await settings.ADAPTER.fetch(url);\n\n        return response.text();\n    },\n\n    unload(bitmapFont: BitmapFont): void\n    {\n        bitmapFont.destroy();\n    }\n} as LoaderParser<BitmapFont | string>;\n\nextensions.add(loadBitmapFont);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}