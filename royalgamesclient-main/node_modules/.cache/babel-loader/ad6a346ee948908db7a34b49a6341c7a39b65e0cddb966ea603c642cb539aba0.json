{"ast":null,"code":"import { ExtensionType, extensions } from '@pixi/extensions';\nimport { Rectangle } from '@pixi/math';\nconst tempRect = new Rectangle();\nconst tempRect2 = new Rectangle();\nclass RenderTextureSystem {\n  constructor(renderer) {\n    this.renderer = renderer;\n    this.defaultMaskStack = [];\n    this.current = null;\n    this.sourceFrame = new Rectangle();\n    this.destinationFrame = new Rectangle();\n    this.viewportFrame = new Rectangle();\n  }\n  bind() {\n    let renderTexture = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let sourceFrame = arguments.length > 1 ? arguments[1] : undefined;\n    let destinationFrame = arguments.length > 2 ? arguments[2] : undefined;\n    const renderer = this.renderer;\n    this.current = renderTexture;\n    let baseTexture;\n    let framebuffer;\n    let resolution;\n    if (renderTexture) {\n      baseTexture = renderTexture.baseTexture;\n      resolution = baseTexture.resolution;\n      if (!sourceFrame) {\n        tempRect.width = renderTexture.frame.width;\n        tempRect.height = renderTexture.frame.height;\n        sourceFrame = tempRect;\n      }\n      if (!destinationFrame) {\n        tempRect2.x = renderTexture.frame.x;\n        tempRect2.y = renderTexture.frame.y;\n        tempRect2.width = sourceFrame.width;\n        tempRect2.height = sourceFrame.height;\n        destinationFrame = tempRect2;\n      }\n      framebuffer = baseTexture.framebuffer;\n    } else {\n      resolution = renderer.resolution;\n      if (!sourceFrame) {\n        tempRect.width = renderer._view.screen.width;\n        tempRect.height = renderer._view.screen.height;\n        sourceFrame = tempRect;\n      }\n      if (!destinationFrame) {\n        destinationFrame = tempRect;\n        destinationFrame.width = sourceFrame.width;\n        destinationFrame.height = sourceFrame.height;\n      }\n    }\n    const viewportFrame = this.viewportFrame;\n    viewportFrame.x = destinationFrame.x * resolution;\n    viewportFrame.y = destinationFrame.y * resolution;\n    viewportFrame.width = destinationFrame.width * resolution;\n    viewportFrame.height = destinationFrame.height * resolution;\n    if (!renderTexture) {\n      viewportFrame.y = renderer.view.height - (viewportFrame.y + viewportFrame.height);\n    }\n    viewportFrame.ceil();\n    this.renderer.framebuffer.bind(framebuffer, viewportFrame);\n    this.renderer.projection.update(destinationFrame, sourceFrame, resolution, !framebuffer);\n    if (renderTexture) {\n      this.renderer.mask.setMaskStack(baseTexture.maskStack);\n    } else {\n      this.renderer.mask.setMaskStack(this.defaultMaskStack);\n    }\n    this.sourceFrame.copyFrom(sourceFrame);\n    this.destinationFrame.copyFrom(destinationFrame);\n  }\n  clear(clearColor, mask) {\n    if (this.current) {\n      clearColor = clearColor || this.current.baseTexture.clearColor;\n    } else {\n      clearColor = clearColor || this.renderer.background.colorRgba;\n    }\n    const destinationFrame = this.destinationFrame;\n    const baseFrame = this.current ? this.current.baseTexture : this.renderer._view.screen;\n    const clearMask = destinationFrame.width !== baseFrame.width || destinationFrame.height !== baseFrame.height;\n    if (clearMask) {\n      let {\n        x,\n        y,\n        width,\n        height\n      } = this.viewportFrame;\n      x = Math.round(x);\n      y = Math.round(y);\n      width = Math.round(width);\n      height = Math.round(height);\n      this.renderer.gl.enable(this.renderer.gl.SCISSOR_TEST);\n      this.renderer.gl.scissor(x, y, width, height);\n    }\n    this.renderer.framebuffer.clear(clearColor[0], clearColor[1], clearColor[2], clearColor[3], mask);\n    if (clearMask) {\n      this.renderer.scissor.pop();\n    }\n  }\n  resize() {\n    this.bind(null);\n  }\n  reset() {\n    this.bind(null);\n  }\n  destroy() {\n    this.renderer = null;\n  }\n}\nRenderTextureSystem.extension = {\n  type: ExtensionType.RendererSystem,\n  name: \"renderTexture\"\n};\nextensions.add(RenderTextureSystem);\nexport { RenderTextureSystem };","map":{"version":3,"mappings":"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","names":["tempRect","Rectangle","tempRect2","RenderTextureSystem","constructor","renderer","defaultMaskStack","current","bind","renderTexture","destinationFrame","baseTexture","resolution","sourceFrame","frame","width","height","framebuffer","screen","viewportFrame","x","y","ceil","projection","setMaskStack","maskStack","copyFrom","clear","clearColor","mask","background","_view","clearMask","baseFrame","round","gl","SCISSOR_TEST","scissor","pop","resize","reset","destroy","extension","type","ExtensionType","name","extensions","add"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/core/src/renderTexture/RenderTextureSystem.ts"],"sourcesContent":["import { extensions, ExtensionType } from '@pixi/extensions';\nimport { Rectangle } from '@pixi/math';\n\nimport type { BUFFER_BITS } from '@pixi/constants';\nimport type { ExtensionMetadata } from '@pixi/extensions';\nimport type { ISize } from '@pixi/math';\nimport type { MaskData } from '../mask/MaskData';\nimport type { Renderer } from '../Renderer';\nimport type { ISystem } from '../system/ISystem';\nimport type { BaseRenderTexture } from './BaseRenderTexture';\nimport type { RenderTexture } from './RenderTexture';\n\n// Temporary rectangle for assigned sourceFrame or destinationFrame\nconst tempRect = new Rectangle();\n\n// Temporary rectangle for renderTexture destinationFrame\nconst tempRect2 = new Rectangle();\n\n/* eslint-disable max-len */\n/**\n * System plugin to the renderer to manage render textures.\n *\n * Should be added after FramebufferSystem\n *\n * ### Frames\n *\n * The `RenderTextureSystem` holds a sourceFrame â†’ destinationFrame projection. The following table explains the different\n * coordinate spaces used:\n *\n * | Frame                  | Description                                                      | Coordinate System                                       |\n * | ---------------------- | ---------------------------------------------------------------- | ------------------------------------------------------- |\n * | sourceFrame            | The rectangle inside of which display-objects are being rendered | **World Space**: The origin on the top-left             |\n * | destinationFrame       | The rectangle in the render-target (canvas or texture) into which contents should be rendered | If rendering to the canvas, this is in screen space and the origin is on the top-left. If rendering to a render-texture, this is in its base-texture's space with the origin on the bottom-left.  |\n * | viewportFrame          | The framebuffer viewport corresponding to the destination-frame  | **Window Coordinates**: The origin is always on the bottom-left. |\n * @memberof PIXI\n */\nexport class RenderTextureSystem implements ISystem\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        type: ExtensionType.RendererSystem,\n        name: 'renderTexture',\n    };\n\n    /* eslint-enable max-len */\n\n    /**\n     * List of masks for the {@link PIXI.StencilSystem}.\n     * @readonly\n     */\n    public defaultMaskStack: Array<MaskData>;\n\n    /**\n     * Render texture currently bound. {@code null} if rendering to the canvas.\n     * @readonly\n     */\n    public current: RenderTexture | null;\n\n    /**\n     * The source frame for the render-target's projection mapping.\n     *\n     * See {@link PIXI.ProjectionSystem#sourceFrame} for more details\n     */\n    public readonly sourceFrame: Rectangle;\n\n    /**\n     * The destination frame for the render-target's projection mapping.\n     *\n     * See {@link PIXI.Projection#destinationFrame} for more details.\n     */\n    public readonly destinationFrame: Rectangle;\n\n    /**\n     * The viewport frame for the render-target's viewport binding. This is equal to the destination-frame\n     * for render-textures, while it is y-flipped when rendering to the screen (i.e. its origin is always on\n     * the bottom-left).\n     */\n    public readonly viewportFrame: Rectangle;\n\n    private renderer: Renderer;\n\n    /**\n     * @param renderer - The renderer this System works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n\n        this.defaultMaskStack = [];\n        this.current = null;\n        this.sourceFrame = new Rectangle();\n        this.destinationFrame = new Rectangle();\n        this.viewportFrame = new Rectangle();\n    }\n\n    /**\n     * Bind the current render texture.\n     * @param renderTexture - RenderTexture to bind, by default its `null` - the screen.\n     * @param sourceFrame - Part of world that is mapped to the renderTexture.\n     * @param destinationFrame - Part of renderTexture, by default it has the same size as sourceFrame.\n     */\n    bind(renderTexture: RenderTexture = null, sourceFrame?: Rectangle, destinationFrame?: Rectangle): void\n    {\n        const renderer = this.renderer;\n\n        this.current = renderTexture;\n\n        let baseTexture: BaseRenderTexture;\n        let framebuffer;\n        let resolution;\n\n        if (renderTexture)\n        {\n            baseTexture = renderTexture.baseTexture as BaseRenderTexture;\n\n            resolution = baseTexture.resolution;\n\n            if (!sourceFrame)\n            {\n                tempRect.width = renderTexture.frame.width;\n                tempRect.height = renderTexture.frame.height;\n\n                sourceFrame = tempRect;\n            }\n\n            if (!destinationFrame)\n            {\n                tempRect2.x = renderTexture.frame.x;\n                tempRect2.y = renderTexture.frame.y;\n                tempRect2.width = sourceFrame.width;\n                tempRect2.height = sourceFrame.height;\n\n                destinationFrame = tempRect2;\n            }\n\n            framebuffer = baseTexture.framebuffer;\n        }\n        else\n        {\n            resolution = renderer.resolution;\n\n            if (!sourceFrame)\n            {\n                tempRect.width = renderer._view.screen.width;\n                tempRect.height = renderer._view.screen.height;\n\n                sourceFrame = tempRect;\n            }\n\n            if (!destinationFrame)\n            {\n                destinationFrame = tempRect;\n\n                destinationFrame.width = sourceFrame.width;\n                destinationFrame.height = sourceFrame.height;\n            }\n        }\n\n        const viewportFrame = this.viewportFrame;\n\n        viewportFrame.x = destinationFrame.x * resolution;\n        viewportFrame.y = destinationFrame.y * resolution;\n        viewportFrame.width = destinationFrame.width * resolution;\n        viewportFrame.height = destinationFrame.height * resolution;\n\n        if (!renderTexture)\n        {\n            viewportFrame.y = renderer.view.height - (viewportFrame.y + viewportFrame.height);\n        }\n\n        viewportFrame.ceil();\n\n        this.renderer.framebuffer.bind(framebuffer, viewportFrame);\n        this.renderer.projection.update(destinationFrame, sourceFrame, resolution, !framebuffer);\n\n        if (renderTexture)\n        {\n            this.renderer.mask.setMaskStack(baseTexture.maskStack);\n        }\n        else\n        {\n            this.renderer.mask.setMaskStack(this.defaultMaskStack);\n        }\n\n        this.sourceFrame.copyFrom(sourceFrame);\n        this.destinationFrame.copyFrom(destinationFrame);\n    }\n\n    /**\n     * Erases the render texture and fills the drawing area with a colour.\n     * @param clearColor - The color as rgba, default to use the renderer backgroundColor\n     * @param [mask=BUFFER_BITS.COLOR | BUFFER_BITS.DEPTH] - Bitwise OR of masks\n     *  that indicate the buffers to be cleared, by default COLOR and DEPTH buffers.\n     */\n    clear(clearColor?: number[], mask?: BUFFER_BITS): void\n    {\n        if (this.current)\n        {\n            clearColor = clearColor || (this.current.baseTexture as BaseRenderTexture).clearColor;\n        }\n        else\n        {\n            clearColor = clearColor || this.renderer.background.colorRgba;\n        }\n\n        const destinationFrame = this.destinationFrame;\n        const baseFrame: ISize = this.current ? this.current.baseTexture : this.renderer._view.screen;\n        const clearMask = destinationFrame.width !== baseFrame.width || destinationFrame.height !== baseFrame.height;\n\n        if (clearMask)\n        {\n            let { x, y, width, height } = this.viewportFrame;\n\n            x = Math.round(x);\n            y = Math.round(y);\n            width = Math.round(width);\n            height = Math.round(height);\n\n            // TODO: ScissorSystem should cache whether the scissor test is enabled or not.\n            this.renderer.gl.enable(this.renderer.gl.SCISSOR_TEST);\n            this.renderer.gl.scissor(x, y, width, height);\n        }\n\n        this.renderer.framebuffer.clear(clearColor[0], clearColor[1], clearColor[2], clearColor[3], mask);\n\n        if (clearMask)\n        {\n            // Restore the scissor box\n            this.renderer.scissor.pop();\n        }\n    }\n\n    resize(): void // screenWidth, screenHeight)\n    {\n        // resize the root only!\n        this.bind(null);\n    }\n\n    /** Resets render-texture state. */\n    reset(): void\n    {\n        this.bind(null);\n    }\n\n    destroy(): void\n    {\n        this.renderer = null;\n    }\n}\n\nextensions.add(RenderTextureSystem);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}