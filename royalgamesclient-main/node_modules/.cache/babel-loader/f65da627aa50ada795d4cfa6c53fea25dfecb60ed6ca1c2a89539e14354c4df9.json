{"ast":null,"code":"const fragTemplate = [\"precision mediump float;\", \"void main(void){\", \"float test = 0.1;\", \"%forloop%\", \"gl_FragColor = vec4(0.0);\", \"}\"].join(\"\\n\");\nfunction generateIfTestSrc(maxIfs) {\n  let src = \"\";\n  for (let i = 0; i < maxIfs; ++i) {\n    if (i > 0) {\n      src += \"\\nelse \";\n    }\n    if (i < maxIfs - 1) {\n      src += \"if(test == \".concat(i, \".0){}\");\n    }\n  }\n  return src;\n}\nfunction checkMaxIfStatementsInShader(maxIfs, gl) {\n  if (maxIfs === 0) {\n    throw new Error(\"Invalid value of `0` passed to `checkMaxIfStatementsInShader`\");\n  }\n  const shader = gl.createShader(gl.FRAGMENT_SHADER);\n  while (true) {\n    const fragmentSrc = fragTemplate.replace(/%forloop%/gi, generateIfTestSrc(maxIfs));\n    gl.shaderSource(shader, fragmentSrc);\n    gl.compileShader(shader);\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      maxIfs = maxIfs / 2 | 0;\n    } else {\n      break;\n    }\n  }\n  return maxIfs;\n}\nexport { checkMaxIfStatementsInShader };","map":{"version":3,"mappings":"AAEA,MAAMA,YAAe,IACjB,4BACA,oBACA,qBACA,aACA,6BACA,IACJ,CAAEC,KAAK,IAAI;AAEX,2BAA2BC,MAC3B;EACI,IAAIC,GAAM;EAEV,SAASC,CAAI,MAAGA,CAAI,WAAQ,EAAEA,CAC9B;IACI,IAAIA,IAAI,CACR;MACWD;IAAA;IAGP,QAAID,SAAS,CACjB;MACIC,4BAAqBC;IAAA;EACzB;EAGG;AACX;AAEO,sCAAsCF,QAAgBG,EAC7D;EACI,IAAIH,WAAW,CACf;IACU,UAAII,MAAM,+DAA+D;EAAA;EAGnF,MAAMC,MAAS,MAAGC,YAAa,IAAGC,eAAe;EAEjD,OAAO,IACP;IACI,MAAMC,cAAcV,YAAa,SAAQ,aAAe,oBAAkBE,MAAM,CAAC;IAE9EG,gBAAaE,QAAQG,WAAW;IACnCL,GAAGM,cAAcJ,MAAM;IAEvB,IAAI,CAACF,EAAG,oBAAmBE,MAAQ,KAAGK,cAAc,CACpD;MACIV,SAAUA,SAAS,CAAK;IAAA,CAG5B;MAEI;IAAA;EACJ;EAGG;AACX","names":["fragTemplate","join","maxIfs","src","i","gl","Error","shader","createShader","FRAGMENT_SHADER","fragmentSrc","compileShader","COMPILE_STATUS"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/core/src/shader/utils/checkMaxIfStatementsInShader.ts"],"sourcesContent":["import type { IRenderingContext } from '../../IRenderer';\n\nconst fragTemplate = [\n    'precision mediump float;',\n    'void main(void){',\n    'float test = 0.1;',\n    '%forloop%',\n    'gl_FragColor = vec4(0.0);',\n    '}',\n].join('\\n');\n\nfunction generateIfTestSrc(maxIfs: number): string\n{\n    let src = '';\n\n    for (let i = 0; i < maxIfs; ++i)\n    {\n        if (i > 0)\n        {\n            src += '\\nelse ';\n        }\n\n        if (i < maxIfs - 1)\n        {\n            src += `if(test == ${i}.0){}`;\n        }\n    }\n\n    return src;\n}\n\nexport function checkMaxIfStatementsInShader(maxIfs: number, gl: IRenderingContext): number\n{\n    if (maxIfs === 0)\n    {\n        throw new Error('Invalid value of `0` passed to `checkMaxIfStatementsInShader`');\n    }\n\n    const shader = gl.createShader(gl.FRAGMENT_SHADER);\n\n    while (true) // eslint-disable-line no-constant-condition\n    {\n        const fragmentSrc = fragTemplate.replace(/%forloop%/gi, generateIfTestSrc(maxIfs));\n\n        gl.shaderSource(shader, fragmentSrc);\n        gl.compileShader(shader);\n\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n        {\n            maxIfs = (maxIfs / 2) | 0;\n        }\n        else\n        {\n            // valid!\n            break;\n        }\n    }\n\n    return maxIfs;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}