{"ast":null,"code":"import { splitTextToCharacters } from './splitTextToCharacters.mjs';\nfunction resolveCharacters(chars) {\n  if (typeof chars === \"string\") {\n    chars = [chars];\n  }\n  const result = [];\n  for (let i = 0, j = chars.length; i < j; i++) {\n    const item = chars[i];\n    if (Array.isArray(item)) {\n      if (item.length !== 2) {\n        throw new Error(\"[BitmapFont]: Invalid character range length, expecting 2 got \".concat(item.length, \".\"));\n      }\n      const startCode = item[0].charCodeAt(0);\n      const endCode = item[1].charCodeAt(0);\n      if (endCode < startCode) {\n        throw new Error(\"[BitmapFont]: Invalid character range.\");\n      }\n      for (let i2 = startCode, j2 = endCode; i2 <= j2; i2++) {\n        result.push(String.fromCharCode(i2));\n      }\n    } else {\n      result.push(...splitTextToCharacters(item));\n    }\n  }\n  if (result.length === 0) {\n    throw new Error(\"[BitmapFont]: Empty set when resolving characters.\");\n  }\n  return result;\n}\nexport { resolveCharacters };","map":{"version":3,"mappings":";AAUO,2BAA2BA,KAClC;EAEQ,WAAOA,UAAU,QACrB;IACIA,QAAQ,CAACA,KAAK;EAAA;EAIlB,MAAMC,SAAmB,EAAC;EAE1B,SAASC,IAAI,CAAG,MAAIF,MAAMG,MAAQ,MAAIC,GAAGF,CACzC;IACI,MAAMG,OAAOL,KAAM;IAGf,UAAMM,OAAQ,KAAI,CACtB;MACQ,SAAKH,WAAW,CACpB;QACI,MAAM,IAAII,8EAAuEF,KAAKF,MAAS;MAAA;MAGnG,MAAMK,SAAY,QAAK,CAAG,aAAW,CAAC;MACtC,MAAMC,OAAU,QAAK,CAAG,aAAW,CAAC;MAEpC,IAAIA,UAAUD,SACd;QACU,UAAID,MAAM,wCAAwC;MAAA;MAG5D,SAASG,KAAIF,SAAW,OAAIC,OAAS,QAAKE,IAAGD,EAC7C;QACIT,OAAOW,IAAK,QAAOC,YAAa,GAAC,CAAC;MAAA;IACtC,CAIJ;MACIZ,OAAOW,IAAK,IAAGE,qBAAsB,KAAI,CAAC;IAAA;EAC9C;EAGA,WAAOX,WAAW,CACtB;IACU,UAAII,MAAM,oDAAoD;EAAA;EAGjE;AACX","names":["chars","result","i","length","j","item","isArray","Error","startCode","endCode","i2","j2","push","fromCharCode","splitTextToCharacters"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/text-bitmap/src/utils/resolveCharacters.ts"],"sourcesContent":["import { splitTextToCharacters } from './splitTextToCharacters';\n\n/**\n * Processes the passed character set data and returns a flattened array of all the characters.\n *\n * Ignored because not directly exposed.\n * @ignore\n * @param {string | string[] | string[][] } chars\n * @returns {string[]} the flattened array of characters\n */\nexport function resolveCharacters(chars: string | (string | string[])[]): string[]\n{\n    // Split the chars string into individual characters\n    if (typeof chars === 'string')\n    {\n        chars = [chars];\n    }\n\n    // Handle an array of characters+ranges\n    const result: string[] = [];\n\n    for (let i = 0, j = chars.length; i < j; i++)\n    {\n        const item = chars[i];\n\n        // Handle range delimited by start/end chars\n        if (Array.isArray(item))\n        {\n            if (item.length !== 2)\n            {\n                throw new Error(`[BitmapFont]: Invalid character range length, expecting 2 got ${item.length}.`);\n            }\n\n            const startCode = item[0].charCodeAt(0);\n            const endCode = item[1].charCodeAt(0);\n\n            if (endCode < startCode)\n            {\n                throw new Error('[BitmapFont]: Invalid character range.');\n            }\n\n            for (let i = startCode, j = endCode; i <= j; i++)\n            {\n                result.push(String.fromCharCode(i));\n            }\n        }\n        // Handle a character set string\n        else\n        {\n            result.push(...splitTextToCharacters(item));\n        }\n    }\n\n    if (result.length === 0)\n    {\n        throw new Error('[BitmapFont]: Empty set when resolving characters.');\n    }\n\n    return result;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}