{"ast":null,"code":"function logPrettyShaderError(gl, shader) {\n  const shaderSrc = gl.getShaderSource(shader).split(\"\\n\").map((line, index) => \"\".concat(index, \": \").concat(line));\n  const shaderLog = gl.getShaderInfoLog(shader);\n  const splitShader = shaderLog.split(\"\\n\");\n  const dedupe = {};\n  const lineNumbers = splitShader.map(line => parseFloat(line.replace(/^ERROR\\: 0\\:([\\d]+)\\:.*$/, \"$1\"))).filter(n => {\n    if (n && !dedupe[n]) {\n      dedupe[n] = true;\n      return true;\n    }\n    return false;\n  });\n  const logArgs = [\"\"];\n  lineNumbers.forEach(number => {\n    shaderSrc[number - 1] = \"%c\".concat(shaderSrc[number - 1], \"%c\");\n    logArgs.push(\"background: #FF0000; color:#FFFFFF; font-size: 10px\", \"font-size: 10px\");\n  });\n  const fragmentSourceToLog = shaderSrc.join(\"\\n\");\n  logArgs[0] = fragmentSourceToLog;\n  console.error(shaderLog);\n  console.groupCollapsed(\"click to view full shader code\");\n  console.warn(...logArgs);\n  console.groupEnd();\n}\nfunction logProgramError(gl, program, vertexShader, fragmentShader) {\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n      logPrettyShaderError(gl, vertexShader);\n    }\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n      logPrettyShaderError(gl, fragmentShader);\n    }\n    console.error(\"PixiJS Error: Could not initialize shader.\");\n    if (gl.getProgramInfoLog(program) !== \"\") {\n      console.warn(\"PixiJS Warning: gl.getProgramInfoLog()\", gl.getProgramInfoLog(program));\n    }\n  }\n}\nexport { logProgramError };","map":{"version":3,"mappings":"AAMA,8BAA8BA,IAA2BC,MACzD;EACI,MAAMC,SAAY,MAAGC,eAAgB,OAAM,EACtCC,KAAM,KAAI,CACV,KAAI,CAACC,MAAMC,KAAU,eAAGA,oBAAUD,IAAM;EAEvC,kBAAYL,EAAG,kBAAiBC,MAAM;EACtC,oBAAcM,SAAU,OAAM,IAAI;EAExC,MAAMC,SAAkC,EAAC;EAEzC,MAAMC,WAAc,eAAYC,GAAI,CAACL,QAASM,UAAW,MAAKC,OAAQ,6BAA4B,IAAI,CAAC,CAAC,CACnG,QAAQC,CACT;IACQ,SAAK,CAACL,OAAOK,CACjB;MACIL,OAAOK,CAAK;MAEL;IAAA;IAGJ;EAAA,CACV;EAEC,gBAAU,CAAC,EAAE;EAEPJ,oBAASK,MACrB;IACIZ,UAAUY,MAAS,oBAAUZ,UAAUY,MAAS;IACxCC,aAAK,uDAAuD,iBAAiB;EAAA,CACxF;EAEK,4BAAsBb,SACvB,MAAK,IAAI;EAEda,QAAQ,CAAK;EAEbC,QAAQC,MAAMV,SAAS;EAGvBS,QAAQE,eAAe,gCAAgC;EAC/CF,aAAK,GAAGD,OAAO;EAEvBC,QAAQG,QAAS;AACrB;AAWI,6BACAC,OACA,gBACAC,cAEJ;EAEI,IAAI,CAACrB,EAAG,qBAAoBoB,OAAS,KAAGE,WAAW,CACnD;IACI,IAAI,CAACtB,EAAG,oBAAmBuB,YAAc,KAAGC,cAAc,CAC1D;MACIC,qBAAqBzB,IAAIuB,YAAY;IAAA;IAGzC,IAAI,CAACvB,EAAG,oBAAmBqB,cAAgB,KAAGG,cAAc,CAC5D;MACIC,qBAAqBzB,IAAIqB,cAAc;IAAA;IAG3CL,QAAQC,MAAM,4CAA4C;IAG1D,IAAIjB,EAAG,mBAAkBoB,OAAO,MAAM,EACtC;MACIJ,QAAQU,IAAK,2CAA0C1B,EAAG,mBAAkBoB,OAAO,CAAC;IAAA;EACxF;AAER","names":["gl","shader","shaderSrc","getShaderSource","split","line","index","shaderLog","dedupe","lineNumbers","map","parseFloat","replace","n","number","logArgs","console","error","groupCollapsed","groupEnd","program","fragmentShader","LINK_STATUS","vertexShader","COMPILE_STATUS","logPrettyShaderError","warn"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/core/src/shader/utils/logProgramError.ts"],"sourcesContent":["/**\n * will log a shader error highlighting the lines with the error\n * also will add numbers along the side.\n * @param gl - the WebGLContext\n * @param shader - the shader to log errors for\n */\nfunction logPrettyShaderError(gl: WebGLRenderingContext, shader: WebGLShader): void\n{\n    const shaderSrc = gl.getShaderSource(shader)\n        .split('\\n')\n        .map((line, index) => `${index}: ${line}`);\n\n    const shaderLog = gl.getShaderInfoLog(shader);\n    const splitShader = shaderLog.split('\\n');\n\n    const dedupe: Record<number, boolean> = {};\n\n    const lineNumbers = splitShader.map((line) => parseFloat(line.replace(/^ERROR\\: 0\\:([\\d]+)\\:.*$/, '$1')))\n        .filter((n) =>\n        {\n            if (n && !dedupe[n])\n            {\n                dedupe[n] = true;\n\n                return true;\n            }\n\n            return false;\n        });\n\n    const logArgs = [''];\n\n    lineNumbers.forEach((number) =>\n    {\n        shaderSrc[number - 1] = `%c${shaderSrc[number - 1]}%c`;\n        logArgs.push('background: #FF0000; color:#FFFFFF; font-size: 10px', 'font-size: 10px');\n    });\n\n    const fragmentSourceToLog = shaderSrc\n        .join('\\n');\n\n    logArgs[0] = fragmentSourceToLog;\n\n    console.error(shaderLog);\n\n    // eslint-disable-next-line no-console\n    console.groupCollapsed('click to view full shader code');\n    console.warn(...logArgs);\n    // eslint-disable-next-line no-console\n    console.groupEnd();\n}\n\n/**\n *\n * logs out any program errors\n * @param gl - The current WebGL context\n * @param program - the WebGL program to display errors for\n * @param vertexShader  - the fragment WebGL shader program\n * @param fragmentShader - the vertex WebGL shader program\n */\nexport function logProgramError(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram,\n    vertexShader: WebGLShader,\n    fragmentShader: WebGLShader\n): void\n{\n    // if linking fails, then log and cleanup\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS))\n    {\n        if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS))\n        {\n            logPrettyShaderError(gl, vertexShader);\n        }\n\n        if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS))\n        {\n            logPrettyShaderError(gl, fragmentShader);\n        }\n\n        console.error('PixiJS Error: Could not initialize shader.');\n\n        // if there is a program info log, log it\n        if (gl.getProgramInfoLog(program) !== '')\n        {\n            console.warn('PixiJS Warning: gl.getProgramInfoLog()', gl.getProgramInfoLog(program));\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}