{"ast":null,"code":"class ViewableBuffer {\n  constructor(sizeOrBuffer) {\n    if (typeof sizeOrBuffer === \"number\") {\n      this.rawBinaryData = new ArrayBuffer(sizeOrBuffer);\n    } else if (sizeOrBuffer instanceof Uint8Array) {\n      this.rawBinaryData = sizeOrBuffer.buffer;\n    } else {\n      this.rawBinaryData = sizeOrBuffer;\n    }\n    this.uint32View = new Uint32Array(this.rawBinaryData);\n    this.float32View = new Float32Array(this.rawBinaryData);\n  }\n  get int8View() {\n    if (!this._int8View) {\n      this._int8View = new Int8Array(this.rawBinaryData);\n    }\n    return this._int8View;\n  }\n  get uint8View() {\n    if (!this._uint8View) {\n      this._uint8View = new Uint8Array(this.rawBinaryData);\n    }\n    return this._uint8View;\n  }\n  get int16View() {\n    if (!this._int16View) {\n      this._int16View = new Int16Array(this.rawBinaryData);\n    }\n    return this._int16View;\n  }\n  get uint16View() {\n    if (!this._uint16View) {\n      this._uint16View = new Uint16Array(this.rawBinaryData);\n    }\n    return this._uint16View;\n  }\n  get int32View() {\n    if (!this._int32View) {\n      this._int32View = new Int32Array(this.rawBinaryData);\n    }\n    return this._int32View;\n  }\n  view(type) {\n    return this[\"\".concat(type, \"View\")];\n  }\n  destroy() {\n    this.rawBinaryData = null;\n    this._int8View = null;\n    this._uint8View = null;\n    this._int16View = null;\n    this._uint16View = null;\n    this._int32View = null;\n    this.uint32View = null;\n    this.float32View = null;\n  }\n  static sizeOf(type) {\n    switch (type) {\n      case \"int8\":\n      case \"uint8\":\n        return 1;\n      case \"int16\":\n      case \"uint16\":\n        return 2;\n      case \"int32\":\n      case \"uint32\":\n      case \"float32\":\n        return 4;\n      default:\n        throw new Error(\"\".concat(type, \" isn't a valid view type\"));\n    }\n  }\n}\nexport { ViewableBuffer };","map":{"version":3,"mappings":"AAMO,MAAMA,cACb;EA4BIC,YAAYC,YACZ;IACQ,WAAOA,iBAAiB,QAC5B;MACS,qBAAgB,IAAIC,YAAYD,YAAY;IAAA,CACrD,UACSA,wBAAwBE,UACjC;MACI,KAAKC,gBAAgBH,YAAa;IAAA,CAGtC;MACI,KAAKG,aAAgB;IAAA;IAGzB,KAAKC,UAAa,OAAIC,WAAY,MAAKF,aAAa;IACpD,KAAKG,WAAc,OAAIC,YAAa,MAAKJ,aAAa;EAAA;EAI1D,IAAIK,QACJA;IACQ,KAAC,KAAKC,SACV;MACI,KAAKA,SAAY,OAAIC,SAAU,MAAKP,aAAa;IAAA;IAGrD,OAAO,IAAK;EAAA;EAIhB,IAAIQ,SACJA;IACQ,KAAC,KAAKC,UACV;MACI,KAAKA,UAAa,OAAIV,UAAW,MAAKC,aAAa;IAAA;IAGvD,OAAO,IAAK;EAAA;EAIhB,IAAIU,SACJA;IACQ,KAAC,KAAKC,UACV;MACI,KAAKA,UAAa,OAAIC,UAAW,MAAKZ,aAAa;IAAA;IAGvD,OAAO,IAAK;EAAA;EAIhB,IAAIa,UACJA;IACQ,KAAC,KAAKC,WACV;MACI,KAAKA,WAAc,OAAIC,WAAY,MAAKf,aAAa;IAAA;IAGzD,OAAO,IAAK;EAAA;EAIhB,IAAIgB,SACJA;IACQ,KAAC,KAAKC,UACV;MACI,KAAKA,UAAa,OAAIC,UAAW,MAAKlB,aAAa;IAAA;IAGvD,OAAO,IAAK;EAAA;EAShBmB,KAAKC,IACL;IACI,OAAQ,eAAgBA;EAAA;EAI5BC,OACAA;IACI,KAAKrB,aAAgB;IACrB,KAAKM,SAAY;IACjB,KAAKG,UAAa;IAClB,KAAKE,UAAa;IAClB,KAAKG,WAAc;IACnB,KAAKG,UAAa;IAClB,KAAKhB,UAAa;IAClB,KAAKE,WAAc;EAAA;EAGvB,OAAOmB,OAAOF,IACd;IACY;MAEC;MACA;QACM;MACN;MACA;QACM;MACN;MACA;MACA;QACM;MAAA;QAED,UAAIG,KAAM,WAAGH,IAA8B;IAAA;EAAA;AAGjE","names":["ViewableBuffer","constructor","sizeOrBuffer","ArrayBuffer","Uint8Array","rawBinaryData","uint32View","Uint32Array","float32View","Float32Array","int8View","_int8View","Int8Array","uint8View","_uint8View","int16View","_int16View","Int16Array","uint16View","_uint16View","Uint16Array","int32View","_int32View","Int32Array","view","type","destroy","sizeOf","Error"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/core/src/geometry/ViewableBuffer.ts"],"sourcesContent":["import type { ITypedArray } from './Buffer';\n\n/**\n * Flexible wrapper around `ArrayBuffer` that also provides typed array views on demand.\n * @memberof PIXI\n */\nexport class ViewableBuffer\n{\n    public size: number;\n\n    /** Underlying `ArrayBuffer` that holds all the data and is of capacity `this.size`. */\n    public rawBinaryData: ArrayBuffer;\n\n    /** View on the raw binary data as a `Uint32Array`. */\n    public uint32View: Uint32Array;\n\n    /** View on the raw binary data as a `Float32Array`. */\n    public float32View: Float32Array;\n\n    private _int8View: Int8Array;\n    private _uint8View: Uint8Array;\n    private _int16View: Int16Array;\n    private _uint16View: Uint16Array;\n    private _int32View: Int32Array;\n\n    /**\n     * @param length - The size of the buffer in bytes.\n     */\n    constructor(length: number);\n\n    /**\n     * @param arrayBuffer - The source array buffer.\n     */\n    constructor(arrayBuffer: ArrayBuffer);\n\n    constructor(sizeOrBuffer: number | ArrayBuffer | Uint8Array)\n    {\n        if (typeof sizeOrBuffer === 'number')\n        {\n            this.rawBinaryData = new ArrayBuffer(sizeOrBuffer);\n        }\n        else if (sizeOrBuffer instanceof Uint8Array)\n        {\n            this.rawBinaryData = sizeOrBuffer.buffer;\n        }\n        else\n        {\n            this.rawBinaryData = sizeOrBuffer;\n        }\n\n        this.uint32View = new Uint32Array(this.rawBinaryData);\n        this.float32View = new Float32Array(this.rawBinaryData);\n    }\n\n    /** View on the raw binary data as a `Int8Array`. */\n    get int8View(): Int8Array\n    {\n        if (!this._int8View)\n        {\n            this._int8View = new Int8Array(this.rawBinaryData);\n        }\n\n        return this._int8View;\n    }\n\n    /** View on the raw binary data as a `Uint8Array`. */\n    get uint8View(): Uint8Array\n    {\n        if (!this._uint8View)\n        {\n            this._uint8View = new Uint8Array(this.rawBinaryData);\n        }\n\n        return this._uint8View;\n    }\n\n    /**  View on the raw binary data as a `Int16Array`. */\n    get int16View(): Int16Array\n    {\n        if (!this._int16View)\n        {\n            this._int16View = new Int16Array(this.rawBinaryData);\n        }\n\n        return this._int16View;\n    }\n\n    /** View on the raw binary data as a `Uint16Array`. */\n    get uint16View(): Uint16Array\n    {\n        if (!this._uint16View)\n        {\n            this._uint16View = new Uint16Array(this.rawBinaryData);\n        }\n\n        return this._uint16View;\n    }\n\n    /** View on the raw binary data as a `Int32Array`. */\n    get int32View(): Int32Array\n    {\n        if (!this._int32View)\n        {\n            this._int32View = new Int32Array(this.rawBinaryData);\n        }\n\n        return this._int32View;\n    }\n\n    /**\n     * Returns the view of the given type.\n     * @param type - One of `int8`, `uint8`, `int16`,\n     *    `uint16`, `int32`, `uint32`, and `float32`.\n     * @returns - typed array of given type\n     */\n    view(type: string): ITypedArray\n    {\n        return (this as any)[`${type}View`];\n    }\n\n    /** Destroys all buffer references. Do not use after calling this. */\n    destroy(): void\n    {\n        this.rawBinaryData = null;\n        this._int8View = null;\n        this._uint8View = null;\n        this._int16View = null;\n        this._uint16View = null;\n        this._int32View = null;\n        this.uint32View = null;\n        this.float32View = null;\n    }\n\n    static sizeOf(type: string): number\n    {\n        switch (type)\n        {\n            case 'int8':\n            case 'uint8':\n                return 1;\n            case 'int16':\n            case 'uint16':\n                return 2;\n            case 'int32':\n            case 'uint32':\n            case 'float32':\n                return 4;\n            default:\n                throw new Error(`${type} isn't a valid view type`);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}