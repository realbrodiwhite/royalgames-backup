{"ast":null,"code":"import { utils, ExtensionType, settings, extensions } from '@pixi/core';\nimport { checkDataUrl } from '../../utils/checkDataUrl.mjs';\nimport { checkExtension } from '../../utils/checkExtension.mjs';\nimport { LoaderParserPriority } from './LoaderParser.mjs';\nconst validWeights = [\"normal\", \"bold\", \"100\", \"200\", \"300\", \"400\", \"500\", \"600\", \"700\", \"800\", \"900\"];\nconst validFontExtensions = [\".ttf\", \".otf\", \".woff\", \".woff2\"];\nconst validFontMIMEs = [\"font/ttf\", \"font/otf\", \"font/woff\", \"font/woff2\"];\nfunction getFontFamilyName(url) {\n  const ext = utils.path.extname(url);\n  const name = utils.path.basename(url, ext);\n  const nameWithSpaces = name.replace(/(-|_)/g, \" \");\n  const nameTitleCase = nameWithSpaces.toLowerCase().split(\" \").map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(\" \");\n  return nameTitleCase;\n}\nconst loadWebFont = {\n  extension: {\n    type: ExtensionType.LoadParser,\n    priority: LoaderParserPriority.Low\n  },\n  test(url) {\n    return checkDataUrl(url, validFontMIMEs) || checkExtension(url, validFontExtensions);\n  },\n  async load(url, options) {\n    const fonts = settings.ADAPTER.getFontFaceSet();\n    if (fonts) {\n      var _options$data$family, _options$data, _options$data$weights, _options$data2, _options$data2$weight, _options$data3;\n      const fontFaces = [];\n      const name = (_options$data$family = (_options$data = options.data) === null || _options$data === void 0 ? void 0 : _options$data.family) !== null && _options$data$family !== void 0 ? _options$data$family : getFontFamilyName(url);\n      const weights = (_options$data$weights = (_options$data2 = options.data) === null || _options$data2 === void 0 ? void 0 : (_options$data2$weight = _options$data2.weights) === null || _options$data2$weight === void 0 ? void 0 : _options$data2$weight.filter(weight => validWeights.includes(weight))) !== null && _options$data$weights !== void 0 ? _options$data$weights : [\"normal\"];\n      const data = (_options$data3 = options.data) !== null && _options$data3 !== void 0 ? _options$data3 : {};\n      for (let i = 0; i < weights.length; i++) {\n        const weight = weights[i];\n        const font = new FontFace(name, \"url(\".concat(encodeURI(url), \")\"), {\n          ...data,\n          weight\n        });\n        await font.load();\n        fonts.add(font);\n        fontFaces.push(font);\n      }\n      return fontFaces.length === 1 ? fontFaces[0] : fontFaces;\n    }\n    console.warn(\"[loadWebFont] FontFace API is not supported. Skipping loading font\");\n    return null;\n  },\n  unload(font) {\n    (Array.isArray(font) ? font : [font]).forEach(t => settings.ADAPTER.getFontFaceSet().delete(t));\n  }\n};\nextensions.add(loadWebFont);\nexport { getFontFamilyName, loadWebFont };","map":{"version":3,"mappings":";;;;AAQA,MAAMA,YAAe,IACjB,UAAU,QACV,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,MAC5D;AACA,MAAMC,mBAAsB,IAAC,MAAQ,UAAQ,SAAS,QAAQ;AAC9D,MAAMC,cAAiB,IACnB,YACA,YACA,aACA,aACJ;AAkBO,2BAA2BC,GAClC;EACI,MAAMC,GAAM,SAAMC,IAAK,SAAQF,GAAG;EAClC,MAAMG,IAAO,SAAMD,IAAK,UAASF,KAAKC,GAAG;EAGzC,MAAMG,cAAiB,QAAKC,OAAQ,WAAU,GAAG;EAG3C,sBAAgBD,eAAeE,WAAY,GAC5CC,MAAM,GAAG,EACTC,GAAI,CAACC,IAAS,SAAKC,OAAO,CAAC,EAAEC,aAAgB,QAAKC,MAAM,CAAC,CAAC,CAC1D,MAAK,GAAG;EAEN;AACX;AAGO,MAAMC,WAAc;EACvBC,SAAW;IACPC,MAAMC,aAAc;IACpBC,UAAUC,oBAAqB;EAAA,CACnC;EAEAC,KAAKnB,GACL;IACI,OAAOoB,aAAapB,GAAK,gBAAc,CAAK,mBAAeA,KAAKF,mBAAmB;EAAA,CACvF;EAEA,MAAMuB,IAAKA,MAAaC,OACxB;IACU,cAAQC,QAAS,SAAQC,cAAe;IAE9C,IAAIC,KACJ;MAAA;MACI,MAAMC,YAAwB,EAAC;MAC/B,MAAMvB,IAAO,oDAAQwB,IAAM,kDAAdC,cAAcC,6EAAUC,kBAAkB9B,GAAG;MAC1D,MAAM+B,OAAU,sDAAQJ,IAAM,4EAAdK,eAAcD,iEAAdE,sBAAuBC,MAAO,CAACC,MAAW,iBAAaC,QAAS,OAAM,CAAC,0EAAK,CAAC,QAAQ;MAC/F,+BAAOd,OAAQ,gEAAQ,EAAC;MAE9B,SAASe,CAAI,MAAGA,CAAI,WAAQC,QAAQD,CACpC;QACI,MAAMF,SAASJ,OAAQ;QAEvB,MAAMQ,OAAO,IAAIC,SAASrC,oBAAasC,UAAUzC,GAAG,CAAM;UACtD,GAAG2B;UACHQ;QAAA,CACH;QAED,MAAMI,KAAKlB,IAAK;QAEhBI,MAAMiB,IAAIH,IAAI;QAEdb,UAAUiB,KAAKJ,IAAI;MAAA;MAGvB,OAAOb,SAAU,YAAW,CAAI,aAAU,CAAK;IAAA;IAInDkB,QAAQC,KAAK,oEAAoE;IAG1E;EAAA,CACX;EAEAC,OAAOP,IACP;IACK,OAAMQ,OAAQ,KAAI,CAAI,UAAO,CAACR,IAAI,GAC9BS,OAAQ,CAACC,KAAM1B,QAAS,SAAQC,gBAAiB,QAAOyB,CAAC,CAAC;EAAA;AAEvE;AAEAC,WAAWR,IAAI7B,WAAW","names":["validWeights","validFontExtensions","validFontMIMEs","url","ext","path","name","nameWithSpaces","replace","toLowerCase","split","map","word","charAt","toUpperCase","slice","loadWebFont","extension","type","ExtensionType","priority","LoaderParserPriority","test","checkDataUrl","load","options","settings","getFontFaceSet","fonts","fontFaces","data","_options$data","family","getFontFamilyName","weights","_options$data2","_options$data2$weight","filter","weight","includes","i","length","font","FontFace","encodeURI","add","push","console","warn","unload","isArray","forEach","t","extensions"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/assets/src/loader/parsers/loadWebFont.ts"],"sourcesContent":["import { extensions, ExtensionType, settings, utils } from '@pixi/core';\nimport { checkDataUrl } from '../../utils/checkDataUrl';\nimport { checkExtension } from '../../utils/checkExtension';\nimport { LoaderParserPriority } from './LoaderParser';\n\nimport type { LoadAsset } from '../types';\nimport type { LoaderParser } from './LoaderParser';\n\nconst validWeights = [\n    'normal', 'bold',\n    '100', '200', '300', '400', '500', '600', '700', '800', '900',\n];\nconst validFontExtensions = ['.ttf', '.otf', '.woff', '.woff2'];\nconst validFontMIMEs = [\n    'font/ttf',\n    'font/otf',\n    'font/woff',\n    'font/woff2',\n];\n\nexport type LoadFontData = {\n    family: string;\n    display: string;\n    featureSettings: string;\n    stretch: string;\n    style: string;\n    unicodeRange: string;\n    variant: string;\n    weights: string[];\n};\n\n/**\n * Return font face name from a file name\n * Ex.: 'fonts/tital-one.woff' turns into 'Titan One'\n * @param url - File url\n */\nexport function getFontFamilyName(url: string): string\n{\n    const ext = utils.path.extname(url);\n    const name = utils.path.basename(url, ext);\n\n    // Replace dashes by white spaces\n    const nameWithSpaces = name.replace(/(-|_)/g, ' ');\n\n    // Upper case first character of each word\n    const nameTitleCase = nameWithSpaces.toLowerCase()\n        .split(' ')\n        .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(' ');\n\n    return nameTitleCase;\n}\n\n/** Web font loader plugin */\nexport const loadWebFont = {\n    extension: {\n        type: ExtensionType.LoadParser,\n        priority: LoaderParserPriority.Low,\n    },\n\n    test(url: string): boolean\n    {\n        return checkDataUrl(url, validFontMIMEs) || checkExtension(url, validFontExtensions);\n    },\n\n    async load(url: string, options?: LoadAsset<LoadFontData>): Promise<FontFace | FontFace[]>\n    {\n        const fonts = settings.ADAPTER.getFontFaceSet();\n\n        if (fonts)\n        {\n            const fontFaces: FontFace[] = [];\n            const name = options.data?.family ?? getFontFamilyName(url);\n            const weights = options.data?.weights?.filter((weight) => validWeights.includes(weight)) ?? ['normal'];\n            const data = options.data ?? {};\n\n            for (let i = 0; i < weights.length; i++)\n            {\n                const weight = weights[i];\n\n                const font = new FontFace(name, `url(${encodeURI(url)})`, {\n                    ...data,\n                    weight,\n                });\n\n                await font.load();\n\n                fonts.add(font);\n\n                fontFaces.push(font);\n            }\n\n            return fontFaces.length === 1 ? fontFaces[0] : fontFaces;\n        }\n\n        // #if _DEBUG\n        console.warn('[loadWebFont] FontFace API is not supported. Skipping loading font');\n        // #endif\n\n        return null;\n    },\n\n    unload(font: FontFace | FontFace[]): void\n    {\n        (Array.isArray(font) ? font : [font])\n            .forEach((t) => settings.ADAPTER.getFontFaceSet().delete(t));\n    }\n} as LoaderParser<FontFace | FontFace[]>;\n\nextensions.add(loadWebFont);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}