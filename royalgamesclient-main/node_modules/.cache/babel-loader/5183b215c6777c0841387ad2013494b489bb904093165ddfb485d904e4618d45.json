{"ast":null,"code":"import { ExtensionType, extensions } from '@pixi/extensions';\nimport './utils/index.mjs';\nimport { generateProgram } from './utils/generateProgram.mjs';\nimport { generateUniformBufferSync } from './utils/generateUniformBufferSync.mjs';\nimport { unsafeEvalSupported } from './utils/unsafeEvalSupported.mjs';\nimport { generateUniformsSync } from './utils/generateUniformsSync.mjs';\nlet UID = 0;\nconst defaultSyncData = {\n  textureCount: 0,\n  uboCount: 0\n};\nclass ShaderSystem {\n  constructor(renderer) {\n    this.destroyed = false;\n    this.renderer = renderer;\n    this.systemCheck();\n    this.gl = null;\n    this.shader = null;\n    this.program = null;\n    this.cache = {};\n    this._uboCache = {};\n    this.id = UID++;\n  }\n  systemCheck() {\n    if (!unsafeEvalSupported()) {\n      throw new Error(\"Current environment does not allow unsafe-eval, please use @pixi/unsafe-eval module to enable support.\");\n    }\n  }\n  contextChange(gl) {\n    this.gl = gl;\n    this.reset();\n  }\n  bind(shader, dontSync) {\n    shader.disposeRunner.add(this);\n    shader.uniforms.globals = this.renderer.globalUniforms;\n    const program = shader.program;\n    const glProgram = program.glPrograms[this.renderer.CONTEXT_UID] || this.generateProgram(shader);\n    this.shader = shader;\n    if (this.program !== program) {\n      this.program = program;\n      this.gl.useProgram(glProgram.program);\n    }\n    if (!dontSync) {\n      defaultSyncData.textureCount = 0;\n      defaultSyncData.uboCount = 0;\n      this.syncUniformGroup(shader.uniformGroup, defaultSyncData);\n    }\n    return glProgram;\n  }\n  setUniforms(uniforms) {\n    const shader = this.shader.program;\n    const glProgram = shader.glPrograms[this.renderer.CONTEXT_UID];\n    shader.syncUniforms(glProgram.uniformData, uniforms, this.renderer);\n  }\n  syncUniformGroup(group, syncData) {\n    const glProgram = this.getGlProgram();\n    if (!group.static || group.dirtyId !== glProgram.uniformDirtyGroups[group.id]) {\n      glProgram.uniformDirtyGroups[group.id] = group.dirtyId;\n      this.syncUniforms(group, glProgram, syncData);\n    }\n  }\n  syncUniforms(group, glProgram, syncData) {\n    const syncFunc = group.syncUniforms[this.shader.program.id] || this.createSyncGroups(group);\n    syncFunc(glProgram.uniformData, group.uniforms, this.renderer, syncData);\n  }\n  createSyncGroups(group) {\n    const id = this.getSignature(group, this.shader.program.uniformData, \"u\");\n    if (!this.cache[id]) {\n      this.cache[id] = generateUniformsSync(group, this.shader.program.uniformData);\n    }\n    group.syncUniforms[this.shader.program.id] = this.cache[id];\n    return group.syncUniforms[this.shader.program.id];\n  }\n  syncUniformBufferGroup(group, name) {\n    const glProgram = this.getGlProgram();\n    if (!group.static || group.dirtyId !== 0 || !glProgram.uniformGroups[group.id]) {\n      group.dirtyId = 0;\n      const syncFunc = glProgram.uniformGroups[group.id] || this.createSyncBufferGroup(group, glProgram, name);\n      group.buffer.update();\n      syncFunc(glProgram.uniformData, group.uniforms, this.renderer, defaultSyncData, group.buffer);\n    }\n    this.renderer.buffer.bindBufferBase(group.buffer, glProgram.uniformBufferBindings[name]);\n  }\n  createSyncBufferGroup(group, glProgram, name) {\n    const {\n      gl\n    } = this.renderer;\n    this.renderer.buffer.bind(group.buffer);\n    const uniformBlockIndex = this.gl.getUniformBlockIndex(glProgram.program, name);\n    glProgram.uniformBufferBindings[name] = this.shader.uniformBindCount;\n    gl.uniformBlockBinding(glProgram.program, uniformBlockIndex, this.shader.uniformBindCount);\n    this.shader.uniformBindCount++;\n    const id = this.getSignature(group, this.shader.program.uniformData, \"ubo\");\n    let uboData = this._uboCache[id];\n    if (!uboData) {\n      uboData = this._uboCache[id] = generateUniformBufferSync(group, this.shader.program.uniformData);\n    }\n    if (group.autoManage) {\n      const data = new Float32Array(uboData.size / 4);\n      group.buffer.update(data);\n    }\n    glProgram.uniformGroups[group.id] = uboData.syncFunc;\n    return glProgram.uniformGroups[group.id];\n  }\n  getSignature(group, uniformData, preFix) {\n    const uniforms = group.uniforms;\n    const strings = [\"\".concat(preFix, \"-\")];\n    for (const i in uniforms) {\n      strings.push(i);\n      if (uniformData[i]) {\n        strings.push(uniformData[i].type);\n      }\n    }\n    return strings.join(\"-\");\n  }\n  getGlProgram() {\n    if (this.shader) {\n      return this.shader.program.glPrograms[this.renderer.CONTEXT_UID];\n    }\n    return null;\n  }\n  generateProgram(shader) {\n    const gl = this.gl;\n    const program = shader.program;\n    const glProgram = generateProgram(gl, program);\n    program.glPrograms[this.renderer.CONTEXT_UID] = glProgram;\n    return glProgram;\n  }\n  reset() {\n    this.program = null;\n    this.shader = null;\n  }\n  disposeShader(shader) {\n    if (this.shader === shader) {\n      this.shader = null;\n    }\n  }\n  destroy() {\n    this.renderer = null;\n    this.destroyed = true;\n  }\n}\nShaderSystem.extension = {\n  type: ExtensionType.RendererSystem,\n  name: \"shader\"\n};\nextensions.add(ShaderSystem);\nexport { ShaderSystem };","map":{"version":3,"mappings":"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","names":["UID","defaultSyncData","textureCount","uboCount","ShaderSystem","constructor","renderer","destroyed","systemCheck","gl","shader","program","cache","_uboCache","id","unsafeEvalSupported","Error","contextChange","reset","bind","dontSync","add","globals","glPrograms","CONTEXT_UID","generateProgram","useProgram","setUniforms","uniforms","glProgram","syncUniforms","uniformData","syncUniformGroup","group","syncData","getGlProgram","static","dirtyId","syncFunc","createSyncGroups","getSignature","syncUniformBufferGroup","name","uniformGroups","buffer","update","uniformBufferBindings","createSyncBufferGroup","uniformBlockIndex","getUniformBlockIndex","uniformBlockBinding","uniformBindCount","uboData","autoManage","data","Float32Array","size","preFix","i","strings","push","type","join","disposeShader","destroy","extension","ExtensionType","extensions"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/core/src/shader/ShaderSystem.ts"],"sourcesContent":["import { extensions, ExtensionType } from '@pixi/extensions';\nimport { generateUniformsSync, unsafeEvalSupported } from './utils';\nimport { generateProgram } from './utils/generateProgram';\nimport { generateUniformBufferSync } from './utils/generateUniformBufferSync';\n\nimport type { ExtensionMetadata } from '@pixi/extensions';\nimport type { Dict } from '@pixi/utils';\nimport type { IRenderingContext } from '../IRenderer';\nimport type { Renderer } from '../Renderer';\nimport type { ISystem } from '../system/ISystem';\nimport type { GLProgram } from './GLProgram';\nimport type { Program } from './Program';\nimport type { Shader } from './Shader';\nimport type { UniformGroup } from './UniformGroup';\nimport type { UniformsSyncCallback } from './utils';\n\nlet UID = 0;\n// default sync data so we don't create a new one each time!\nconst defaultSyncData = { textureCount: 0, uboCount: 0 };\n\n/**\n * System plugin to the renderer to manage shaders.\n * @memberof PIXI\n */\nexport class ShaderSystem implements ISystem\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        type: ExtensionType.RendererSystem,\n        name: 'shader',\n    };\n\n    /**\n     * The current WebGL rendering context.\n     * @member {WebGLRenderingContext}\n     */\n    protected gl: IRenderingContext;\n\n    public shader: Shader;\n    public program: Program;\n    public id: number;\n    public destroyed = false;\n\n    /** Cache to holds the generated functions. Stored against UniformObjects unique signature. */\n    private cache: Dict<UniformsSyncCallback>;\n    private _uboCache: Dict<{size: number, syncFunc: UniformsSyncCallback}>;\n    private renderer: Renderer;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n\n        // Validation check that this environment support `new Function`\n        this.systemCheck();\n\n        this.gl = null;\n\n        this.shader = null;\n        this.program = null;\n\n        this.cache = {};\n        this._uboCache = {};\n\n        this.id = UID++;\n    }\n\n    /**\n     * Overrideable function by `@pixi/unsafe-eval` to silence\n     * throwing an error if platform doesn't support unsafe-evals.\n     * @private\n     */\n    private systemCheck(): void\n    {\n        if (!unsafeEvalSupported())\n        {\n            throw new Error('Current environment does not allow unsafe-eval, '\n                + 'please use @pixi/unsafe-eval module to enable support.');\n        }\n    }\n\n    protected contextChange(gl: IRenderingContext): void\n    {\n        this.gl = gl;\n        this.reset();\n    }\n\n    /**\n     * Changes the current shader to the one given in parameter.\n     * @param shader - the new shader\n     * @param dontSync - false if the shader should automatically sync its uniforms.\n     * @returns the glProgram that belongs to the shader.\n     */\n    bind(shader: Shader, dontSync?: boolean): GLProgram\n    {\n        shader.disposeRunner.add(this);\n\n        shader.uniforms.globals = this.renderer.globalUniforms;\n\n        const program = shader.program;\n        const glProgram = program.glPrograms[this.renderer.CONTEXT_UID] || this.generateProgram(shader);\n\n        this.shader = shader;\n\n        // TODO - some current Pixi plugins bypass this.. so it not safe to use yet..\n        if (this.program !== program)\n        {\n            this.program = program;\n            this.gl.useProgram(glProgram.program);\n        }\n\n        if (!dontSync)\n        {\n            defaultSyncData.textureCount = 0;\n            defaultSyncData.uboCount = 0;\n\n            this.syncUniformGroup(shader.uniformGroup, defaultSyncData);\n        }\n\n        return glProgram;\n    }\n\n    /**\n     * Uploads the uniforms values to the currently bound shader.\n     * @param uniforms - the uniforms values that be applied to the current shader\n     */\n    setUniforms(uniforms: Dict<any>): void\n    {\n        const shader = this.shader.program;\n        const glProgram = shader.glPrograms[this.renderer.CONTEXT_UID];\n\n        shader.syncUniforms(glProgram.uniformData, uniforms, this.renderer);\n    }\n\n    /* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n    /**\n     * Syncs uniforms on the group\n     * @param group - the uniform group to sync\n     * @param syncData - this is data that is passed to the sync function and any nested sync functions\n     */\n    syncUniformGroup(group: UniformGroup, syncData?: any): void\n    {\n        const glProgram = this.getGlProgram();\n\n        if (!group.static || group.dirtyId !== glProgram.uniformDirtyGroups[group.id])\n        {\n            glProgram.uniformDirtyGroups[group.id] = group.dirtyId;\n\n            this.syncUniforms(group, glProgram, syncData);\n        }\n    }\n\n    /**\n     * Overrideable by the @pixi/unsafe-eval package to use static syncUniforms instead.\n     * @param group\n     * @param glProgram\n     * @param syncData\n     */\n    syncUniforms(group: UniformGroup, glProgram: GLProgram, syncData: any): void\n    {\n        const syncFunc = group.syncUniforms[this.shader.program.id] || this.createSyncGroups(group);\n\n        syncFunc(glProgram.uniformData, group.uniforms, this.renderer, syncData);\n    }\n\n    createSyncGroups(group: UniformGroup): UniformsSyncCallback\n    {\n        const id = this.getSignature(group, this.shader.program.uniformData, 'u');\n\n        if (!this.cache[id])\n        {\n            this.cache[id] = generateUniformsSync(group, this.shader.program.uniformData);\n        }\n\n        group.syncUniforms[this.shader.program.id] = this.cache[id];\n\n        return group.syncUniforms[this.shader.program.id];\n    }\n\n    /**\n     * Syncs uniform buffers\n     * @param group - the uniform buffer group to sync\n     * @param name - the name of the uniform buffer\n     */\n    syncUniformBufferGroup(group: UniformGroup, name?: string)\n    {\n        const glProgram = this.getGlProgram();\n\n        if (!group.static || group.dirtyId !== 0 || !glProgram.uniformGroups[group.id])\n        {\n            group.dirtyId = 0;\n\n            const syncFunc = glProgram.uniformGroups[group.id]\n                || this.createSyncBufferGroup(group, glProgram, name);\n\n            // TODO wrap update in a cache??\n            group.buffer.update();\n\n            syncFunc(glProgram.uniformData,\n                group.uniforms,\n                this.renderer,\n                defaultSyncData,\n                group.buffer\n            );\n        }\n\n        this.renderer.buffer.bindBufferBase(group.buffer, glProgram.uniformBufferBindings[name]);\n    }\n\n    /**\n     * Will create a function that uploads a uniform buffer using the STD140 standard.\n     * The upload function will then be cached for future calls\n     * If a group is manually managed, then a simple upload function is generated\n     * @param group - the uniform buffer group to sync\n     * @param glProgram - the gl program to attach the uniform bindings to\n     * @param name - the name of the uniform buffer (must exist on the shader)\n     */\n    protected createSyncBufferGroup(group: UniformGroup, glProgram: GLProgram, name: string): UniformsSyncCallback\n    {\n        const { gl } = this.renderer;\n\n        this.renderer.buffer.bind(group.buffer);\n\n        // bind them...\n        const uniformBlockIndex = this.gl.getUniformBlockIndex(glProgram.program, name);\n\n        glProgram.uniformBufferBindings[name] = this.shader.uniformBindCount;\n\n        gl.uniformBlockBinding(glProgram.program, uniformBlockIndex, this.shader.uniformBindCount);\n\n        this.shader.uniformBindCount++;\n\n        const id = this.getSignature(group, this.shader.program.uniformData, 'ubo');\n\n        let uboData = this._uboCache[id];\n\n        if (!uboData)\n        {\n            uboData = this._uboCache[id] = generateUniformBufferSync(group, this.shader.program.uniformData);\n        }\n\n        if (group.autoManage)\n        {\n            const data = new Float32Array(uboData.size / 4);\n\n            group.buffer.update(data);\n        }\n\n        glProgram.uniformGroups[group.id] = uboData.syncFunc;\n\n        return glProgram.uniformGroups[group.id];\n    }\n\n    /**\n     * Takes a uniform group and data and generates a unique signature for them.\n     * @param group - The uniform group to get signature of\n     * @param group.uniforms\n     * @param uniformData - Uniform information generated by the shader\n     * @param preFix\n     * @returns Unique signature of the uniform group\n     */\n    private getSignature(group: {uniforms: Dict<any>}, uniformData: Dict<any>, preFix: string): string\n    {\n        const uniforms = group.uniforms;\n\n        const strings = [`${preFix}-`];\n\n        for (const i in uniforms)\n        {\n            strings.push(i);\n\n            if (uniformData[i])\n            {\n                strings.push(uniformData[i].type);\n            }\n        }\n\n        return strings.join('-');\n    }\n\n    /**\n     * Returns the underlying GLShade rof the currently bound shader.\n     *\n     * This can be handy for when you to have a little more control over the setting of your uniforms.\n     * @returns The glProgram for the currently bound Shader for this context\n     */\n    getGlProgram(): GLProgram\n    {\n        if (this.shader)\n        {\n            return this.shader.program.glPrograms[this.renderer.CONTEXT_UID];\n        }\n\n        return null;\n    }\n\n    /**\n     * Generates a glProgram version of the Shader provided.\n     * @param shader - The shader that the glProgram will be based on.\n     * @returns A shiny new glProgram!\n     */\n    generateProgram(shader: Shader): GLProgram\n    {\n        const gl = this.gl;\n        const program = shader.program;\n\n        const glProgram = generateProgram(gl, program);\n\n        program.glPrograms[this.renderer.CONTEXT_UID] = glProgram;\n\n        return glProgram;\n    }\n\n    /** Resets ShaderSystem state, does not affect WebGL state. */\n    reset(): void\n    {\n        this.program = null;\n        this.shader = null;\n    }\n\n    /**\n     * Disposes shader.\n     * If disposing one equals with current shader, set current as null.\n     * @param shader - Shader object\n     */\n    disposeShader(shader: Shader): void\n    {\n        if (this.shader === shader)\n        {\n            this.shader = null;\n        }\n    }\n\n    /** Destroys this System and removes all its textures. */\n    destroy(): void\n    {\n        this.renderer = null;\n        // TODO implement destroy method for ShaderSystem\n        this.destroyed = true;\n    }\n}\n\nextensions.add(ShaderSystem);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}