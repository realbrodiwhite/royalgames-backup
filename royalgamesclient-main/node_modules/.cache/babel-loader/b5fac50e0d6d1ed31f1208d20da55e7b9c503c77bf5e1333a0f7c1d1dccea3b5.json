{"ast":null,"code":"import { ExtensionType, extensions } from '@pixi/extensions';\nimport { Transform, Matrix } from '@pixi/math';\nimport { RenderTexture } from './RenderTexture.mjs';\nconst tempTransform = new Transform();\nclass GenerateTextureSystem {\n  constructor(renderer) {\n    this.renderer = renderer;\n    this._tempMatrix = new Matrix();\n  }\n  generateTexture(displayObject, options) {\n    const {\n      region: manualRegion,\n      ...textureOptions\n    } = options || {};\n    const region = manualRegion || displayObject.getLocalBounds(null, true);\n    if (region.width === 0) region.width = 1;\n    if (region.height === 0) region.height = 1;\n    const renderTexture = RenderTexture.create({\n      width: region.width,\n      height: region.height,\n      ...textureOptions\n    });\n    this._tempMatrix.tx = -region.x;\n    this._tempMatrix.ty = -region.y;\n    const transform = displayObject.transform;\n    displayObject.transform = tempTransform;\n    this.renderer.render(displayObject, {\n      renderTexture,\n      transform: this._tempMatrix,\n      skipUpdateTransform: !!displayObject.parent,\n      blit: true\n    });\n    displayObject.transform = transform;\n    return renderTexture;\n  }\n  destroy() {}\n}\nGenerateTextureSystem.extension = {\n  type: [ExtensionType.RendererSystem, ExtensionType.CanvasRendererSystem],\n  name: \"textureGenerator\"\n};\nextensions.add(GenerateTextureSystem);\nexport { GenerateTextureSystem };","map":{"version":3,"mappings":";;;AAUA,MAAMA,gBAAgB,IAAIC,SAAU;AAsB7B,MAAMC,qBACb;EAcIC,YAAYC,QACZ;IACI,KAAKA,QAAW;IAEX,mBAAc,IAAIC,MAAO;EAAA;EAUlCC,gBAAgBC,eAAkCC,OAClD;IACI,MAAM;MAAEC,QAAQC,YAAiB;MAAA;IAAA,IAAmBF,WAAW,EAAC;IAEhE,MAAMC,MAAS,mBAAiBF,aAAuC,gBAAe,MAAM,IAAI;IAGhG,IAAIE,OAAOE,KAAU,QAAGF,OAAOE,KAAQ;IACvC,IAAIF,OAAOG,MAAW,QAAGH,OAAOG,MAAS;IAEnC,sBAAgBC,cAAcC,MAChC;MACIH,OAAOF,MAAO;MACdG,QAAQH,MAAO;MACf,GAAGM;IAAA,CACN;IAEA,iBAAYC,EAAK,IAACP,MAAO;IACzB,iBAAYQ,EAAK,IAACR,MAAO;IAE9B,MAAMS,YAAYX,aAAc;IAEhCA,cAAcW,SAAY;IAErB,cAASC,OAAOZ,aAAe;MAChCa;MACAF,WAAW,IAAK;MAChBG,qBAAqB,CAAC,CAACd,aAAc;MACrCe,IAAM;IAAA,CACT;IAEDf,cAAcW,SAAY;IAEnB;EAAA;EAGXK,OACAA;AAGJ;AArEarB,sBAGFsB,SAA+B;EAClCC,IAAM,GACFC,aAAc,iBACdA,aAAc,sBAClB;EACAC,IAAM;AACV;AA8DJC,WAAWC,IAAI3B,qBAAqB","names":["tempTransform","Transform","GenerateTextureSystem","constructor","renderer","Matrix","generateTexture","displayObject","options","region","manualRegion","width","height","RenderTexture","create","textureOptions","tx","ty","transform","render","renderTexture","skipUpdateTransform","blit","destroy","extension","type","ExtensionType","name","extensions","add"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/core/src/renderTexture/GenerateTextureSystem.ts"],"sourcesContent":["import { extensions, ExtensionType } from '@pixi/extensions';\nimport { Matrix, Transform } from '@pixi/math';\nimport { RenderTexture } from './RenderTexture';\n\nimport type { MSAA_QUALITY, SCALE_MODES } from '@pixi/constants';\nimport type { ExtensionMetadata } from '@pixi/extensions';\nimport type { Rectangle } from '@pixi/math';\nimport type { IRenderableContainer, IRenderableObject, IRenderer } from '../IRenderer';\nimport type { ISystem } from '../system/ISystem';\n\nconst tempTransform = new Transform();\n\n// TODO could this just be part of extract?\nexport interface IGenerateTextureOptions\n{\n    /** The scale mode of the texture. Optional, defaults to `PIXI.BaseTexture.defaultOptions.scaleMode`. */\n    scaleMode?: SCALE_MODES;\n    /** The resolution / device pixel ratio of the texture being generated. Optional defaults to Renderer resolution. */\n    resolution?: number;\n    /**\n     * The region of the displayObject, that shall be rendered,\n     * if no region is specified, defaults to the local bounds of the displayObject.\n     */\n    region?: Rectangle;\n    /** The number of samples of the frame buffer. */\n    multisample?: MSAA_QUALITY;\n}\n\n/**\n * System that manages the generation of textures from the renderer.\n * @memberof PIXI\n */\nexport class GenerateTextureSystem implements ISystem\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        type: [\n            ExtensionType.RendererSystem,\n            ExtensionType.CanvasRendererSystem\n        ],\n        name: 'textureGenerator',\n    };\n\n    renderer: IRenderer;\n\n    private readonly _tempMatrix: Matrix;\n\n    constructor(renderer: IRenderer)\n    {\n        this.renderer = renderer;\n\n        this._tempMatrix = new Matrix();\n    }\n\n    /**\n     * A Useful function that returns a texture of the display object that can then be used to create sprites\n     * This can be quite useful if your displayObject is complicated and needs to be reused multiple times.\n     * @param displayObject - The displayObject the object will be generated from.\n     * @param {IGenerateTextureOptions} options - Generate texture options.\n     * @returns a shiny new texture of the display object passed in\n     */\n    generateTexture(displayObject: IRenderableObject, options?: IGenerateTextureOptions): RenderTexture\n    {\n        const { region: manualRegion, ...textureOptions } = options || {};\n\n        const region = manualRegion || (displayObject as IRenderableContainer).getLocalBounds(null, true);\n\n        // minimum texture size is 1x1, 0x0 will throw an error\n        if (region.width === 0) region.width = 1;\n        if (region.height === 0) region.height = 1;\n\n        const renderTexture = RenderTexture.create(\n            {\n                width: region.width,\n                height: region.height,\n                ...textureOptions,\n            });\n\n        this._tempMatrix.tx = -region.x;\n        this._tempMatrix.ty = -region.y;\n\n        const transform = displayObject.transform;\n\n        displayObject.transform = tempTransform;\n\n        this.renderer.render(displayObject, {\n            renderTexture,\n            transform: this._tempMatrix,\n            skipUpdateTransform: !!displayObject.parent,\n            blit: true,\n        });\n\n        displayObject.transform = transform;\n\n        return renderTexture;\n    }\n\n    destroy(): void\n    {\n        // ka boom!\n    }\n}\n\nextensions.add(GenerateTextureSystem);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}