{"ast":null,"code":"import { settings, Texture, Rectangle, utils } from '@pixi/core';\nimport { Sprite } from '@pixi/sprite';\nimport { TEXT_GRADIENT } from './const.mjs';\nimport { TextMetrics } from './TextMetrics.mjs';\nimport { TextStyle } from './TextStyle.mjs';\nconst defaultDestroyOptions = {\n  texture: true,\n  children: false,\n  baseTexture: true\n};\nconst _Text = class extends Sprite {\n  constructor(text, style, canvas) {\n    var _Text$defaultResoluti;\n    let ownCanvas = false;\n    if (!canvas) {\n      canvas = settings.ADAPTER.createCanvas();\n      ownCanvas = true;\n    }\n    canvas.width = 3;\n    canvas.height = 3;\n    const texture = Texture.from(canvas);\n    texture.orig = new Rectangle();\n    texture.trim = new Rectangle();\n    super(texture);\n    this._ownCanvas = ownCanvas;\n    this.canvas = canvas;\n    this.context = canvas.getContext(\"2d\", {\n      willReadFrequently: true\n    });\n    this._resolution = (_Text$defaultResoluti = _Text.defaultResolution) !== null && _Text$defaultResoluti !== void 0 ? _Text$defaultResoluti : settings.RESOLUTION;\n    this._autoResolution = _Text.defaultAutoResolution;\n    this._text = null;\n    this._style = null;\n    this._styleListener = null;\n    this._font = \"\";\n    this.text = text;\n    this.style = style;\n    this.localStyleID = -1;\n  }\n  static get experimentalLetterSpacing() {\n    return TextMetrics.experimentalLetterSpacing;\n  }\n  static set experimentalLetterSpacing(value) {\n    utils.deprecation(\"7.1.0\", \"Text.experimentalLetterSpacing is deprecated, use TextMetrics.experimentalLetterSpacing\");\n    TextMetrics.experimentalLetterSpacing = value;\n  }\n  updateText(respectDirty) {\n    const style = this._style;\n    if (this.localStyleID !== style.styleID) {\n      this.dirty = true;\n      this.localStyleID = style.styleID;\n    }\n    if (!this.dirty && respectDirty) {\n      return;\n    }\n    this._font = this._style.toFontString();\n    const context = this.context;\n    const measured = TextMetrics.measureText(this._text || \" \", this._style, this._style.wordWrap, this.canvas);\n    const width = measured.width;\n    const height = measured.height;\n    const lines = measured.lines;\n    const lineHeight = measured.lineHeight;\n    const lineWidths = measured.lineWidths;\n    const maxLineWidth = measured.maxLineWidth;\n    const fontProperties = measured.fontProperties;\n    this.canvas.width = Math.ceil(Math.ceil(Math.max(1, width) + style.padding * 2) * this._resolution);\n    this.canvas.height = Math.ceil(Math.ceil(Math.max(1, height) + style.padding * 2) * this._resolution);\n    context.scale(this._resolution, this._resolution);\n    context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    context.font = this._font;\n    context.lineWidth = style.strokeThickness;\n    context.textBaseline = style.textBaseline;\n    context.lineJoin = style.lineJoin;\n    context.miterLimit = style.miterLimit;\n    let linePositionX;\n    let linePositionY;\n    const passesCount = style.dropShadow ? 2 : 1;\n    for (let i = 0; i < passesCount; ++i) {\n      const isShadowPass = style.dropShadow && i === 0;\n      const dsOffsetText = isShadowPass ? Math.ceil(Math.max(1, height) + style.padding * 2) : 0;\n      const dsOffsetShadow = dsOffsetText * this._resolution;\n      if (isShadowPass) {\n        context.fillStyle = \"black\";\n        context.strokeStyle = \"black\";\n        const dropShadowColor = style.dropShadowColor;\n        const rgb = utils.hex2rgb(typeof dropShadowColor === \"number\" ? dropShadowColor : utils.string2hex(dropShadowColor));\n        const dropShadowBlur = style.dropShadowBlur * this._resolution;\n        const dropShadowDistance = style.dropShadowDistance * this._resolution;\n        context.shadowColor = \"rgba(\".concat(rgb[0] * 255, \",\").concat(rgb[1] * 255, \",\").concat(rgb[2] * 255, \",\").concat(style.dropShadowAlpha, \")\");\n        context.shadowBlur = dropShadowBlur;\n        context.shadowOffsetX = Math.cos(style.dropShadowAngle) * dropShadowDistance;\n        context.shadowOffsetY = Math.sin(style.dropShadowAngle) * dropShadowDistance + dsOffsetShadow;\n      } else {\n        context.fillStyle = this._generateFillStyle(style, lines, measured);\n        context.strokeStyle = style.stroke;\n        context.shadowColor = \"black\";\n        context.shadowBlur = 0;\n        context.shadowOffsetX = 0;\n        context.shadowOffsetY = 0;\n      }\n      let linePositionYShift = (lineHeight - fontProperties.fontSize) / 2;\n      if (lineHeight - fontProperties.fontSize < 0) {\n        linePositionYShift = 0;\n      }\n      for (let i2 = 0; i2 < lines.length; i2++) {\n        linePositionX = style.strokeThickness / 2;\n        linePositionY = style.strokeThickness / 2 + i2 * lineHeight + fontProperties.ascent + linePositionYShift;\n        if (style.align === \"right\") {\n          linePositionX += maxLineWidth - lineWidths[i2];\n        } else if (style.align === \"center\") {\n          linePositionX += (maxLineWidth - lineWidths[i2]) / 2;\n        }\n        if (style.stroke && style.strokeThickness) {\n          this.drawLetterSpacing(lines[i2], linePositionX + style.padding, linePositionY + style.padding - dsOffsetText, true);\n        }\n        if (style.fill) {\n          this.drawLetterSpacing(lines[i2], linePositionX + style.padding, linePositionY + style.padding - dsOffsetText);\n        }\n      }\n    }\n    this.updateTexture();\n  }\n  drawLetterSpacing(text, x, y) {\n    let isStroke = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    const style = this._style;\n    const letterSpacing = style.letterSpacing;\n    let useExperimentalLetterSpacing = false;\n    if (TextMetrics.experimentalLetterSpacingSupported) {\n      if (TextMetrics.experimentalLetterSpacing) {\n        this.context.letterSpacing = \"\".concat(letterSpacing, \"px\");\n        this.context.textLetterSpacing = \"\".concat(letterSpacing, \"px\");\n        useExperimentalLetterSpacing = true;\n      } else {\n        this.context.letterSpacing = \"0px\";\n        this.context.textLetterSpacing = \"0px\";\n      }\n    }\n    if (letterSpacing === 0 || useExperimentalLetterSpacing) {\n      if (isStroke) {\n        this.context.strokeText(text, x, y);\n      } else {\n        this.context.fillText(text, x, y);\n      }\n      return;\n    }\n    let currentPosition = x;\n    const stringArray = TextMetrics.graphemeSegmenter(text);\n    let previousWidth = this.context.measureText(text).width;\n    let currentWidth = 0;\n    for (let i = 0; i < stringArray.length; ++i) {\n      const currentChar = stringArray[i];\n      if (isStroke) {\n        this.context.strokeText(currentChar, currentPosition, y);\n      } else {\n        this.context.fillText(currentChar, currentPosition, y);\n      }\n      let textStr = \"\";\n      for (let j = i + 1; j < stringArray.length; ++j) {\n        textStr += stringArray[j];\n      }\n      currentWidth = this.context.measureText(textStr).width;\n      currentPosition += previousWidth - currentWidth + letterSpacing;\n      previousWidth = currentWidth;\n    }\n  }\n  updateTexture() {\n    const canvas = this.canvas;\n    if (this._style.trim) {\n      const trimmed = utils.trimCanvas(canvas);\n      if (trimmed.data) {\n        canvas.width = trimmed.width;\n        canvas.height = trimmed.height;\n        this.context.putImageData(trimmed.data, 0, 0);\n      }\n    }\n    const texture = this._texture;\n    const style = this._style;\n    const padding = style.trim ? 0 : style.padding;\n    const baseTexture = texture.baseTexture;\n    texture.trim.width = texture._frame.width = canvas.width / this._resolution;\n    texture.trim.height = texture._frame.height = canvas.height / this._resolution;\n    texture.trim.x = -padding;\n    texture.trim.y = -padding;\n    texture.orig.width = texture._frame.width - padding * 2;\n    texture.orig.height = texture._frame.height - padding * 2;\n    this._onTextureUpdate();\n    baseTexture.setRealSize(canvas.width, canvas.height, this._resolution);\n    texture.updateUvs();\n    this.dirty = false;\n  }\n  _render(renderer) {\n    if (this._autoResolution && this._resolution !== renderer.resolution) {\n      this._resolution = renderer.resolution;\n      this.dirty = true;\n    }\n    this.updateText(true);\n    super._render(renderer);\n  }\n  updateTransform() {\n    this.updateText(true);\n    super.updateTransform();\n  }\n  getBounds(skipUpdate, rect) {\n    this.updateText(true);\n    if (this._textureID === -1) {\n      skipUpdate = false;\n    }\n    return super.getBounds(skipUpdate, rect);\n  }\n  getLocalBounds(rect) {\n    this.updateText(true);\n    return super.getLocalBounds.call(this, rect);\n  }\n  _calculateBounds() {\n    this.calculateVertices();\n    this._bounds.addQuad(this.vertexData);\n  }\n  _generateFillStyle(style, lines, metrics) {\n    const fillStyle = style.fill;\n    if (!Array.isArray(fillStyle)) {\n      return fillStyle;\n    } else if (fillStyle.length === 1) {\n      return fillStyle[0];\n    }\n    let gradient;\n    const dropShadowCorrection = style.dropShadow ? style.dropShadowDistance : 0;\n    const padding = style.padding || 0;\n    const width = this.canvas.width / this._resolution - dropShadowCorrection - padding * 2;\n    const height = this.canvas.height / this._resolution - dropShadowCorrection - padding * 2;\n    const fill = fillStyle.slice();\n    const fillGradientStops = style.fillGradientStops.slice();\n    if (!fillGradientStops.length) {\n      const lengthPlus1 = fill.length + 1;\n      for (let i = 1; i < lengthPlus1; ++i) {\n        fillGradientStops.push(i / lengthPlus1);\n      }\n    }\n    fill.unshift(fillStyle[0]);\n    fillGradientStops.unshift(0);\n    fill.push(fillStyle[fillStyle.length - 1]);\n    fillGradientStops.push(1);\n    if (style.fillGradientType === TEXT_GRADIENT.LINEAR_VERTICAL) {\n      gradient = this.context.createLinearGradient(width / 2, padding, width / 2, height + padding);\n      const textHeight = metrics.fontProperties.fontSize + style.strokeThickness;\n      for (let i = 0; i < lines.length; i++) {\n        const lastLineBottom = metrics.lineHeight * (i - 1) + textHeight;\n        const thisLineTop = metrics.lineHeight * i;\n        let thisLineGradientStart = thisLineTop;\n        if (i > 0 && lastLineBottom > thisLineTop) {\n          thisLineGradientStart = (thisLineTop + lastLineBottom) / 2;\n        }\n        const thisLineBottom = thisLineTop + textHeight;\n        const nextLineTop = metrics.lineHeight * (i + 1);\n        let thisLineGradientEnd = thisLineBottom;\n        if (i + 1 < lines.length && nextLineTop < thisLineBottom) {\n          thisLineGradientEnd = (thisLineBottom + nextLineTop) / 2;\n        }\n        const gradStopLineHeight = (thisLineGradientEnd - thisLineGradientStart) / height;\n        for (let j = 0; j < fill.length; j++) {\n          let lineStop = 0;\n          if (typeof fillGradientStops[j] === \"number\") {\n            lineStop = fillGradientStops[j];\n          } else {\n            lineStop = j / fill.length;\n          }\n          let globalStop = Math.min(1, Math.max(0, thisLineGradientStart / height + lineStop * gradStopLineHeight));\n          globalStop = Number(globalStop.toFixed(5));\n          gradient.addColorStop(globalStop, fill[j]);\n        }\n      }\n    } else {\n      gradient = this.context.createLinearGradient(padding, height / 2, width + padding, height / 2);\n      const totalIterations = fill.length + 1;\n      let currentIteration = 1;\n      for (let i = 0; i < fill.length; i++) {\n        let stop;\n        if (typeof fillGradientStops[i] === \"number\") {\n          stop = fillGradientStops[i];\n        } else {\n          stop = currentIteration / totalIterations;\n        }\n        gradient.addColorStop(stop, fill[i]);\n        currentIteration++;\n      }\n    }\n    return gradient;\n  }\n  destroy(options) {\n    if (typeof options === \"boolean\") {\n      options = {\n        children: options\n      };\n    }\n    options = Object.assign({}, defaultDestroyOptions, options);\n    super.destroy(options);\n    if (this._ownCanvas) {\n      this.canvas.height = this.canvas.width = 0;\n    }\n    this.context = null;\n    this.canvas = null;\n    this._style = null;\n  }\n  get width() {\n    this.updateText(true);\n    return Math.abs(this.scale.x) * this._texture.orig.width;\n  }\n  set width(value) {\n    this.updateText(true);\n    const s = utils.sign(this.scale.x) || 1;\n    this.scale.x = s * value / this._texture.orig.width;\n    this._width = value;\n  }\n  get height() {\n    this.updateText(true);\n    return Math.abs(this.scale.y) * this._texture.orig.height;\n  }\n  set height(value) {\n    this.updateText(true);\n    const s = utils.sign(this.scale.y) || 1;\n    this.scale.y = s * value / this._texture.orig.height;\n    this._height = value;\n  }\n  get style() {\n    return this._style;\n  }\n  set style(style) {\n    style = style || {};\n    if (style instanceof TextStyle) {\n      this._style = style;\n    } else {\n      this._style = new TextStyle(style);\n    }\n    this.localStyleID = -1;\n    this.dirty = true;\n  }\n  get text() {\n    return this._text;\n  }\n  set text(text) {\n    text = String(text === null || text === void 0 ? \"\" : text);\n    if (this._text === text) {\n      return;\n    }\n    this._text = text;\n    this.dirty = true;\n  }\n  get resolution() {\n    return this._resolution;\n  }\n  set resolution(value) {\n    this._autoResolution = false;\n    if (this._resolution === value) {\n      return;\n    }\n    this._resolution = value;\n    this.dirty = true;\n  }\n};\nlet Text = _Text;\nText.defaultAutoResolution = true;\nexport { Text };","map":{"version":3,"mappings":"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","names":["defaultDestroyOptions","texture","children","baseTexture","_Text","Sprite","constructor","text","canvas","ownCanvas","ADAPTER","createCanvas","width","height","Texture","Rectangle","_ownCanvas","willReadFrequently","settings","_autoResolution","_text","_style","_styleListener","_font","style","localStyleID","experimentalLetterSpacing","TextMetrics","value","utils","updateText","respectDirty","styleID","dirty","toFontString","context","measured","measureText","wordWrap","lines","lineHeight","lineWidths","maxLineWidth","fontProperties","ceil","Math","_resolution","scale","font","lineWidth","textBaseline","lineJoin","miterLimit","i","dsOffsetText","padding","isShadowPass","fillStyle","strokeStyle","dropShadowColor","string2hex","rgb","shadowBlur","shadowOffsetX","cos","dropShadowAngle","shadowOffsetY","dropShadowDistance","_generateFillStyle","shadowColor","fontSize","linePositionYShift","i2","length","linePositionX","strokeThickness","linePositionY","ascent","align","stroke","fill","updateTexture","drawLetterSpacing","x","isStroke","letterSpacing","useExperimentalLetterSpacing","experimentalLetterSpacingSupported","textLetterSpacing","y","currentPosition","previousWidth","currentWidth","stringArray","currentChar","textStr","j","trim","trimmed","data","_frame","orig","_onTextureUpdate","setRealSize","updateUvs","_render","renderer","resolution","updateTransform","getBounds","rect","_textureID","skipUpdate","getLocalBounds","call","_calculateBounds","calculateVertices","addQuad","vertexData","metrics","Array","isArray","dropShadowCorrection","dropShadow","slice","fillGradientStops","lengthPlus1","unshift","push","fillGradientType","LINEAR_VERTICAL","gradient","createLinearGradient","textHeight","lastLineBottom","thisLineGradientStart","thisLineTop","thisLineBottom","thisLineGradientEnd","nextLineTop","lineStop","max","globalStop","Number","toFixed","currentIteration","stop","destroy","options","Object","abs","_texture","s","_width","_height","TextStyle","String","Text","defaultAutoResolution"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/text/src/Text.ts"],"sourcesContent":["/* eslint max-depth: [2, 8] */\nimport { Rectangle, settings, Texture, utils } from '@pixi/core';\nimport { Sprite } from '@pixi/sprite';\nimport { TEXT_GRADIENT } from './const';\nimport { TextMetrics } from './TextMetrics';\nimport { TextStyle } from './TextStyle';\n\nimport type { ICanvas, ICanvasRenderingContext2D, Renderer } from '@pixi/core';\nimport type { IDestroyOptions } from '@pixi/display';\nimport type { ITextStyle } from './TextStyle';\n\nconst defaultDestroyOptions: IDestroyOptions = {\n    texture: true,\n    children: false,\n    baseTexture: true,\n};\n\n/**\n * A Text Object will create a line or multiple lines of text.\n *\n * The text is created using the [Canvas API](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API).\n *\n * The primary advantage of this class over BitmapText is that you have great control over the style of the text,\n * which you can change at runtime.\n *\n * The primary disadvantages is that each piece of text has it's own texture, which can use more memory.\n * When text changes, this texture has to be re-generated and re-uploaded to the GPU, taking up time.\n *\n * To split a line you can use '\\n' in your text string, or, on the `style` object,\n * change its `wordWrap` property to true and and give the `wordWrapWidth` property a value.\n *\n * A Text can be created directly from a string and a style object,\n * which can be generated [here](https://pixijs.io/pixi-text-style).\n * @example\n * import { Text } from 'pixi.js';\n *\n * const text = new Text('This is a PixiJS text', {\n *     fontFamily: 'Arial',\n *     fontSize: 24,\n *     fill: 0xff1010,\n *     align: 'center',\n * });\n * @memberof PIXI\n */\nexport class Text extends Sprite\n{\n    /**\n     * Override whether or not the resolution of the text is automatically adjusted to match the resolution of the renderer.\n     * Setting this to false can allow you to get crisper text at lower render resolutions.\n     * @example\n     * // renderer has a resolution of 1\n     * const app = new Application();\n     *\n     * Text.defaultResolution = 2;\n     * Text.defaultAutoResolution = false;\n     * // text has a resolution of 2\n     * const text = new Text('This is a PixiJS text');\n     */\n    public static defaultAutoResolution = true;\n\n    /**\n     * If {@link PIXI.Text.defaultAutoResolution} is false, this will be the default resolution of the text.\n     * If not set it will default to {@link PIXI.settings.RESOLUTION}.\n     * @example\n     * Text.defaultResolution = 2;\n     * Text.defaultAutoResolution = false;\n     *\n     * // text has a resolution of 2\n     * const text = new Text('This is a PixiJS text');\n     */\n    public static defaultResolution: number;\n\n    /**\n     * @see PIXI.TextMetrics.experimentalLetterSpacing\n     * @deprecated since 7.1.0\n     */\n    public static get experimentalLetterSpacing()\n    {\n        return TextMetrics.experimentalLetterSpacing;\n    }\n    public static set experimentalLetterSpacing(value)\n    {\n        // #if _DEBUG\n        utils.deprecation('7.1.0',\n            'Text.experimentalLetterSpacing is deprecated, use TextMetrics.experimentalLetterSpacing');\n        // #endif\n\n        TextMetrics.experimentalLetterSpacing = value;\n    }\n\n    /** The canvas element that everything is drawn to. */\n    public canvas: ICanvas;\n    /** The canvas 2d context that everything is drawn with. */\n    public context: ICanvasRenderingContext2D;\n    public localStyleID: number;\n    public dirty: boolean;\n\n    /**\n     * The resolution / device pixel ratio of the canvas.\n     *\n     * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n     * @default PIXI.settings.RESOLUTION\n     */\n    _resolution: number;\n    _autoResolution: boolean;\n\n    /**\n     * Private tracker for the current text.\n     * @private\n     */\n    protected _text: string;\n\n    /**\n     * Private tracker for the current font.\n     * @private\n     */\n    protected _font: string;\n\n    /**\n     * Private tracker for the current style.\n     * @private\n     */\n    protected _style: TextStyle;\n\n    /**\n     * Private listener to track style changes.\n     * @private\n     */\n    protected _styleListener: () => void;\n\n    /**\n     * Keep track if this Text object created it's own canvas\n     * element (`true`) or uses the constructor argument (`false`).\n     * Used to workaround a GC issues with Safari < 13 when\n     * destroying Text. See `destroy` for more info.\n     */\n    private _ownCanvas: boolean;\n\n    /**\n     * @param text - The string that you would like the text to display\n     * @param style - The style parameters\n     * @param canvas - The canvas element for drawing text\n     */\n    constructor(text?: string | number, style?: Partial<ITextStyle> | TextStyle, canvas?: ICanvas)\n    {\n        let ownCanvas = false;\n\n        if (!canvas)\n        {\n            canvas = settings.ADAPTER.createCanvas();\n            ownCanvas = true;\n        }\n\n        canvas.width = 3;\n        canvas.height = 3;\n\n        const texture = Texture.from(canvas);\n\n        texture.orig = new Rectangle();\n        texture.trim = new Rectangle();\n\n        super(texture);\n\n        this._ownCanvas = ownCanvas;\n        this.canvas = canvas;\n        this.context = canvas.getContext('2d', {\n            // required for trimming to work without warnings\n            willReadFrequently: true,\n        });\n\n        this._resolution = Text.defaultResolution ?? settings.RESOLUTION;\n        this._autoResolution = Text.defaultAutoResolution;\n        this._text = null;\n        this._style = null;\n        this._styleListener = null;\n        this._font = '';\n\n        this.text = text;\n        this.style = style;\n\n        this.localStyleID = -1;\n    }\n\n    /**\n     * Renders text to its canvas, and updates its texture.\n     *\n     * By default this is used internally to ensure the texture is correct before rendering,\n     * but it can be used called externally, for example from this class to 'pre-generate' the texture from a piece of text,\n     * and then shared across multiple Sprites.\n     * @param respectDirty - Whether to abort updating the text if the Text isn't dirty and the function is called.\n     */\n    public updateText(respectDirty: boolean): void\n    {\n        const style = this._style;\n\n        // check if style has changed..\n        if (this.localStyleID !== style.styleID)\n        {\n            this.dirty = true;\n            this.localStyleID = style.styleID;\n        }\n\n        if (!this.dirty && respectDirty)\n        {\n            return;\n        }\n\n        this._font = this._style.toFontString();\n\n        const context = this.context;\n        const measured = TextMetrics.measureText(this._text || ' ', this._style, this._style.wordWrap, this.canvas);\n        const width = measured.width;\n        const height = measured.height;\n        const lines = measured.lines;\n        const lineHeight = measured.lineHeight;\n        const lineWidths = measured.lineWidths;\n        const maxLineWidth = measured.maxLineWidth;\n        const fontProperties = measured.fontProperties;\n\n        this.canvas.width = Math.ceil(Math.ceil((Math.max(1, width) + (style.padding * 2))) * this._resolution);\n        this.canvas.height = Math.ceil(Math.ceil((Math.max(1, height) + (style.padding * 2))) * this._resolution);\n\n        context.scale(this._resolution, this._resolution);\n\n        context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n        context.font = this._font;\n        context.lineWidth = style.strokeThickness;\n        context.textBaseline = style.textBaseline;\n        context.lineJoin = style.lineJoin;\n        context.miterLimit = style.miterLimit;\n\n        let linePositionX: number;\n        let linePositionY: number;\n\n        // require 2 passes if a shadow; the first to draw the drop shadow, the second to draw the text\n        const passesCount = style.dropShadow ? 2 : 1;\n\n        // For v4, we drew text at the colours of the drop shadow underneath the normal text. This gave the correct zIndex,\n        // but features such as alpha and shadowblur did not look right at all, since we were using actual text as a shadow.\n        //\n        // For v5.0.0, we moved over to just use the canvas API for drop shadows, which made them look much nicer and more\n        // visually please, but now because the stroke is drawn and then the fill, drop shadows would appear on both the fill\n        // and the stroke; and fill drop shadows would appear over the top of the stroke.\n        //\n        // For v5.1.1, the new route is to revert to v4 style of drawing text first to get the drop shadows underneath normal\n        // text, but instead drawing text in the correct location, we'll draw it off screen (-paddingY), and then adjust the\n        // drop shadow so only that appears on screen (+paddingY). Now we'll have the correct draw order of the shadow\n        // beneath the text, whilst also having the proper text shadow styling.\n        for (let i = 0; i < passesCount; ++i)\n        {\n            const isShadowPass = style.dropShadow && i === 0;\n            // we only want the drop shadow, so put text way off-screen\n            const dsOffsetText = isShadowPass ? Math.ceil(Math.max(1, height) + (style.padding * 2)) : 0;\n            const dsOffsetShadow = dsOffsetText * this._resolution;\n\n            if (isShadowPass)\n            {\n                // On Safari, text with gradient and drop shadows together do not position correctly\n                // if the scale of the canvas is not 1: https://bugs.webkit.org/show_bug.cgi?id=197689\n                // Therefore we'll set the styles to be a plain black whilst generating this drop shadow\n                context.fillStyle = 'black';\n                context.strokeStyle = 'black';\n\n                const dropShadowColor = style.dropShadowColor;\n                const rgb = utils.hex2rgb(typeof dropShadowColor === 'number'\n                    ? dropShadowColor\n                    : utils.string2hex(dropShadowColor));\n                const dropShadowBlur = style.dropShadowBlur * this._resolution;\n                const dropShadowDistance = style.dropShadowDistance * this._resolution;\n\n                context.shadowColor = `rgba(${rgb[0] * 255},${rgb[1] * 255},${rgb[2] * 255},${style.dropShadowAlpha})`;\n                context.shadowBlur = dropShadowBlur;\n                context.shadowOffsetX = Math.cos(style.dropShadowAngle) * dropShadowDistance;\n                context.shadowOffsetY = (Math.sin(style.dropShadowAngle) * dropShadowDistance) + dsOffsetShadow;\n            }\n            else\n            {\n                // set canvas text styles\n                context.fillStyle = this._generateFillStyle(style, lines, measured);\n                // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n                //       the setter converts to string. See this thread for more details:\n                //       https://github.com/microsoft/TypeScript/issues/2521\n                context.strokeStyle = style.stroke as string;\n\n                context.shadowColor = 'black';\n                context.shadowBlur = 0;\n                context.shadowOffsetX = 0;\n                context.shadowOffsetY = 0;\n            }\n\n            let linePositionYShift = (lineHeight - fontProperties.fontSize) / 2;\n\n            if (lineHeight - fontProperties.fontSize < 0)\n            {\n                linePositionYShift = 0;\n            }\n\n            // draw lines line by line\n            for (let i = 0; i < lines.length; i++)\n            {\n                linePositionX = style.strokeThickness / 2;\n                linePositionY = ((style.strokeThickness / 2) + (i * lineHeight)) + fontProperties.ascent\n                    + linePositionYShift;\n\n                if (style.align === 'right')\n                {\n                    linePositionX += maxLineWidth - lineWidths[i];\n                }\n                else if (style.align === 'center')\n                {\n                    linePositionX += (maxLineWidth - lineWidths[i]) / 2;\n                }\n\n                if (style.stroke && style.strokeThickness)\n                {\n                    this.drawLetterSpacing(\n                        lines[i],\n                        linePositionX + style.padding,\n                        linePositionY + style.padding - dsOffsetText,\n                        true\n                    );\n                }\n\n                if (style.fill)\n                {\n                    this.drawLetterSpacing(\n                        lines[i],\n                        linePositionX + style.padding,\n                        linePositionY + style.padding - dsOffsetText\n                    );\n                }\n            }\n        }\n\n        this.updateTexture();\n    }\n\n    /**\n     * Render the text with letter-spacing.\n     * @param text - The text to draw\n     * @param x - Horizontal position to draw the text\n     * @param y - Vertical position to draw the text\n     * @param isStroke - Is this drawing for the outside stroke of the\n     *  text? If not, it's for the inside fill\n     */\n    private drawLetterSpacing(text: string, x: number, y: number, isStroke = false): void\n    {\n        const style = this._style;\n\n        // letterSpacing of 0 means normal\n        const letterSpacing = style.letterSpacing;\n\n        let useExperimentalLetterSpacing = false;\n\n        if (TextMetrics.experimentalLetterSpacingSupported)\n        {\n            if (TextMetrics.experimentalLetterSpacing)\n            {\n                this.context.letterSpacing = `${letterSpacing}px`;\n                this.context.textLetterSpacing = `${letterSpacing}px`;\n                useExperimentalLetterSpacing = true;\n            }\n            else\n            {\n                this.context.letterSpacing = '0px';\n                this.context.textLetterSpacing = '0px';\n            }\n        }\n\n        if (letterSpacing === 0 || useExperimentalLetterSpacing)\n        {\n            if (isStroke)\n            {\n                this.context.strokeText(text, x, y);\n            }\n            else\n            {\n                this.context.fillText(text, x, y);\n            }\n\n            return;\n        }\n\n        let currentPosition = x;\n\n        const stringArray = TextMetrics.graphemeSegmenter(text);\n        let previousWidth = this.context.measureText(text).width;\n        let currentWidth = 0;\n\n        for (let i = 0; i < stringArray.length; ++i)\n        {\n            const currentChar = stringArray[i];\n\n            if (isStroke)\n            {\n                this.context.strokeText(currentChar, currentPosition, y);\n            }\n            else\n            {\n                this.context.fillText(currentChar, currentPosition, y);\n            }\n            let textStr = '';\n\n            for (let j = i + 1; j < stringArray.length; ++j)\n            {\n                textStr += stringArray[j];\n            }\n            currentWidth = this.context.measureText(textStr).width;\n            currentPosition += previousWidth - currentWidth + letterSpacing;\n            previousWidth = currentWidth;\n        }\n    }\n\n    /** Updates texture size based on canvas size. */\n    private updateTexture(): void\n    {\n        const canvas = this.canvas;\n\n        if (this._style.trim)\n        {\n            const trimmed = utils.trimCanvas(canvas);\n\n            if (trimmed.data)\n            {\n                canvas.width = trimmed.width;\n                canvas.height = trimmed.height;\n                this.context.putImageData(trimmed.data, 0, 0);\n            }\n        }\n\n        const texture = this._texture;\n        const style = this._style;\n        const padding = style.trim ? 0 : style.padding;\n        const baseTexture = texture.baseTexture;\n\n        texture.trim.width = texture._frame.width = canvas.width / this._resolution;\n        texture.trim.height = texture._frame.height = canvas.height / this._resolution;\n        texture.trim.x = -padding;\n        texture.trim.y = -padding;\n\n        texture.orig.width = texture._frame.width - (padding * 2);\n        texture.orig.height = texture._frame.height - (padding * 2);\n\n        // call sprite onTextureUpdate to update scale if _width or _height were set\n        this._onTextureUpdate();\n\n        baseTexture.setRealSize(canvas.width, canvas.height, this._resolution);\n\n        texture.updateUvs();\n\n        this.dirty = false;\n    }\n\n    /**\n     * Renders the object using the WebGL renderer\n     * @param renderer - The renderer\n     */\n    protected _render(renderer: Renderer): void\n    {\n        if (this._autoResolution && this._resolution !== renderer.resolution)\n        {\n            this._resolution = renderer.resolution;\n            this.dirty = true;\n        }\n\n        this.updateText(true);\n\n        super._render(renderer);\n    }\n\n    /** Updates the transform on all children of this container for rendering. */\n    public updateTransform(): void\n    {\n        this.updateText(true);\n\n        super.updateTransform();\n    }\n\n    public getBounds(skipUpdate?: boolean, rect?: Rectangle): Rectangle\n    {\n        this.updateText(true);\n\n        if (this._textureID === -1)\n        {\n            // texture was updated: recalculate transforms\n            skipUpdate = false;\n        }\n\n        return super.getBounds(skipUpdate, rect);\n    }\n\n    /**\n     * Gets the local bounds of the text object.\n     * @param rect - The output rectangle.\n     * @returns The bounds.\n     */\n    public getLocalBounds(rect?: Rectangle): Rectangle\n    {\n        this.updateText(true);\n\n        return super.getLocalBounds.call(this, rect);\n    }\n\n    /** Calculates the bounds of the Text as a rectangle. The bounds calculation takes the worldTransform into account. */\n    protected _calculateBounds(): void\n    {\n        this.calculateVertices();\n        // if we have already done this on THIS frame.\n        this._bounds.addQuad(this.vertexData);\n    }\n\n    /**\n     * Generates the fill style. Can automatically generate a gradient based on the fill style being an array\n     * @param style - The style.\n     * @param lines - The lines of text.\n     * @param metrics\n     * @returns The fill style\n     */\n    private _generateFillStyle(\n        style: TextStyle, lines: string[], metrics: TextMetrics\n    ): string | CanvasGradient | CanvasPattern\n    {\n        // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n        //       the setter converts to string. See this thread for more details:\n        //       https://github.com/microsoft/TypeScript/issues/2521\n        const fillStyle: string | string[] | CanvasGradient | CanvasPattern = style.fill as any;\n\n        if (!Array.isArray(fillStyle))\n        {\n            return fillStyle;\n        }\n        else if (fillStyle.length === 1)\n        {\n            return fillStyle[0];\n        }\n\n        // the gradient will be evenly spaced out according to how large the array is.\n        // ['#FF0000', '#00FF00', '#0000FF'] would created stops at 0.25, 0.5 and 0.75\n        let gradient: string[] | CanvasGradient;\n\n        // a dropshadow will enlarge the canvas and result in the gradient being\n        // generated with the incorrect dimensions\n        const dropShadowCorrection = (style.dropShadow) ? style.dropShadowDistance : 0;\n\n        // should also take padding into account, padding can offset the gradient\n        const padding = style.padding || 0;\n\n        const width = (this.canvas.width / this._resolution) - dropShadowCorrection - (padding * 2);\n        const height = (this.canvas.height / this._resolution) - dropShadowCorrection - (padding * 2);\n\n        // make a copy of the style settings, so we can manipulate them later\n        const fill = fillStyle.slice();\n        const fillGradientStops = style.fillGradientStops.slice();\n\n        // wanting to evenly distribute the fills. So an array of 4 colours should give fills of 0.25, 0.5 and 0.75\n        if (!fillGradientStops.length)\n        {\n            const lengthPlus1 = fill.length + 1;\n\n            for (let i = 1; i < lengthPlus1; ++i)\n            {\n                fillGradientStops.push(i / lengthPlus1);\n            }\n        }\n\n        // stop the bleeding of the last gradient on the line above to the top gradient of the this line\n        // by hard defining the first gradient colour at point 0, and last gradient colour at point 1\n        fill.unshift(fillStyle[0]);\n        fillGradientStops.unshift(0);\n\n        fill.push(fillStyle[fillStyle.length - 1]);\n        fillGradientStops.push(1);\n\n        if (style.fillGradientType === TEXT_GRADIENT.LINEAR_VERTICAL)\n        {\n            // start the gradient at the top center of the canvas, and end at the bottom middle of the canvas\n            gradient = this.context.createLinearGradient(width / 2, padding, width / 2, height + padding);\n\n            // we need to repeat the gradient so that each individual line of text has the same vertical gradient effect\n            // ['#FF0000', '#00FF00', '#0000FF'] over 2 lines would create stops at 0.125, 0.25, 0.375, 0.625, 0.75, 0.875\n\n            // Actual height of the text itself, not counting spacing for lineHeight/leading/dropShadow etc\n            const textHeight = metrics.fontProperties.fontSize + style.strokeThickness;\n\n            for (let i = 0; i < lines.length; i++)\n            {\n                const lastLineBottom = (metrics.lineHeight * (i - 1)) + textHeight;\n                const thisLineTop = metrics.lineHeight * i;\n                let thisLineGradientStart = thisLineTop;\n\n                // Handle case where last & this line overlap\n                if (i > 0 && lastLineBottom > thisLineTop)\n                {\n                    thisLineGradientStart = (thisLineTop + lastLineBottom) / 2;\n                }\n\n                const thisLineBottom = thisLineTop + textHeight;\n                const nextLineTop = metrics.lineHeight * (i + 1);\n                let thisLineGradientEnd = thisLineBottom;\n\n                // Handle case where this & next line overlap\n                if (i + 1 < lines.length && nextLineTop < thisLineBottom)\n                {\n                    thisLineGradientEnd = (thisLineBottom + nextLineTop) / 2;\n                }\n\n                // textHeight, but as a 0-1 size in global gradient stop space\n                const gradStopLineHeight = (thisLineGradientEnd - thisLineGradientStart) / height;\n\n                for (let j = 0; j < fill.length; j++)\n                {\n                    // 0-1 stop point for the current line, multiplied to global space afterwards\n                    let lineStop = 0;\n\n                    if (typeof fillGradientStops[j] === 'number')\n                    {\n                        lineStop = fillGradientStops[j];\n                    }\n                    else\n                    {\n                        lineStop = j / fill.length;\n                    }\n\n                    let globalStop = Math.min(1, Math.max(0,\n                        (thisLineGradientStart / height) + (lineStop * gradStopLineHeight)));\n\n                    // There's potential for floating point precision issues at the seams between gradient repeats.\n                    globalStop = Number(globalStop.toFixed(5));\n                    gradient.addColorStop(globalStop, fill[j]);\n                }\n            }\n        }\n        else\n        {\n            // start the gradient at the center left of the canvas, and end at the center right of the canvas\n            gradient = this.context.createLinearGradient(padding, height / 2, width + padding, height / 2);\n\n            // can just evenly space out the gradients in this case, as multiple lines makes no difference\n            // to an even left to right gradient\n            const totalIterations = fill.length + 1;\n            let currentIteration = 1;\n\n            for (let i = 0; i < fill.length; i++)\n            {\n                let stop: number;\n\n                if (typeof fillGradientStops[i] === 'number')\n                {\n                    stop = fillGradientStops[i];\n                }\n                else\n                {\n                    stop = currentIteration / totalIterations;\n                }\n                gradient.addColorStop(stop, fill[i]);\n                currentIteration++;\n            }\n        }\n\n        return gradient;\n    }\n\n    /**\n     * Destroys this text object.\n     *\n     * Note* Unlike a Sprite, a Text object will automatically destroy its baseTexture and texture as\n     * the majority of the time the texture will not be shared with any other Sprites.\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their\n     *  destroy method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=true] - Should it destroy the current texture of the sprite as well\n     * @param {boolean} [options.baseTexture=true] - Should it destroy the base texture of the sprite as well\n     */\n    public destroy(options?: IDestroyOptions | boolean): void\n    {\n        if (typeof options === 'boolean')\n        {\n            options = { children: options };\n        }\n\n        options = Object.assign({}, defaultDestroyOptions, options);\n\n        super.destroy(options);\n\n        // set canvas width and height to 0 to workaround memory leak in Safari < 13\n        // https://stackoverflow.com/questions/52532614/total-canvas-memory-use-exceeds-the-maximum-limit-safari-12\n        if (this._ownCanvas)\n        {\n            this.canvas.height = this.canvas.width = 0;\n        }\n\n        // make sure to reset the context and canvas.. dont want this hanging around in memory!\n        this.context = null;\n        this.canvas = null;\n\n        this._style = null;\n    }\n\n    /** The width of the Text, setting this will actually modify the scale to achieve the value set. */\n    get width(): number\n    {\n        this.updateText(true);\n\n        return Math.abs(this.scale.x) * this._texture.orig.width;\n    }\n\n    set width(value: number)\n    {\n        this.updateText(true);\n\n        const s = utils.sign(this.scale.x) || 1;\n\n        this.scale.x = s * value / this._texture.orig.width;\n        this._width = value;\n    }\n\n    /** The height of the Text, setting this will actually modify the scale to achieve the value set. */\n    get height(): number\n    {\n        this.updateText(true);\n\n        return Math.abs(this.scale.y) * this._texture.orig.height;\n    }\n\n    set height(value: number)\n    {\n        this.updateText(true);\n\n        const s = utils.sign(this.scale.y) || 1;\n\n        this.scale.y = s * value / this._texture.orig.height;\n        this._height = value;\n    }\n\n    /**\n     * Set the style of the text.\n     *\n     * Set up an event listener to listen for changes on the style object and mark the text as dirty.\n     *\n     * If setting the `style` can also be partial {@link PIXI.ITextStyle}.\n     */\n    get style(): TextStyle\n    {\n        return this._style;\n    }\n\n    set style(style: TextStyle | Partial<ITextStyle>)\n    {\n        style = style || {};\n\n        if (style instanceof TextStyle)\n        {\n            this._style = style;\n        }\n        else\n        {\n            this._style = new TextStyle(style);\n        }\n\n        this.localStyleID = -1;\n        this.dirty = true;\n    }\n\n    /** Set the copy for the text object. To split a line you can use '\\n'. */\n    get text(): string\n    {\n        return this._text;\n    }\n\n    set text(text: string | number)\n    {\n        text = String(text === null || text === undefined ? '' : text);\n\n        if (this._text === text)\n        {\n            return;\n        }\n        this._text = text;\n        this.dirty = true;\n    }\n\n    /**\n     * The resolution / device pixel ratio of the canvas.\n     *\n     * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n     * @default 1\n     */\n    get resolution(): number\n    {\n        return this._resolution;\n    }\n\n    set resolution(value: number)\n    {\n        this._autoResolution = false;\n\n        if (this._resolution === value)\n        {\n            return;\n        }\n\n        this._resolution = value;\n        this.dirty = true;\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}