{"ast":null,"code":"import { SHAPES } from '../const.mjs';\nimport { Point } from '../Point.mjs';\nconst tempPoints = [new Point(), new Point(), new Point(), new Point()];\nclass Rectangle {\n  constructor() {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let height = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    this.x = Number(x);\n    this.y = Number(y);\n    this.width = Number(width);\n    this.height = Number(height);\n    this.type = SHAPES.RECT;\n  }\n  get left() {\n    return this.x;\n  }\n  get right() {\n    return this.x + this.width;\n  }\n  get top() {\n    return this.y;\n  }\n  get bottom() {\n    return this.y + this.height;\n  }\n  static get EMPTY() {\n    return new Rectangle(0, 0, 0, 0);\n  }\n  clone() {\n    return new Rectangle(this.x, this.y, this.width, this.height);\n  }\n  copyFrom(rectangle) {\n    this.x = rectangle.x;\n    this.y = rectangle.y;\n    this.width = rectangle.width;\n    this.height = rectangle.height;\n    return this;\n  }\n  copyTo(rectangle) {\n    rectangle.x = this.x;\n    rectangle.y = this.y;\n    rectangle.width = this.width;\n    rectangle.height = this.height;\n    return rectangle;\n  }\n  contains(x, y) {\n    if (this.width <= 0 || this.height <= 0) {\n      return false;\n    }\n    if (x >= this.x && x < this.x + this.width) {\n      if (y >= this.y && y < this.y + this.height) {\n        return true;\n      }\n    }\n    return false;\n  }\n  intersects(other, transform) {\n    if (!transform) {\n      const x02 = this.x < other.x ? other.x : this.x;\n      const x12 = this.right > other.right ? other.right : this.right;\n      if (x12 <= x02) {\n        return false;\n      }\n      const y02 = this.y < other.y ? other.y : this.y;\n      const y12 = this.bottom > other.bottom ? other.bottom : this.bottom;\n      return y12 > y02;\n    }\n    const x0 = this.left;\n    const x1 = this.right;\n    const y0 = this.top;\n    const y1 = this.bottom;\n    if (x1 <= x0 || y1 <= y0) {\n      return false;\n    }\n    const lt = tempPoints[0].set(other.left, other.top);\n    const lb = tempPoints[1].set(other.left, other.bottom);\n    const rt = tempPoints[2].set(other.right, other.top);\n    const rb = tempPoints[3].set(other.right, other.bottom);\n    if (rt.x <= lt.x || lb.y <= lt.y) {\n      return false;\n    }\n    const s = Math.sign(transform.a * transform.d - transform.b * transform.c);\n    if (s === 0) {\n      return false;\n    }\n    transform.apply(lt, lt);\n    transform.apply(lb, lb);\n    transform.apply(rt, rt);\n    transform.apply(rb, rb);\n    if (Math.max(lt.x, lb.x, rt.x, rb.x) <= x0 || Math.min(lt.x, lb.x, rt.x, rb.x) >= x1 || Math.max(lt.y, lb.y, rt.y, rb.y) <= y0 || Math.min(lt.y, lb.y, rt.y, rb.y) >= y1) {\n      return false;\n    }\n    const nx = s * (lb.y - lt.y);\n    const ny = s * (lt.x - lb.x);\n    const n00 = nx * x0 + ny * y0;\n    const n10 = nx * x1 + ny * y0;\n    const n01 = nx * x0 + ny * y1;\n    const n11 = nx * x1 + ny * y1;\n    if (Math.max(n00, n10, n01, n11) <= nx * lt.x + ny * lt.y || Math.min(n00, n10, n01, n11) >= nx * rb.x + ny * rb.y) {\n      return false;\n    }\n    const mx = s * (lt.y - rt.y);\n    const my = s * (rt.x - lt.x);\n    const m00 = mx * x0 + my * y0;\n    const m10 = mx * x1 + my * y0;\n    const m01 = mx * x0 + my * y1;\n    const m11 = mx * x1 + my * y1;\n    if (Math.max(m00, m10, m01, m11) <= mx * lt.x + my * lt.y || Math.min(m00, m10, m01, m11) >= mx * rb.x + my * rb.y) {\n      return false;\n    }\n    return true;\n  }\n  pad() {\n    let paddingX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let paddingY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : paddingX;\n    this.x -= paddingX;\n    this.y -= paddingY;\n    this.width += paddingX * 2;\n    this.height += paddingY * 2;\n    return this;\n  }\n  fit(rectangle) {\n    const x1 = Math.max(this.x, rectangle.x);\n    const x2 = Math.min(this.x + this.width, rectangle.x + rectangle.width);\n    const y1 = Math.max(this.y, rectangle.y);\n    const y2 = Math.min(this.y + this.height, rectangle.y + rectangle.height);\n    this.x = x1;\n    this.width = Math.max(x2 - x1, 0);\n    this.y = y1;\n    this.height = Math.max(y2 - y1, 0);\n    return this;\n  }\n  ceil() {\n    let resolution = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let eps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1e-3;\n    const x2 = Math.ceil((this.x + this.width - eps) * resolution) / resolution;\n    const y2 = Math.ceil((this.y + this.height - eps) * resolution) / resolution;\n    this.x = Math.floor((this.x + eps) * resolution) / resolution;\n    this.y = Math.floor((this.y + eps) * resolution) / resolution;\n    this.width = x2 - this.x;\n    this.height = y2 - this.y;\n    return this;\n  }\n  enlarge(rectangle) {\n    const x1 = Math.min(this.x, rectangle.x);\n    const x2 = Math.max(this.x + this.width, rectangle.x + rectangle.width);\n    const y1 = Math.min(this.y, rectangle.y);\n    const y2 = Math.max(this.y + this.height, rectangle.y + rectangle.height);\n    this.x = x1;\n    this.width = x2 - x1;\n    this.y = y1;\n    this.height = y2 - y1;\n    return this;\n  }\n  toString() {\n    return \"[@pixi/math:Rectangle x=\".concat(this.x, \" y=\").concat(this.y, \" width=\").concat(this.width, \" height=\").concat(this.height, \"]\");\n  }\n}\nexport { Rectangle };","map":{"version":3,"mappings":"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","names":["tempPoints","Point","Rectangle","constructor","x","width","height","Number","y","type","SHAPES","left","right","top","bottom","EMPTY","clone","copyFrom","rectangle","copyTo","contains","intersects","other","transform","x02","x12","y02","y12","x0","x1","y0","y1","lt","set","lb","rt","rb","Math","d","b","c","s","max","min","nx","ny","n10","n11","n00","n01","mx","my","m10","m11","m00","m01","pad","paddingX","paddingY","fit","ceil","resolution","eps","x2","y2","enlarge","toString"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/math/src/shapes/Rectangle.ts"],"sourcesContent":["import { SHAPES } from '../const';\nimport { Point } from '../Point';\n\nimport type { Matrix } from '../Matrix';\n\nconst tempPoints = [new Point(), new Point(), new Point(), new Point()];\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface Rectangle extends GlobalMixins.Rectangle {}\n\n/**\n * Size object, contains width and height\n * @memberof PIXI\n * @typedef {object} ISize\n * @property {number} width - Width component\n * @property {number} height - Height component\n */\n\n/**\n * Rectangle object is an area defined by its position, as indicated by its top-left corner\n * point (x, y) and by its width and its height.\n * @memberof PIXI\n */\nexport class Rectangle\n{\n    /** @default 0 */\n    public x: number;\n\n    /** @default 0 */\n    public y: number;\n    /** @default 0 */\n    public width: number;\n\n    /** @default 0 */\n    public height: number;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default PIXI.SHAPES.RECT\n     * @see PIXI.SHAPES\n     */\n    public readonly type: SHAPES.RECT;\n\n    /**\n     * @param x - The X coordinate of the upper-left corner of the rectangle\n     * @param y - The Y coordinate of the upper-left corner of the rectangle\n     * @param width - The overall width of the rectangle\n     * @param height - The overall height of the rectangle\n     */\n    constructor(x: string | number = 0, y: string | number = 0, width: string | number = 0, height: string | number = 0)\n    {\n        this.x = Number(x);\n        this.y = Number(y);\n        this.width = Number(width);\n        this.height = Number(height);\n        this.type = SHAPES.RECT;\n    }\n\n    /** Returns the left edge of the rectangle. */\n    get left(): number\n    {\n        return this.x;\n    }\n\n    /** Returns the right edge of the rectangle. */\n    get right(): number\n    {\n        return this.x + this.width;\n    }\n\n    /** Returns the top edge of the rectangle. */\n    get top(): number\n    {\n        return this.y;\n    }\n\n    /** Returns the bottom edge of the rectangle. */\n    get bottom(): number\n    {\n        return this.y + this.height;\n    }\n\n    /** A constant empty rectangle. */\n    static get EMPTY(): Rectangle\n    {\n        return new Rectangle(0, 0, 0, 0);\n    }\n\n    /**\n     * Creates a clone of this Rectangle\n     * @returns a copy of the rectangle\n     */\n    clone(): Rectangle\n    {\n        return new Rectangle(this.x, this.y, this.width, this.height);\n    }\n\n    /**\n     * Copies another rectangle to this one.\n     * @param rectangle - The rectangle to copy from.\n     * @returns Returns itself.\n     */\n    copyFrom(rectangle: Rectangle): Rectangle\n    {\n        this.x = rectangle.x;\n        this.y = rectangle.y;\n        this.width = rectangle.width;\n        this.height = rectangle.height;\n\n        return this;\n    }\n\n    /**\n     * Copies this rectangle to another one.\n     * @param rectangle - The rectangle to copy to.\n     * @returns Returns given parameter.\n     */\n    copyTo(rectangle: Rectangle): Rectangle\n    {\n        rectangle.x = this.x;\n        rectangle.y = this.y;\n        rectangle.width = this.width;\n        rectangle.height = this.height;\n\n        return rectangle;\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this Rectangle\n     * @param x - The X coordinate of the point to test\n     * @param y - The Y coordinate of the point to test\n     * @returns Whether the x/y coordinates are within this Rectangle\n     */\n    contains(x: number, y: number): boolean\n    {\n        if (this.width <= 0 || this.height <= 0)\n        {\n            return false;\n        }\n\n        if (x >= this.x && x < this.x + this.width)\n        {\n            if (y >= this.y && y < this.y + this.height)\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Determines whether the `other` Rectangle transformed by `transform` intersects with `this` Rectangle object.\n     * Returns true only if the area of the intersection is >0, this means that Rectangles\n     * sharing a side are not overlapping. Another side effect is that an arealess rectangle\n     * (width or height equal to zero) can't intersect any other rectangle.\n     * @param {Rectangle} other - The Rectangle to intersect with `this`.\n     * @param {Matrix} transform - The transformation matrix of `other`.\n     * @returns {boolean} A value of `true` if the transformed `other` Rectangle intersects with `this`; otherwise `false`.\n     */\n    intersects(other: Rectangle, transform?: Matrix): boolean\n    {\n        if (!transform)\n        {\n            const x0 = this.x < other.x ? other.x : this.x;\n            const x1 = this.right > other.right ? other.right : this.right;\n\n            if (x1 <= x0)\n            {\n                return false;\n            }\n\n            const y0 = this.y < other.y ? other.y : this.y;\n            const y1 = this.bottom > other.bottom ? other.bottom : this.bottom;\n\n            return y1 > y0;\n        }\n\n        const x0 = this.left;\n        const x1 = this.right;\n        const y0 = this.top;\n        const y1 = this.bottom;\n\n        if (x1 <= x0 || y1 <= y0)\n        {\n            return false;\n        }\n\n        const lt = tempPoints[0].set(other.left, other.top);\n        const lb = tempPoints[1].set(other.left, other.bottom);\n        const rt = tempPoints[2].set(other.right, other.top);\n        const rb = tempPoints[3].set(other.right, other.bottom);\n\n        if (rt.x <= lt.x || lb.y <= lt.y)\n        {\n            return false;\n        }\n\n        const s = Math.sign((transform.a * transform.d) - (transform.b * transform.c));\n\n        if (s === 0)\n        {\n            return false;\n        }\n\n        transform.apply(lt, lt);\n        transform.apply(lb, lb);\n        transform.apply(rt, rt);\n        transform.apply(rb, rb);\n\n        if (Math.max(lt.x, lb.x, rt.x, rb.x) <= x0\n            || Math.min(lt.x, lb.x, rt.x, rb.x) >= x1\n            || Math.max(lt.y, lb.y, rt.y, rb.y) <= y0\n            || Math.min(lt.y, lb.y, rt.y, rb.y) >= y1)\n        {\n            return false;\n        }\n\n        const nx = s * (lb.y - lt.y);\n        const ny = s * (lt.x - lb.x);\n        const n00 = (nx * x0) + (ny * y0);\n        const n10 = (nx * x1) + (ny * y0);\n        const n01 = (nx * x0) + (ny * y1);\n        const n11 = (nx * x1) + (ny * y1);\n\n        if (Math.max(n00, n10, n01, n11) <= (nx * lt.x) + (ny * lt.y)\n            || Math.min(n00, n10, n01, n11) >= (nx * rb.x) + (ny * rb.y))\n        {\n            return false;\n        }\n\n        const mx = s * (lt.y - rt.y);\n        const my = s * (rt.x - lt.x);\n        const m00 = (mx * x0) + (my * y0);\n        const m10 = (mx * x1) + (my * y0);\n        const m01 = (mx * x0) + (my * y1);\n        const m11 = (mx * x1) + (my * y1);\n\n        if (Math.max(m00, m10, m01, m11) <= (mx * lt.x) + (my * lt.y)\n            || Math.min(m00, m10, m01, m11) >= (mx * rb.x) + (my * rb.y))\n        {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Pads the rectangle making it grow in all directions.\n     * If paddingY is omitted, both paddingX and paddingY will be set to paddingX.\n     * @param paddingX - The horizontal padding amount.\n     * @param paddingY - The vertical padding amount.\n     * @returns Returns itself.\n     */\n    pad(paddingX = 0, paddingY = paddingX): this\n    {\n        this.x -= paddingX;\n        this.y -= paddingY;\n\n        this.width += paddingX * 2;\n        this.height += paddingY * 2;\n\n        return this;\n    }\n\n    /**\n     * Fits this rectangle around the passed one.\n     * @param rectangle - The rectangle to fit.\n     * @returns Returns itself.\n     */\n    fit(rectangle: Rectangle): this\n    {\n        const x1 = Math.max(this.x, rectangle.x);\n        const x2 = Math.min(this.x + this.width, rectangle.x + rectangle.width);\n        const y1 = Math.max(this.y, rectangle.y);\n        const y2 = Math.min(this.y + this.height, rectangle.y + rectangle.height);\n\n        this.x = x1;\n        this.width = Math.max(x2 - x1, 0);\n        this.y = y1;\n        this.height = Math.max(y2 - y1, 0);\n\n        return this;\n    }\n\n    /**\n     * Enlarges rectangle that way its corners lie on grid\n     * @param resolution - resolution\n     * @param eps - precision\n     * @returns Returns itself.\n     */\n    ceil(resolution = 1, eps = 0.001): this\n    {\n        const x2 = Math.ceil((this.x + this.width - eps) * resolution) / resolution;\n        const y2 = Math.ceil((this.y + this.height - eps) * resolution) / resolution;\n\n        this.x = Math.floor((this.x + eps) * resolution) / resolution;\n        this.y = Math.floor((this.y + eps) * resolution) / resolution;\n\n        this.width = x2 - this.x;\n        this.height = y2 - this.y;\n\n        return this;\n    }\n\n    /**\n     * Enlarges this rectangle to include the passed rectangle.\n     * @param rectangle - The rectangle to include.\n     * @returns Returns itself.\n     */\n    enlarge(rectangle: Rectangle): this\n    {\n        const x1 = Math.min(this.x, rectangle.x);\n        const x2 = Math.max(this.x + this.width, rectangle.x + rectangle.width);\n        const y1 = Math.min(this.y, rectangle.y);\n        const y2 = Math.max(this.y + this.height, rectangle.y + rectangle.height);\n\n        this.x = x1;\n        this.width = x2 - x1;\n        this.y = y1;\n        this.height = y2 - y1;\n\n        return this;\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:Rectangle x=${this.x} y=${this.y} width=${this.width} height=${this.height}]`;\n    }\n    // #endif\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}