{"ast":null,"code":"import { Shader, Matrix, Program, TextureMatrix, utils } from '@pixi/core';\nimport fragment from './shader/mesh.mjs';\nimport vertex from './shader/mesh2.mjs';\nclass MeshMaterial extends Shader {\n  constructor(uSampler, options) {\n    const uniforms = {\n      uSampler,\n      alpha: 1,\n      uTextureMatrix: Matrix.IDENTITY,\n      uColor: new Float32Array([1, 1, 1, 1])\n    };\n    options = Object.assign({\n      tint: 16777215,\n      alpha: 1,\n      pluginName: \"batch\"\n    }, options);\n    if (options.uniforms) {\n      Object.assign(uniforms, options.uniforms);\n    }\n    super(options.program || Program.from(vertex, fragment), uniforms);\n    this._colorDirty = false;\n    this.uvMatrix = new TextureMatrix(uSampler);\n    this.batchable = options.program === void 0;\n    this.pluginName = options.pluginName;\n    this.tint = options.tint;\n    this.alpha = options.alpha;\n  }\n  get texture() {\n    return this.uniforms.uSampler;\n  }\n  set texture(value) {\n    if (this.uniforms.uSampler !== value) {\n      if (!this.uniforms.uSampler.baseTexture.alphaMode !== !value.baseTexture.alphaMode) {\n        this._colorDirty = true;\n      }\n      this.uniforms.uSampler = value;\n      this.uvMatrix.texture = value;\n    }\n  }\n  set alpha(value) {\n    if (value === this._alpha) return;\n    this._alpha = value;\n    this._colorDirty = true;\n  }\n  get alpha() {\n    return this._alpha;\n  }\n  set tint(value) {\n    if (value === this._tint) return;\n    this._tint = value;\n    this._tintRGB = (value >> 16) + (value & 65280) + ((value & 255) << 16);\n    this._colorDirty = true;\n  }\n  get tint() {\n    return this._tint;\n  }\n  update() {\n    if (this._colorDirty) {\n      this._colorDirty = false;\n      const baseTexture = this.texture.baseTexture;\n      utils.premultiplyTintToRgba(this._tint, this._alpha, this.uniforms.uColor, baseTexture.alphaMode);\n    }\n    if (this.uvMatrix.update()) {\n      this.uniforms.uTextureMatrix = this.uvMatrix.mapCoord;\n    }\n  }\n}\nexport { MeshMaterial };","map":{"version":3,"mappings":";;;AAsBO,MAAMA,qBAAqBC,MAClC;EAwCIC,YAAYC,UAAmBC,OAC/B;IACI,MAAMC,QAAW;MACbF;MACAG,KAAO;MACPC,gBAAgBC,MAAO;MACvBC,QAAQ,IAAIC,YAAa,EAAC,GAAG,CAAG,KAAG,CAAC,CAAC;IAAA,CACzC;IAGAN,UAAUO,OAAOC,MAAO;MACpBC,IAAM;MACNP,KAAO;MACPQ,UAAY;IAAA,GACbV,OAAO;IAEV,IAAIA,QAAQC,QACZ;MACWM,cAAON,QAAU,UAAQA,QAAQ;IAAA;IAG5C,MAAMD,QAAQW,OAAW,YAAQC,KAAKC,MAAQ,UAAQ,GAAGZ,QAAQ;IAEjE,KAAKa,WAAc;IAEd,gBAAW,IAAIC,cAAchB,QAAQ;IACrC,iBAAYC,QAAQW,OAAY;IACrC,KAAKD,aAAaV,OAAQ;IAE1B,KAAKS,OAAOT,OAAQ;IACpB,KAAKE,QAAQF,OAAQ;EAAA;EAIzB,IAAIgB,OACJA;IACI,OAAO,KAAKf,QAAS;EAAA;EAEzB,IAAIe,QAAQC,KACZ;IACQ,SAAKhB,QAAS,cAAagB,KAC/B;MACQ,KAAC,KAAKhB,QAAS,UAASiB,YAAYC,SAAc,MAACF,KAAM,aAAYE,SACzE;QACI,KAAKL,WAAc;MAAA;MAGvB,KAAKb,SAASF,QAAW;MACzB,KAAKqB,SAASJ,OAAU;IAAA;EAC5B;EAOJ,IAAId,MAAMe,KACV;IACI,IAAIA,UAAU,IAAK,SAAQ;IAE3B,KAAKI,MAAS;IACd,KAAKP,WAAc;EAAA;EAEvB,IAAIZ,KACJA;IACI,OAAO,IAAK;EAAA;EAOhB,IAAIO,KAAKQ,KACT;IACI,IAAIA,UAAU,IAAK,QAAO;IAE1B,KAAKK,KAAQ;IACb,KAAKC,WAAY,CAASN,gBAAeA,2BAAoB,GAAS;IACtE,KAAKH,WAAc;EAAA;EAEvB,IAAIL,IACJA;IACI,OAAO,IAAK;EAAA;EAIhBe,MACAA;IACI,IAAI,KAAKV,WACT;MACI,KAAKA,WAAc;MACb,oBAAc,KAAKE,OAAQ;MAE3BS,4BACF,KAAKH,KAAO,OAAKD,QAAQ,IAAK,UAAShB,MAAS,cAAYc,SAChE;IAAA;IAEA,SAAKC,QAAS,SAClB;MACS,cAASjB,cAAiB,QAAKiB,QAAS;IAAA;EACjD;AAER","names":["MeshMaterial","Shader","constructor","uSampler","options","uniforms","alpha","uTextureMatrix","Matrix","uColor","Float32Array","Object","assign","tint","pluginName","program","from","vertex","_colorDirty","TextureMatrix","texture","value","baseTexture","alphaMode","uvMatrix","_alpha","_tint","_tintRGB","update","utils"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/mesh/src/MeshMaterial.ts"],"sourcesContent":["import { Matrix, Program, Shader, TextureMatrix, utils } from '@pixi/core';\nimport fragment from './shader/mesh.frag';\nimport vertex from './shader/mesh.vert';\n\nimport type { Texture } from '@pixi/core';\n\nexport interface IMeshMaterialOptions\n{\n    alpha?: number;\n    tint?: number;\n    pluginName?: string;\n    program?: Program;\n    uniforms?: utils.Dict<unknown>;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface MeshMaterial extends GlobalMixins.MeshMaterial {}\n\n/**\n * Slightly opinionated default shader for PixiJS 2D objects.\n * @memberof PIXI\n */\nexport class MeshMaterial extends Shader\n{\n    /**\n     * TextureMatrix instance for this Mesh, used to track Texture changes.\n     * @readonly\n     */\n    public readonly uvMatrix: TextureMatrix;\n\n    /**\n     * `true` if shader can be batch with the renderer's batch system.\n     * @default true\n     */\n    public batchable: boolean;\n\n    /**\n     * Renderer plugin for batching.\n     * @default 'batch'\n     */\n    public pluginName: string;\n\n    // Internal-only properties\n    _tintRGB: number;\n\n    /**\n     * Only do update if tint or alpha changes.\n     * @private\n     * @default false\n     */\n    private _colorDirty: boolean;\n    private _alpha: number;\n    private _tint: number;\n\n    /**\n     * @param uSampler - Texture that material uses to render.\n     * @param options - Additional options\n     * @param {number} [options.alpha=1] - Default alpha.\n     * @param {number} [options.tint=0xFFFFFF] - Default tint.\n     * @param {string} [options.pluginName='batch'] - Renderer plugin for batching.\n     * @param {PIXI.Program} [options.program=0xFFFFFF] - Custom program.\n     * @param {object} [options.uniforms] - Custom uniforms.\n     */\n    constructor(uSampler: Texture, options?: IMeshMaterialOptions)\n    {\n        const uniforms = {\n            uSampler,\n            alpha: 1,\n            uTextureMatrix: Matrix.IDENTITY,\n            uColor: new Float32Array([1, 1, 1, 1]),\n        };\n\n        // Set defaults\n        options = Object.assign({\n            tint: 0xFFFFFF,\n            alpha: 1,\n            pluginName: 'batch',\n        }, options);\n\n        if (options.uniforms)\n        {\n            Object.assign(uniforms, options.uniforms);\n        }\n\n        super(options.program || Program.from(vertex, fragment), uniforms);\n\n        this._colorDirty = false;\n\n        this.uvMatrix = new TextureMatrix(uSampler);\n        this.batchable = options.program === undefined;\n        this.pluginName = options.pluginName;\n\n        this.tint = options.tint;\n        this.alpha = options.alpha;\n    }\n\n    /** Reference to the texture being rendered. */\n    get texture(): Texture\n    {\n        return this.uniforms.uSampler;\n    }\n    set texture(value: Texture)\n    {\n        if (this.uniforms.uSampler !== value)\n        {\n            if (!this.uniforms.uSampler.baseTexture.alphaMode !== !value.baseTexture.alphaMode)\n            {\n                this._colorDirty = true;\n            }\n\n            this.uniforms.uSampler = value;\n            this.uvMatrix.texture = value;\n        }\n    }\n\n    /**\n     * This gets automatically set by the object using this.\n     * @default 1\n     */\n    set alpha(value: number)\n    {\n        if (value === this._alpha) return;\n\n        this._alpha = value;\n        this._colorDirty = true;\n    }\n    get alpha(): number\n    {\n        return this._alpha;\n    }\n\n    /**\n     * Multiply tint for the material.\n     * @default 0xFFFFFF\n     */\n    set tint(value: number)\n    {\n        if (value === this._tint) return;\n\n        this._tint = value;\n        this._tintRGB = (value >> 16) + (value & 0xff00) + ((value & 0xff) << 16);\n        this._colorDirty = true;\n    }\n    get tint(): number\n    {\n        return this._tint;\n    }\n\n    /** Gets called automatically by the Mesh. Intended to be overridden for custom {@link MeshMaterial} objects. */\n    public update(): void\n    {\n        if (this._colorDirty)\n        {\n            this._colorDirty = false;\n            const baseTexture = this.texture.baseTexture;\n\n            utils.premultiplyTintToRgba(\n                this._tint, this._alpha, this.uniforms.uColor, (baseTexture.alphaMode as unknown as boolean)\n            );\n        }\n        if (this.uvMatrix.update())\n        {\n            this.uniforms.uTextureMatrix = this.uvMatrix.mapCoord;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}