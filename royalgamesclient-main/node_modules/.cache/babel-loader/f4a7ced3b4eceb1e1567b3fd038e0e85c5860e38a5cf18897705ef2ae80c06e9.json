{"ast":null,"code":"let unsafeEval;\nfunction unsafeEvalSupported() {\n  if (typeof unsafeEval === \"boolean\") {\n    return unsafeEval;\n  }\n  try {\n    const func = new Function(\"param1\", \"param2\", \"param3\", \"return param1[param2] === param3;\");\n    unsafeEval = func({\n      a: \"b\"\n    }, \"a\", \"b\") === true;\n  } catch (e) {\n    unsafeEval = false;\n  }\n  return unsafeEval;\n}\nexport { unsafeEvalSupported };","map":{"version":3,"mappings":"AACA,IAAIA;AASJ;EACQ,WAAOA,eAAe,SAC1B;IACW;EAAA;EAIX;IAEI,MAAMC,OAAO,IAAIC,SAAS,QAAU,YAAU,UAAU,mCAAmC;IAG3FF,aAAaC,KAAK;MAAEE,GAAG;IAAA,CAAO,OAAK,GAAG,CAAM;EAAA,SAEzCC,CAAP;IAEiBJ;EAAA;EAGV;AACX","names":["unsafeEval","func","Function","a","e"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/core/src/shader/utils/unsafeEvalSupported.ts"],"sourcesContent":["// Cache the result to prevent running this over and over\nlet unsafeEval: boolean;\n\n/**\n * Not all platforms allow to generate function code (e.g., `new Function`).\n * this provides the platform-level detection.\n * @private\n * @returns {boolean} `true` if `new Function` is supported.\n */\nexport function unsafeEvalSupported(): boolean\n{\n    if (typeof unsafeEval === 'boolean')\n    {\n        return unsafeEval;\n    }\n\n    try\n    {\n        /* eslint-disable no-new-func */\n        const func = new Function('param1', 'param2', 'param3', 'return param1[param2] === param3;');\n        /* eslint-enable no-new-func */\n\n        unsafeEval = func({ a: 'b' }, 'a', 'b') === true;\n    }\n    catch (e)\n    {\n        unsafeEval = false;\n    }\n\n    return unsafeEval;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}