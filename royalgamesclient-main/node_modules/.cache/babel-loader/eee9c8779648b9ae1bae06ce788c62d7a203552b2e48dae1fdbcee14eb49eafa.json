{"ast":null,"code":"const buildRectangle = {\n  build(graphicsData) {\n    const rectData = graphicsData.shape;\n    const x = rectData.x;\n    const y = rectData.y;\n    const width = rectData.width;\n    const height = rectData.height;\n    const points = graphicsData.points;\n    points.length = 0;\n    if (!(width >= 0 && height >= 0)) {\n      return;\n    }\n    points.push(x, y, x + width, y, x + width, y + height, x, y + height);\n  },\n  triangulate(graphicsData, graphicsGeometry) {\n    const points = graphicsData.points;\n    const verts = graphicsGeometry.points;\n    if (points.length === 0) {\n      return;\n    }\n    const vertPos = verts.length / 2;\n    verts.push(points[0], points[1], points[2], points[3], points[6], points[7], points[4], points[5]);\n    graphicsGeometry.indices.push(vertPos, vertPos + 1, vertPos + 2, vertPos + 1, vertPos + 2, vertPos + 3);\n  }\n};\nexport { buildRectangle };","map":{"version":3,"mappings":"AAaO,MAAMA,cAAqC;EAE9CC,MAAMC,YACN;IAII,MAAMC,WAAWD,YAAa;IAC9B,MAAME,IAAID,QAAS;IACnB,MAAME,IAAIF,QAAS;IACnB,MAAMG,QAAQH,QAAS;IACvB,MAAMI,SAASJ,QAAS;IAExB,MAAMK,SAASN,YAAa;IAE5BM,OAAOC,MAAS;IAEhB,IAAI,EAAEH,SAAS,CAAK,cAAU,CAC9B;MACI;IAAA;IAGJE,OAAOE,IAAK,IAAGL,CACX,MAAIC,KAAO,KACXF,CAAI,UAAOC,CAAI,WACfD,CAAG,MAAIG,MAAM;EAAA,CACrB;EAEAI,YAAYT,cAAcU,gBAC1B;IACI,MAAMJ,SAASN,YAAa;IAC5B,MAAMW,QAAQD,gBAAiB;IAE3B,WAAOH,WAAW,CACtB;MACI;IAAA;IAGE,gBAAUI,MAAMJ,MAAS;IAE/BI,MAAMH,KAAKF,MAAO,KAAIA,MAAO,KACzBA,OAAO,CAAI,UAAO,CAClB,UAAO,IAAIA,MAAO,KAClBA,MAAO,KAAIA,OAAO,CAAE;IAExBI,iBAAiBE,OAAQ,MAAKC,OAAS,YAAU,CAAG,YAAU,CAC1D,YAAU,CAAG,YAAU,CAAG,YAAU,CAAC;EAAA;AAEjD","names":["buildRectangle","build","graphicsData","rectData","x","y","width","height","points","length","push","triangulate","graphicsGeometry","verts","indices","vertPos"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/graphics/src/utils/buildRectangle.ts"],"sourcesContent":["import type { Rectangle } from '@pixi/core';\nimport type { IShapeBuildCommand } from './IShapeBuildCommand';\n\n/**\n * Builds a rectangle to draw\n *\n * Ignored from docs since it is not directly exposed.\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the WebGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the WebGL-specific information to create nativeLines\n */\nexport const buildRectangle: IShapeBuildCommand = {\n\n    build(graphicsData)\n    {\n        // --- //\n        // need to convert points to a nice regular data\n        //\n        const rectData = graphicsData.shape as Rectangle;\n        const x = rectData.x;\n        const y = rectData.y;\n        const width = rectData.width;\n        const height = rectData.height;\n\n        const points = graphicsData.points;\n\n        points.length = 0;\n\n        if (!(width >= 0 && height >= 0))\n        {\n            return;\n        }\n\n        points.push(x, y,\n            x + width, y,\n            x + width, y + height,\n            x, y + height);\n    },\n\n    triangulate(graphicsData, graphicsGeometry)\n    {\n        const points = graphicsData.points;\n        const verts = graphicsGeometry.points;\n\n        if (points.length === 0)\n        {\n            return;\n        }\n\n        const vertPos = verts.length / 2;\n\n        verts.push(points[0], points[1],\n            points[2], points[3],\n            points[6], points[7],\n            points[4], points[5]);\n\n        graphicsGeometry.indices.push(vertPos, vertPos + 1, vertPos + 2,\n            vertPos + 1, vertPos + 2, vertPos + 3);\n    },\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}