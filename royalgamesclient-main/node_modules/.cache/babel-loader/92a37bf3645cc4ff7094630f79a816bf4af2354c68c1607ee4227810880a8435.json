{"ast":null,"code":"import { Matrix } from '@pixi/math';\nconst tempMat = new Matrix();\nclass TextureMatrix {\n  constructor(texture, clampMargin) {\n    this._texture = texture;\n    this.mapCoord = new Matrix();\n    this.uClampFrame = new Float32Array(4);\n    this.uClampOffset = new Float32Array(2);\n    this._textureID = -1;\n    this._updateID = 0;\n    this.clampOffset = 0;\n    this.clampMargin = typeof clampMargin === \"undefined\" ? 0.5 : clampMargin;\n    this.isSimple = false;\n  }\n  get texture() {\n    return this._texture;\n  }\n  set texture(value) {\n    this._texture = value;\n    this._textureID = -1;\n  }\n  multiplyUvs(uvs, out) {\n    if (out === void 0) {\n      out = uvs;\n    }\n    const mat = this.mapCoord;\n    for (let i = 0; i < uvs.length; i += 2) {\n      const x = uvs[i];\n      const y = uvs[i + 1];\n      out[i] = x * mat.a + y * mat.c + mat.tx;\n      out[i + 1] = x * mat.b + y * mat.d + mat.ty;\n    }\n    return out;\n  }\n  update(forceUpdate) {\n    const tex = this._texture;\n    if (!tex || !tex.valid) {\n      return false;\n    }\n    if (!forceUpdate && this._textureID === tex._updateID) {\n      return false;\n    }\n    this._textureID = tex._updateID;\n    this._updateID++;\n    const uvs = tex._uvs;\n    this.mapCoord.set(uvs.x1 - uvs.x0, uvs.y1 - uvs.y0, uvs.x3 - uvs.x0, uvs.y3 - uvs.y0, uvs.x0, uvs.y0);\n    const orig = tex.orig;\n    const trim = tex.trim;\n    if (trim) {\n      tempMat.set(orig.width / trim.width, 0, 0, orig.height / trim.height, -trim.x / trim.width, -trim.y / trim.height);\n      this.mapCoord.append(tempMat);\n    }\n    const texBase = tex.baseTexture;\n    const frame = this.uClampFrame;\n    const margin = this.clampMargin / texBase.resolution;\n    const offset = this.clampOffset;\n    frame[0] = (tex._frame.x + margin + offset) / texBase.width;\n    frame[1] = (tex._frame.y + margin + offset) / texBase.height;\n    frame[2] = (tex._frame.x + tex._frame.width - margin + offset) / texBase.width;\n    frame[3] = (tex._frame.y + tex._frame.height - margin + offset) / texBase.height;\n    this.uClampOffset[0] = offset / texBase.realWidth;\n    this.uClampOffset[1] = offset / texBase.realHeight;\n    this.isSimple = tex._frame.width === texBase.width && tex._frame.height === texBase.height && tex.rotate === 0;\n    return true;\n  }\n}\nexport { TextureMatrix };","map":{"version":3,"mappings":";AAIA,MAAMA,UAAU,IAAIC,MAAO;AAiBpB,MAAMC,aACb;EAwDIC,YAAYC,SAAkBC,WAC9B;IACI,KAAKC,QAAW;IAEX,gBAAW,IAAIL,MAAO;IACtB,mBAAc,IAAIM,aAAa,CAAC;IAChC,oBAAe,IAAIA,aAAa,CAAC;IACtC,KAAKC,UAAa;IAClB,KAAKC,SAAY;IAEjB,KAAKC,WAAc;IACnB,KAAKL,WAAe,UAAOA,WAAgB,mBAAe,GAAM;IAChE,KAAKM,QAAW;EAAA;EAIpB,IAAIP,OACJA;IACI,OAAO,IAAK;EAAA;EAGhB,IAAIA,QAAQQ,KACZ;IACI,KAAKN,QAAW;IAChB,KAAKE,UAAa;EAAA;EAStBK,YAAYC,KAAmBC,GAC/B;IACI,IAAIA,QAAQ,KACZ;MACUA;IAAA;IAGV,MAAMC,MAAM,IAAK;IAEjB,SAASC,IAAI,CAAG,MAAIH,GAAI,SAAQG,KAAK,CACrC;MACI,MAAMC,IAAIJ,GAAI;MACR,UAAIA,IAAIG,CAAI;MAElBF,IAAIE,KAAMC,CAAI,OAAIC,IAAMC,CAAI,OAAIC,IAAKL,GAAI;MACrCD,QAAI,KAAMG,CAAI,OAAII,IAAMF,CAAI,OAAIG,IAAKP,GAAI;IAAA;IAG1C;EAAA;EAQXQ,OAAOC,WACP;IACI,MAAMC,MAAM,IAAK;IAEjB,IAAI,CAACA,OAAO,CAACA,IAAIC,KACjB;MACW;IAAA;IAGX,IAAI,CAACF,eACE,IAAK,gBAAeC,IAAIjB,SAC/B;MACW;IAAA;IAGX,KAAKD,aAAakB,GAAI;IACjB;IAEL,MAAMZ,MAAMY,GAAI;IAEX,cAASE,IAAId,GAAI,MAAKA,IAAIe,EAAI,MAAIC,KAAKhB,GAAI,KAAIA,IAAIiB,EAAK,OAAIF,IAAIf,GAAI,MAAKA,IAAIkB,EAAI,MAAIH,EAAI,MAAIG,EAAE;IAEpG,MAAMC,OAAOP,GAAI;IACjB,MAAMQ,OAAOR,GAAI;IAEjB,IAAIQ,IACJ;MACYlC,YAAIiC,KAAKE,KAAQ,QAAKA,OAAO,CAAG,KAAGF,KAAKG,MAAS,QAAKA,QAC1D,CAACF,KAAKhB,IAAIgB,IAAK,QAAO,CAACA,IAAK,KAAIA,KAAKE,MAAM;MAC1C,cAASC,OAAOrC,OAAO;IAAA;IAGhC,MAAMsC,UAAUZ,GAAI;IACpB,MAAMa,QAAQ,IAAK;IACb,eAAS,IAAK,eAAcD,OAAQ;IAC1C,MAAME,SAAS,IAAK;IAEpBD,MAAM,KAAM,CAAIb,WAAOR,CAAI,YAASsB,UAAUF,OAAQ;IACtDC,MAAM,KAAM,CAAIb,WAAON,CAAI,YAASoB,UAAUF,OAAQ;IAChDC,WAAM,KAAIE,MAAO,KAAIf,IAAIe,MAAO,SAAQC,MAAS,aAAUJ,OAAQ;IACnEC,WAAM,KAAIE,MAAO,KAAIf,IAAIe,MAAO,UAASC,MAAS,aAAUJ,OAAQ;IACrE,kBAAa,CAAK,aAASA,OAAQ;IACnC,kBAAa,CAAK,aAASA,OAAQ;IAExC,KAAK3B,QAAW,OAAI8B,MAAO,WAAUH,OAAQ,UACtCZ,GAAI,QAAOU,MAAW,aAAQA,MAC9B,QAAIO,MAAW;IAEf;EAAA;AAEf","names":["tempMat","Matrix","TextureMatrix","constructor","texture","clampMargin","_texture","Float32Array","_textureID","_updateID","clampOffset","isSimple","value","multiplyUvs","uvs","out","mat","i","x","a","y","c","b","d","update","forceUpdate","tex","valid","set","x0","y1","x3","y0","orig","trim","width","height","append","texBase","frame","offset","_frame","margin","rotate"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/core/src/textures/TextureMatrix.ts"],"sourcesContent":["import { Matrix } from '@pixi/math';\n\nimport type { Texture } from './Texture';\n\nconst tempMat = new Matrix();\n\n/**\n * Class controls uv mapping from Texture normal space to BaseTexture normal space.\n *\n * Takes `trim` and `rotate` into account. May contain clamp settings for Meshes and TilingSprite.\n *\n * Can be used in Texture `uvMatrix` field, or separately, you can use different clamp settings on the same texture.\n * If you want to add support for texture region of certain feature or filter, that's what you're looking for.\n *\n * Takes track of Texture changes through `_lastTextureID` private field.\n * Use `update()` method call to track it from outside.\n * @see PIXI.Texture\n * @see PIXI.Mesh\n * @see PIXI.TilingSprite\n * @memberof PIXI\n */\nexport class TextureMatrix\n{\n    /**\n     * Matrix operation that converts texture region coords to texture coords\n     * @readonly\n     */\n    public mapCoord: Matrix;\n\n    /**\n     * Changes frame clamping\n     * Works with TilingSprite and Mesh\n     * Change to 1.5 if you texture has repeated right and bottom lines, that leads to smoother borders\n     * @default 0\n     */\n    public clampOffset: number;\n\n    /**\n     * Changes frame clamping\n     * Works with TilingSprite and Mesh\n     * Change to -0.5 to add a pixel to the edge, recommended for transparent trimmed textures in atlas\n     * @default 0.5\n     */\n    public clampMargin: number;\n\n    /**\n     * Clamp region for normalized coords, left-top pixel center in xy , bottom-right in zw.\n     * Calculated based on clampOffset.\n     */\n    readonly uClampFrame: Float32Array;\n\n    /** Normalized clamp offset. Calculated based on clampOffset. */\n    readonly uClampOffset: Float32Array;\n\n    /**\n     * Tracks Texture frame changes.\n     * @protected\n     */\n    _textureID: number;\n\n    /**\n     * Tracks Texture frame changes.\n     * @protected\n     */\n    _updateID: number;\n    _texture: Texture;\n\n    /**\n     * If texture size is the same as baseTexture.\n     * @default false\n     * @readonly\n     */\n    isSimple: boolean;\n\n    /**\n     * @param texture - observed texture\n     * @param clampMargin - Changes frame clamping, 0.5 by default. Use -0.5 for extra border.\n     */\n    constructor(texture: Texture, clampMargin?: number)\n    {\n        this._texture = texture;\n\n        this.mapCoord = new Matrix();\n        this.uClampFrame = new Float32Array(4);\n        this.uClampOffset = new Float32Array(2);\n        this._textureID = -1;\n        this._updateID = 0;\n\n        this.clampOffset = 0;\n        this.clampMargin = (typeof clampMargin === 'undefined') ? 0.5 : clampMargin;\n        this.isSimple = false;\n    }\n\n    /** Texture property. */\n    get texture(): Texture\n    {\n        return this._texture;\n    }\n\n    set texture(value: Texture)\n    {\n        this._texture = value;\n        this._textureID = -1;\n    }\n\n    /**\n     * Multiplies uvs array to transform\n     * @param uvs - mesh uvs\n     * @param [out=uvs] - output\n     * @returns - output\n     */\n    multiplyUvs(uvs: Float32Array, out?: Float32Array): Float32Array\n    {\n        if (out === undefined)\n        {\n            out = uvs;\n        }\n\n        const mat = this.mapCoord;\n\n        for (let i = 0; i < uvs.length; i += 2)\n        {\n            const x = uvs[i];\n            const y = uvs[i + 1];\n\n            out[i] = (x * mat.a) + (y * mat.c) + mat.tx;\n            out[i + 1] = (x * mat.b) + (y * mat.d) + mat.ty;\n        }\n\n        return out;\n    }\n\n    /**\n     * Updates matrices if texture was changed.\n     * @param [forceUpdate=false] - if true, matrices will be updated any case\n     * @returns - Whether or not it was updated\n     */\n    update(forceUpdate?: boolean): boolean\n    {\n        const tex = this._texture;\n\n        if (!tex || !tex.valid)\n        {\n            return false;\n        }\n\n        if (!forceUpdate\n            && this._textureID === tex._updateID)\n        {\n            return false;\n        }\n\n        this._textureID = tex._updateID;\n        this._updateID++;\n\n        const uvs = tex._uvs;\n\n        this.mapCoord.set(uvs.x1 - uvs.x0, uvs.y1 - uvs.y0, uvs.x3 - uvs.x0, uvs.y3 - uvs.y0, uvs.x0, uvs.y0);\n\n        const orig = tex.orig;\n        const trim = tex.trim;\n\n        if (trim)\n        {\n            tempMat.set(orig.width / trim.width, 0, 0, orig.height / trim.height,\n                -trim.x / trim.width, -trim.y / trim.height);\n            this.mapCoord.append(tempMat);\n        }\n\n        const texBase = tex.baseTexture;\n        const frame = this.uClampFrame;\n        const margin = this.clampMargin / texBase.resolution;\n        const offset = this.clampOffset;\n\n        frame[0] = (tex._frame.x + margin + offset) / texBase.width;\n        frame[1] = (tex._frame.y + margin + offset) / texBase.height;\n        frame[2] = (tex._frame.x + tex._frame.width - margin + offset) / texBase.width;\n        frame[3] = (tex._frame.y + tex._frame.height - margin + offset) / texBase.height;\n        this.uClampOffset[0] = offset / texBase.realWidth;\n        this.uClampOffset[1] = offset / texBase.realHeight;\n\n        this.isSimple = tex._frame.width === texBase.width\n            && tex._frame.height === texBase.height\n            && tex.rotate === 0;\n\n        return true;\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}