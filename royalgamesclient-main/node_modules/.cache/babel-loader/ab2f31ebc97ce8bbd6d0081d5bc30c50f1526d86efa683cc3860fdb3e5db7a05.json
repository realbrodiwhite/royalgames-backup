{"ast":null,"code":"import { settings } from '@pixi/settings';\nfunction assertPath(path2) {\n  if (typeof path2 !== \"string\") {\n    throw new TypeError(\"Path must be a string. Received \".concat(JSON.stringify(path2)));\n  }\n}\nfunction removeUrlParams(url) {\n  const re = url.split(\"?\")[0];\n  return re.split(\"#\")[0];\n}\nfunction escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\nfunction replaceAll(str, find, replace) {\n  return str.replace(new RegExp(escapeRegExp(find), \"g\"), replace);\n}\nfunction normalizeStringPosix(path2, allowAboveRoot) {\n  let res = \"\";\n  let lastSegmentLength = 0;\n  let lastSlash = -1;\n  let dots = 0;\n  let code = -1;\n  for (let i = 0; i <= path2.length; ++i) {\n    if (i < path2.length) {\n      code = path2.charCodeAt(i);\n    } else if (code === 47) {\n      break;\n    } else {\n      code = 47;\n    }\n    if (code === 47) {\n      if (lastSlash === i - 1 || dots === 1) {} else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 || res.charCodeAt(res.length - 2) !== 46) {\n          if (res.length > 2) {\n            const lastSlashIndex = res.lastIndexOf(\"/\");\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = \"\";\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf(\"/\");\n              }\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = \"\";\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0) {\n            res += \"/..\";\n          } else {\n            res = \"..\";\n          }\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0) {\n          res += \"/\".concat(path2.slice(lastSlash + 1, i));\n        } else {\n          res = path2.slice(lastSlash + 1, i);\n        }\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46 && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\nconst path = {\n  toPosix(path2) {\n    return replaceAll(path2, \"\\\\\", \"/\");\n  },\n  isUrl(path2) {\n    return /^https?:/.test(this.toPosix(path2));\n  },\n  isDataUrl(path2) {\n    return /^data:([a-z]+\\/[a-z0-9-+.]+(;[a-z0-9-.!#$%*+.{}|~`]+=[a-z0-9-.!#$%*+.{}()_|~`]+)*)?(;base64)?,([a-z0-9!$&',()*+;=\\-._~:@\\/?%\\s<>]*?)$/i.test(path2);\n  },\n  hasProtocol(path2) {\n    return /^[^/:]+:\\//.test(this.toPosix(path2));\n  },\n  getProtocol(path2) {\n    assertPath(path2);\n    path2 = this.toPosix(path2);\n    let protocol = \"\";\n    const isFile = /^file:\\/\\/\\//.exec(path2);\n    const isHttp = /^[^/:]+:\\/\\//.exec(path2);\n    const isWindows = /^[^/:]+:\\//.exec(path2);\n    if (isFile || isHttp || isWindows) {\n      const arr = (isFile === null || isFile === void 0 ? void 0 : isFile[0]) || (isHttp === null || isHttp === void 0 ? void 0 : isHttp[0]) || (isWindows === null || isWindows === void 0 ? void 0 : isWindows[0]);\n      protocol = arr;\n      path2 = path2.slice(arr.length);\n    }\n    return protocol;\n  },\n  toAbsolute(url, customBaseUrl, customRootUrl) {\n    if (this.isDataUrl(url)) return url;\n    const baseUrl = removeUrlParams(this.toPosix(customBaseUrl !== null && customBaseUrl !== void 0 ? customBaseUrl : settings.ADAPTER.getBaseUrl()));\n    const rootUrl = removeUrlParams(this.toPosix(customRootUrl !== null && customRootUrl !== void 0 ? customRootUrl : this.rootname(baseUrl)));\n    assertPath(url);\n    url = this.toPosix(url);\n    if (url.startsWith(\"/\")) {\n      return path.join(rootUrl, url.slice(1));\n    }\n    const absolutePath = this.isAbsolute(url) ? url : this.join(baseUrl, url);\n    return absolutePath;\n  },\n  normalize(path2) {\n    path2 = this.toPosix(path2);\n    assertPath(path2);\n    if (path2.length === 0) return \".\";\n    let protocol = \"\";\n    const isAbsolute = path2.startsWith(\"/\");\n    if (this.hasProtocol(path2)) {\n      protocol = this.rootname(path2);\n      path2 = path2.slice(protocol.length);\n    }\n    const trailingSeparator = path2.endsWith(\"/\");\n    path2 = normalizeStringPosix(path2, false);\n    if (path2.length > 0 && trailingSeparator) path2 += \"/\";\n    if (isAbsolute) return \"/\".concat(path2);\n    return protocol + path2;\n  },\n  isAbsolute(path2) {\n    assertPath(path2);\n    path2 = this.toPosix(path2);\n    if (this.hasProtocol(path2)) return true;\n    return path2.startsWith(\"/\");\n  },\n  join() {\n    if (arguments.length === 0) {\n      return \".\";\n    }\n    let joined;\n    for (let i = 0; i < arguments.length; ++i) {\n      const arg = i < 0 || arguments.length <= i ? undefined : arguments[i];\n      assertPath(arg);\n      if (arg.length > 0) {\n        if (joined === void 0) joined = arg;else {\n          var _ref;\n          const prevArg = (_ref = i - 1 < 0 || arguments.length <= i - 1 ? undefined : arguments[i - 1]) !== null && _ref !== void 0 ? _ref : \"\";\n          if (this.extname(prevArg)) {\n            joined += \"/../\".concat(arg);\n          } else {\n            joined += \"/\".concat(arg);\n          }\n        }\n      }\n    }\n    if (joined === void 0) {\n      return \".\";\n    }\n    return this.normalize(joined);\n  },\n  dirname(path2) {\n    assertPath(path2);\n    if (path2.length === 0) return \".\";\n    path2 = this.toPosix(path2);\n    let code = path2.charCodeAt(0);\n    const hasRoot = code === 47;\n    let end = -1;\n    let matchedSlash = true;\n    const proto = this.getProtocol(path2);\n    const origpath = path2;\n    path2 = path2.slice(proto.length);\n    for (let i = path2.length - 1; i >= 1; --i) {\n      code = path2.charCodeAt(i);\n      if (code === 47) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n        matchedSlash = false;\n      }\n    }\n    if (end === -1) return hasRoot ? \"/\" : this.isUrl(origpath) ? proto + path2 : proto;\n    if (hasRoot && end === 1) return \"//\";\n    return proto + path2.slice(0, end);\n  },\n  rootname(path2) {\n    assertPath(path2);\n    path2 = this.toPosix(path2);\n    let root = \"\";\n    if (path2.startsWith(\"/\")) root = \"/\";else {\n      root = this.getProtocol(path2);\n    }\n    if (this.isUrl(path2)) {\n      const index = path2.indexOf(\"/\", root.length);\n      if (index !== -1) {\n        root = path2.slice(0, index);\n      } else root = path2;\n      if (!root.endsWith(\"/\")) root += \"/\";\n    }\n    return root;\n  },\n  basename(path2, ext) {\n    assertPath(path2);\n    if (ext) assertPath(ext);\n    path2 = removeUrlParams(this.toPosix(path2));\n    let start = 0;\n    let end = -1;\n    let matchedSlash = true;\n    let i;\n    if (ext !== void 0 && ext.length > 0 && ext.length <= path2.length) {\n      if (ext.length === path2.length && ext === path2) return \"\";\n      let extIdx = ext.length - 1;\n      let firstNonSlashEnd = -1;\n      for (i = path2.length - 1; i >= 0; --i) {\n        const code = path2.charCodeAt(i);\n        if (code === 47) {\n          if (!matchedSlash) {\n            start = i + 1;\n            break;\n          }\n        } else {\n          if (firstNonSlashEnd === -1) {\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                end = i;\n              }\n            } else {\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path2.length;\n      return path2.slice(start, end);\n    }\n    for (i = path2.length - 1; i >= 0; --i) {\n      if (path2.charCodeAt(i) === 47) {\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n        matchedSlash = false;\n        end = i + 1;\n      }\n    }\n    if (end === -1) return \"\";\n    return path2.slice(start, end);\n  },\n  extname(path2) {\n    assertPath(path2);\n    path2 = removeUrlParams(this.toPosix(path2));\n    let startDot = -1;\n    let startPart = 0;\n    let end = -1;\n    let matchedSlash = true;\n    let preDotState = 0;\n    for (let i = path2.length - 1; i >= 0; --i) {\n      const code = path2.charCodeAt(i);\n      if (code === 47) {\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n      if (end === -1) {\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46) {\n        if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n      } else if (startDot !== -1) {\n        preDotState = -1;\n      }\n    }\n    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return \"\";\n    }\n    return path2.slice(startDot, end);\n  },\n  parse(path2) {\n    assertPath(path2);\n    const ret = {\n      root: \"\",\n      dir: \"\",\n      base: \"\",\n      ext: \"\",\n      name: \"\"\n    };\n    if (path2.length === 0) return ret;\n    path2 = removeUrlParams(this.toPosix(path2));\n    let code = path2.charCodeAt(0);\n    const isAbsolute = this.isAbsolute(path2);\n    let start;\n    const protocol = \"\";\n    ret.root = this.rootname(path2);\n    if (isAbsolute || this.hasProtocol(path2)) {\n      start = 1;\n    } else {\n      start = 0;\n    }\n    let startDot = -1;\n    let startPart = 0;\n    let end = -1;\n    let matchedSlash = true;\n    let i = path2.length - 1;\n    let preDotState = 0;\n    for (; i >= start; --i) {\n      code = path2.charCodeAt(i);\n      if (code === 47) {\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n      if (end === -1) {\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46) {\n        if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n      } else if (startDot !== -1) {\n        preDotState = -1;\n      }\n    }\n    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path2.slice(1, end);else ret.base = ret.name = path2.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path2.slice(1, startDot);\n        ret.base = path2.slice(1, end);\n      } else {\n        ret.name = path2.slice(startPart, startDot);\n        ret.base = path2.slice(startPart, end);\n      }\n      ret.ext = path2.slice(startDot, end);\n    }\n    ret.dir = this.dirname(path2);\n    if (protocol) ret.dir = protocol + ret.dir;\n    return ret;\n  },\n  sep: \"/\",\n  delimiter: \":\"\n};\nexport { path };","map":{"version":3,"mappings":"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","names":["path2","TypeError","JSON","url","re","split","string","replace","replaceAll","find","RegExp","escapeRegExp","allowAboveRoot","res","lastSegmentLength","lastSlash","dots","code","i","length","charCodeAt","lastSlashIndex","slice","lastIndexOf","path","toPosix","isUrl","isDataUrl","test","hasProtocol","getProtocol","assertPath","protocol","isHttp","isWindows","arr","toAbsolute","customRootUrl","removeUrlParams","customBaseUrl","settings","getBaseUrl","baseUrl","startsWith","join","isAbsolute","normalize","rootname","arguments","arg","joined","extname","dirname","hasRoot","end","matchedSlash","origpath","proto","root","index","indexOf","basename","ext","start","firstNonSlashEnd","extIdx","startDot","startPart","preDotState","parse","dir","base","name","ret","sep","delimiter"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/utils/src/path.ts"],"sourcesContent":["import { settings } from '@pixi/settings';\n\nfunction assertPath(path: string)\n{\n    if (typeof path !== 'string')\n    {\n        throw new TypeError(`Path must be a string. Received ${JSON.stringify(path)}`);\n    }\n}\n\nfunction removeUrlParams(url: string): string\n{\n    const re = url.split('?')[0];\n\n    return re.split('#')[0];\n}\n\nfunction escapeRegExp(string: string)\n{\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n\nfunction replaceAll(str: string, find: string, replace: string)\n{\n    return str.replace(new RegExp(escapeRegExp(find), 'g'), replace);\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeStringPosix(path: string, allowAboveRoot: boolean)\n{\n    let res = '';\n    let lastSegmentLength = 0;\n    let lastSlash = -1;\n    let dots = 0;\n    let code = -1;\n\n    for (let i = 0; i <= path.length; ++i)\n    {\n        if (i < path.length)\n        {\n            code = path.charCodeAt(i);\n        }\n        else if (code === 47)\n        {\n            break;\n        }\n        else\n        {\n            code = 47;\n        }\n        if (code === 47)\n        {\n            if (lastSlash === i - 1 || dots === 1)\n            {\n                // NOOP\n            }\n            else if (lastSlash !== i - 1 && dots === 2)\n            {\n                if (\n                    res.length < 2\n                    || lastSegmentLength !== 2\n                    || res.charCodeAt(res.length - 1) !== 46\n                    || res.charCodeAt(res.length - 2) !== 46\n                )\n                {\n                    if (res.length > 2)\n                    {\n                        const lastSlashIndex = res.lastIndexOf('/');\n\n                        if (lastSlashIndex !== res.length - 1)\n                        {\n                            if (lastSlashIndex === -1)\n                            {\n                                res = '';\n                                lastSegmentLength = 0;\n                            }\n                            else\n                            {\n                                res = res.slice(0, lastSlashIndex);\n                                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n                            }\n                            lastSlash = i;\n                            dots = 0;\n                            continue;\n                        }\n                    }\n                    else if (res.length === 2 || res.length === 1)\n                    {\n                        res = '';\n                        lastSegmentLength = 0;\n                        lastSlash = i;\n                        dots = 0;\n                        continue;\n                    }\n                }\n                if (allowAboveRoot)\n                {\n                    if (res.length > 0)\n                    { res += '/..'; }\n                    else\n                    { res = '..'; }\n                    lastSegmentLength = 2;\n                }\n            }\n            else\n            {\n                if (res.length > 0)\n                {\n                    res += `/${path.slice(lastSlash + 1, i)}`;\n                }\n                else\n                {\n                    res = path.slice(lastSlash + 1, i);\n                }\n                lastSegmentLength = i - lastSlash - 1;\n            }\n            lastSlash = i;\n            dots = 0;\n        }\n        else if (code === 46 && dots !== -1)\n        {\n            ++dots;\n        }\n        else\n        {\n            dots = -1;\n        }\n    }\n\n    return res;\n}\n\nexport interface Path\n{\n    toPosix: (path: string) => string;\n    toAbsolute: (url: string, baseUrl?: string, rootUrl?: string) => string;\n    isUrl: (path: string) => boolean;\n    isDataUrl: (path: string) => boolean;\n    hasProtocol: (path: string) => boolean;\n    getProtocol: (path: string) => string;\n    normalize: (path: string) => string;\n    join: (...paths: string[]) => string;\n    isAbsolute: (path: string) => boolean;\n    dirname: (path: string) => string;\n    rootname: (path: string) => string;\n    basename: (path: string, ext?: string) => string;\n    extname: (path: string) => string;\n    parse: (path: string) => { root?: string, dir?: string, base?: string, ext?: string, name?: string };\n    sep: string,\n    delimiter: string\n}\n\nexport const path: Path = {\n    /**\n     * Converts a path to posix format.\n     * @param path - The path to convert to posix\n     */\n    toPosix(path: string) { return replaceAll(path, '\\\\', '/'); },\n    /**\n     * Checks if the path is a URL\n     * @param path - The path to check\n     */\n    isUrl(path: string) { return (/^https?:/).test(this.toPosix(path)); },\n    /**\n     * Checks if the path is a data URL\n     * @param path - The path to check\n     */\n    isDataUrl(path: string)\n    {\n        // eslint-disable-next-line max-len\n        return (/^data:([a-z]+\\/[a-z0-9-+.]+(;[a-z0-9-.!#$%*+.{}|~`]+=[a-z0-9-.!#$%*+.{}()_|~`]+)*)?(;base64)?,([a-z0-9!$&',()*+;=\\-._~:@\\/?%\\s<>]*?)$/i)\n            .test(path);\n    },\n    /**\n     * Checks if the path has a protocol e.g. http://\n     * This will return true for windows file paths\n     * @param path - The path to check\n     */\n    hasProtocol(path: string) { return (/^[^/:]+:\\//).test(this.toPosix(path)); },\n    /**\n     * Returns the protocol of the path e.g. http://, C:/, file:///\n     * @param path - The path to get the protocol from\n     */\n    getProtocol(path: string)\n    {\n        assertPath(path);\n        path = this.toPosix(path);\n\n        let protocol = '';\n\n        const isFile = (/^file:\\/\\/\\//).exec(path);\n        const isHttp = (/^[^/:]+:\\/\\//).exec(path);\n        const isWindows = (/^[^/:]+:\\//).exec(path);\n\n        if (isFile || isHttp || isWindows)\n        {\n            const arr = (isFile?.[0] || isHttp?.[0] || isWindows?.[0]) as string;\n\n            protocol = arr;\n            path = path.slice(arr.length);\n        }\n\n        return protocol;\n    },\n\n    /**\n     * Converts URL to an absolute path.\n     * When loading from a Web Worker, we must use absolute paths.\n     * If the URL is already absolute we return it as is\n     * If it's not, we convert it\n     * @param url - The URL to test\n     * @param customBaseUrl - The base URL to use\n     * @param customRootUrl - The root URL to use\n     */\n    toAbsolute(url: string, customBaseUrl?: string, customRootUrl?: string)\n    {\n        if (this.isDataUrl(url)) return url;\n\n        const baseUrl = removeUrlParams(this.toPosix(customBaseUrl ?? settings.ADAPTER.getBaseUrl()));\n        const rootUrl = removeUrlParams(this.toPosix(customRootUrl ?? this.rootname(baseUrl)));\n\n        assertPath(url);\n        url = this.toPosix(url);\n\n        // root relative url\n        if (url.startsWith('/'))\n        {\n            return path.join(rootUrl, url.slice(1));\n        }\n\n        const absolutePath = this.isAbsolute(url) ? url : this.join(baseUrl, url);\n\n        return absolutePath;\n    },\n\n    /**\n     * Normalizes the given path, resolving '..' and '.' segments\n     * @param path - The path to normalize\n     */\n    normalize(path: string)\n    {\n        path = this.toPosix(path);\n        assertPath(path);\n\n        if (path.length === 0) return '.';\n\n        let protocol = '';\n        const isAbsolute = path.startsWith('/');\n\n        if (this.hasProtocol(path))\n        {\n            protocol = this.rootname(path);\n            path = path.slice(protocol.length);\n        }\n\n        const trailingSeparator = path.endsWith('/');\n\n        // Normalize the path\n        path = normalizeStringPosix(path, false);\n\n        if (path.length > 0 && trailingSeparator) path += '/';\n        if (isAbsolute) return `/${path}`;\n\n        return protocol + path;\n    },\n\n    /**\n     * Determines if path is an absolute path.\n     * Absolute paths can be urls, data urls, or paths on disk\n     * @param path - The path to test\n     */\n    isAbsolute(path: string)\n    {\n        assertPath(path);\n        path = this.toPosix(path);\n\n        if (this.hasProtocol(path)) return true;\n\n        return path.startsWith('/');\n    },\n\n    /**\n     * Joins all given path segments together using the platform-specific separator as a delimiter,\n     * then normalizes the resulting path\n     * @param segments - The segments of the path to join\n     */\n    join(...segments: string[])\n    {\n        if (segments.length === 0)\n        { return '.'; }\n        let joined;\n\n        for (let i = 0; i < segments.length; ++i)\n        {\n            const arg = segments[i];\n\n            assertPath(arg);\n            if (arg.length > 0)\n            {\n                if (joined === undefined) joined = arg;\n                else\n                {\n                    const prevArg = segments[i - 1] ?? '';\n\n                    if (this.extname(prevArg))\n                    {\n                        joined += `/../${arg}`;\n                    }\n                    else\n                    {\n                        joined += `/${arg}`;\n                    }\n                }\n            }\n        }\n        if (joined === undefined) { return '.'; }\n\n        return this.normalize(joined);\n    },\n\n    /**\n     * Returns the directory name of a path\n     * @param path - The path to parse\n     */\n    dirname(path: string)\n    {\n        assertPath(path);\n        if (path.length === 0) return '.';\n        path = this.toPosix(path);\n        let code = path.charCodeAt(0);\n        const hasRoot = code === 47;\n        let end = -1;\n        let matchedSlash = true;\n\n        const proto = this.getProtocol(path);\n        const origpath = path;\n\n        path = path.slice(proto.length);\n\n        for (let i = path.length - 1; i >= 1; --i)\n        {\n            code = path.charCodeAt(i);\n            if (code === 47)\n            {\n                if (!matchedSlash)\n                {\n                    end = i;\n                    break;\n                }\n            }\n            else\n            {\n                // We saw the first non-path separator\n                matchedSlash = false;\n            }\n        }\n\n        // if end is -1 and its a url then we need to add the path back\n        // eslint-disable-next-line no-nested-ternary\n        if (end === -1) return hasRoot ? '/' : this.isUrl(origpath) ? proto + path : proto;\n        if (hasRoot && end === 1) return '//';\n\n        return proto + path.slice(0, end);\n    },\n\n    /**\n     * Returns the root of the path e.g. /, C:/, file:///, http://domain.com/\n     * @param path - The path to parse\n     */\n    rootname(path: string)\n    {\n        assertPath(path);\n        path = this.toPosix(path);\n\n        let root = '';\n\n        if (path.startsWith('/')) root = '/';\n        else\n        {\n            root = this.getProtocol(path);\n        }\n\n        if (this.isUrl(path))\n        {\n            // need to find the first path separator\n            const index = path.indexOf('/', root.length);\n\n            if (index !== -1)\n            {\n                root = path.slice(0, index);\n            }\n            else root = path;\n\n            if (!root.endsWith('/')) root += '/';\n        }\n\n        return root;\n    },\n\n    /**\n     * Returns the last portion of a path\n     * @param path - The path to test\n     * @param ext - Optional extension to remove\n     */\n    basename(path: string, ext?: string)\n    {\n        assertPath(path);\n        if (ext) assertPath(ext);\n\n        path = removeUrlParams(this.toPosix(path));\n\n        let start = 0;\n        let end = -1;\n        let matchedSlash = true;\n        let i: number;\n\n        if (ext !== undefined && ext.length > 0 && ext.length <= path.length)\n        {\n            if (ext.length === path.length && ext === path) return '';\n            let extIdx = ext.length - 1;\n            let firstNonSlashEnd = -1;\n\n            for (i = path.length - 1; i >= 0; --i)\n            {\n                const code = path.charCodeAt(i);\n\n                if (code === 47)\n                {\n                    // If we reached a path separator that was not part of a set of path\n                    // separators at the end of the string, stop now\n                    if (!matchedSlash)\n                    {\n                        start = i + 1;\n                        break;\n                    }\n                }\n                else\n                {\n                    if (firstNonSlashEnd === -1)\n                    {\n                        // We saw the first non-path separator, remember this index in case\n                        // we need it if the extension ends up not matching\n                        matchedSlash = false;\n                        firstNonSlashEnd = i + 1;\n                    }\n                    if (extIdx >= 0)\n                    {\n                        // Try to match the explicit extension\n                        if (code === ext.charCodeAt(extIdx))\n                        {\n                            if (--extIdx === -1)\n                            {\n                                // We matched the extension, so mark this as the end of our path\n                                // component\n                                end = i;\n                            }\n                        }\n                        else\n                        {\n                            // Extension does not match, so our result is the entire path\n                            // component\n                            extIdx = -1;\n                            end = firstNonSlashEnd;\n                        }\n                    }\n                }\n            }\n\n            if (start === end) end = firstNonSlashEnd; else if (end === -1) end = path.length;\n\n            return path.slice(start, end);\n        }\n        for (i = path.length - 1; i >= 0; --i)\n        {\n            if (path.charCodeAt(i) === 47)\n            {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now\n                if (!matchedSlash)\n                {\n                    start = i + 1;\n                    break;\n                }\n            }\n            else if (end === -1)\n            {\n                // We saw the first non-path separator, mark this as the end of our\n                // path component\n                matchedSlash = false;\n                end = i + 1;\n            }\n        }\n\n        if (end === -1) return '';\n\n        return path.slice(start, end);\n    },\n\n    /**\n     * Returns the extension of the path, from the last occurrence of the . (period) character to end of string in the last\n     * portion of the path. If there is no . in the last portion of the path, or if there are no . characters other than\n     * the first character of the basename of path, an empty string is returned.\n     * @param path - The path to parse\n     */\n    extname(path: string)\n    {\n        assertPath(path);\n        path = removeUrlParams(this.toPosix(path));\n\n        let startDot = -1;\n        let startPart = 0;\n        let end = -1;\n        let matchedSlash = true;\n        // Track the state of characters (if any) we see before our first dot and\n        // after any path separator we find\n        let preDotState = 0;\n\n        for (let i = path.length - 1; i >= 0; --i)\n        {\n            const code = path.charCodeAt(i);\n\n            if (code === 47)\n            {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now\n                if (!matchedSlash)\n                {\n                    startPart = i + 1;\n                    break;\n                }\n                continue;\n            }\n            if (end === -1)\n            {\n                // We saw the first non-path separator, mark this as the end of our\n                // extension\n                matchedSlash = false;\n                end = i + 1;\n            }\n            if (code === 46)\n            {\n                // If this is our first dot, mark it as the start of our extension\n                if (startDot === -1) startDot = i;\n                else if (preDotState !== 1) preDotState = 1;\n            }\n            else if (startDot !== -1)\n            {\n                // We saw a non-dot and non-path separator before our dot, so we should\n                // have a good chance at having a non-empty extension\n                preDotState = -1;\n            }\n        }\n\n        if (\n            startDot === -1 || end === -1\n            // We saw a non-dot character immediately before the dot\n            || preDotState === 0\n            // The (right-most) trimmed path component is exactly '..'\n            // eslint-disable-next-line no-mixed-operators\n            || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1\n        )\n        {\n            return '';\n        }\n\n        return path.slice(startDot, end);\n    },\n\n    /**\n     * Parses a path into an object containing the 'root', `dir`, `base`, `ext`, and `name` properties.\n     * @param path - The path to parse\n     */\n    parse(path: string)\n    {\n        assertPath(path);\n\n        const ret = { root: '', dir: '', base: '', ext: '', name: '' };\n\n        if (path.length === 0) return ret;\n        path = removeUrlParams(this.toPosix(path));\n\n        let code = path.charCodeAt(0);\n        const isAbsolute = this.isAbsolute(path);\n        let start: number;\n        const protocol = '';\n\n        ret.root = this.rootname(path);\n\n        if (isAbsolute || this.hasProtocol(path))\n        {\n            start = 1;\n        }\n        else\n        {\n            start = 0;\n        }\n        let startDot = -1;\n        let startPart = 0;\n        let end = -1;\n        let matchedSlash = true;\n        let i = path.length - 1;\n\n        // Track the state of characters (if any) we see before our first dot and\n        // after any path separator we find\n        let preDotState = 0;\n\n        // Get non-dir info\n        for (; i >= start; --i)\n        {\n            code = path.charCodeAt(i);\n            if (code === 47)\n            {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now\n                if (!matchedSlash)\n                {\n                    startPart = i + 1;\n                    break;\n                }\n                continue;\n            }\n            if (end === -1)\n            {\n                // We saw the first non-path separator, mark this as the end of our\n                // extension\n                matchedSlash = false;\n                end = i + 1;\n            }\n            if (code === 46)\n            {\n                // If this is our first dot, mark it as the start of our extension\n                if (startDot === -1) startDot = i;\n                else if (preDotState !== 1) preDotState = 1;\n            }\n            else if (startDot !== -1)\n            {\n                // We saw a non-dot and non-path separator before our dot, so we should\n                // have a good chance at having a non-empty extension\n                preDotState = -1;\n            }\n        }\n\n        if (\n            startDot === -1 || end === -1\n            // We saw a non-dot character immediately before the dot\n            || preDotState === 0\n            // The (right-most) trimmed path component is exactly '..'\n            // eslint-disable-next-line no-mixed-operators\n            || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1\n        )\n        {\n            if (end !== -1)\n            {\n                if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);\n                else ret.base = ret.name = path.slice(startPart, end);\n            }\n        }\n        else\n        {\n            if (startPart === 0 && isAbsolute)\n            {\n                ret.name = path.slice(1, startDot);\n                ret.base = path.slice(1, end);\n            }\n            else\n            {\n                ret.name = path.slice(startPart, startDot);\n                ret.base = path.slice(startPart, end);\n            }\n            ret.ext = path.slice(startDot, end);\n        }\n\n        ret.dir = this.dirname(path);\n        if (protocol) ret.dir = protocol + ret.dir;\n\n        return ret;\n    },\n\n    sep: '/',\n    delimiter: ':'\n} as Path;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}