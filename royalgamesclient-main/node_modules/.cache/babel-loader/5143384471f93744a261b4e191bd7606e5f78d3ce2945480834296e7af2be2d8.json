{"ast":null,"code":"import { MSAA_QUALITY } from '@pixi/constants';\nimport { nextPow2 } from '@pixi/utils';\nimport { BaseRenderTexture } from './BaseRenderTexture.mjs';\nimport { RenderTexture } from './RenderTexture.mjs';\nclass RenderTexturePool {\n  constructor(textureOptions) {\n    this.texturePool = {};\n    this.textureOptions = textureOptions || {};\n    this.enableFullScreen = false;\n    this._pixelsWidth = 0;\n    this._pixelsHeight = 0;\n  }\n  createTexture(realWidth, realHeight) {\n    let multisample = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : MSAA_QUALITY.NONE;\n    const baseRenderTexture = new BaseRenderTexture(Object.assign({\n      width: realWidth,\n      height: realHeight,\n      resolution: 1,\n      multisample\n    }, this.textureOptions));\n    return new RenderTexture(baseRenderTexture);\n  }\n  getOptimalTexture(minWidth, minHeight) {\n    let resolution = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    let multisample = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : MSAA_QUALITY.NONE;\n    let key;\n    minWidth = Math.ceil(minWidth * resolution - 1e-6);\n    minHeight = Math.ceil(minHeight * resolution - 1e-6);\n    if (!this.enableFullScreen || minWidth !== this._pixelsWidth || minHeight !== this._pixelsHeight) {\n      minWidth = nextPow2(minWidth);\n      minHeight = nextPow2(minHeight);\n      key = ((minWidth & 65535) << 16 | minHeight & 65535) >>> 0;\n      if (multisample > 1) {\n        key += multisample * 4294967296;\n      }\n    } else {\n      key = multisample > 1 ? -multisample : -1;\n    }\n    if (!this.texturePool[key]) {\n      this.texturePool[key] = [];\n    }\n    let renderTexture = this.texturePool[key].pop();\n    if (!renderTexture) {\n      renderTexture = this.createTexture(minWidth, minHeight, multisample);\n    }\n    renderTexture.filterPoolKey = key;\n    renderTexture.setResolution(resolution);\n    return renderTexture;\n  }\n  getFilterTexture(input, resolution, multisample) {\n    const filterTexture = this.getOptimalTexture(input.width, input.height, resolution || input.resolution, multisample || MSAA_QUALITY.NONE);\n    filterTexture.filterFrame = input.filterFrame;\n    return filterTexture;\n  }\n  returnTexture(renderTexture) {\n    const key = renderTexture.filterPoolKey;\n    renderTexture.filterFrame = null;\n    this.texturePool[key].push(renderTexture);\n  }\n  returnFilterTexture(renderTexture) {\n    this.returnTexture(renderTexture);\n  }\n  clear(destroyTextures) {\n    destroyTextures = destroyTextures !== false;\n    if (destroyTextures) {\n      for (const i in this.texturePool) {\n        const textures = this.texturePool[i];\n        if (textures) {\n          for (let j = 0; j < textures.length; j++) {\n            textures[j].destroy(true);\n          }\n        }\n      }\n    }\n    this.texturePool = {};\n  }\n  setScreenSize(size) {\n    if (size.width === this._pixelsWidth && size.height === this._pixelsHeight) {\n      return;\n    }\n    this.enableFullScreen = size.width > 0 && size.height > 0;\n    for (const i in this.texturePool) {\n      if (!(Number(i) < 0)) {\n        continue;\n      }\n      const textures = this.texturePool[i];\n      if (textures) {\n        for (let j = 0; j < textures.length; j++) {\n          textures[j].destroy(true);\n        }\n      }\n      this.texturePool[i] = [];\n    }\n    this._pixelsWidth = size.width;\n    this._pixelsHeight = size.height;\n  }\n}\nRenderTexturePool.SCREEN_KEY = -1;\nexport { RenderTexturePool };","map":{"version":3,"mappings":";;;;AAiBO,MAAMA,iBACb;EAkBIC,YAAYC,cACZ;IACI,KAAKC,cAAc,EAAC;IACf,sBAAiBD,kBAAkB,EAAC;IACzC,KAAKE,gBAAmB;IAExB,KAAKC,YAAe;IACpB,KAAKC,aAAgB;EAAA;EASzBC,aAAcA,YAAmBC,UAAoB,EACrD;IAAA,IADqDC,kFAAcC,aAAaC,IAChF;IACI,MAAMC,iBAAoB,OAAIC,iBAAkB,QAAOC,MAAO;MAC1DC,KAAO;MACPC,MAAQ;MACRC,UAAY;MACZR;IAAA,CACJ,EAAG,IAAK,eAAc,CAAC;IAEhB,WAAIS,cAAcN,iBAAiB;EAAA;EAW9CO,kBAAkBC,QAAkB,aACpC;IAAA,IADuDH,iFAAa,CAAG;IAAA,sFAAcP,aAAaC,IAClG;IACQ;IAEJS,WAAWC,IAAK,MAAMD,QAAW,gBAAc,IAAI;IACnDE,YAAYD,IAAK,MAAMC,SAAY,gBAAc,IAAI;IAEjD,KAAC,KAAKlB,gBAAoB,iBAAa,KAAKC,YAAgB,kBAAc,KAAKC,aACnF;MACIc,WAAWG,SAASH,QAAQ;MAC5BE,YAAYC,SAASD,SAAS;MAC9BE,MAAS,CAAW,sBAAW,EAAO,eAAY,KAAa;MAE/D,IAAIf,cAAc,CAClB;QACIe,OAAOf,WAAc;MAAA;IACzB,CAGJ;MACUe,oBAAc,CAAI,IAACf,WAAc;IAAA;IAGvC,KAAC,IAAK,aAAYe,GACtB;MACS,iBAAYA,OAAO,EAAC;IAAA;IAG7B,IAAIC,aAAgB,QAAKtB,WAAY,MAAKuB,GAAI;IAE9C,IAAI,CAACD,aACL;MACIA,gBAAgB,IAAK,eAAcL,QAAU,aAAWX,WAAW;IAAA;IAGvEgB,cAAcE,aAAgB;IAC9BF,cAAcG,cAAcX,UAAU;IAE/B;EAAA;EAYXY,iBAAiBC,KAAsB,cAAqBrB,WAC5D;IACI,MAAMsB,aAAgB,QAAKZ,iBAAkB,OAAMJ,KAAO,QAAMC,MAAQ,gBAAcc,KAAM,aACxFrB,WAAe,iBAAaE,IAAI;IAEpCoB,cAAcC,cAAcF,KAAM;IAE3B;EAAA;EAOXG,cAAcR,aACd;IACI,MAAMD,MAAMC,aAAc;IAE1BA,cAAcO,WAAc;IACvB,iBAAYR,GAAK,OAAKC,aAAa;EAAA;EAO5CS,oBAAoBT,aACpB;IACI,KAAKQ,cAAcR,aAAa;EAAA;EAOpCU,MAAMC,eACN;IACIA,kBAAkBA,eAAoB;IACtC,IAAIA,eACJ;MACe,gBAAK,KAAKjC,WACrB;QACU,iBAAW,KAAKA,WAAY;QAElC,IAAIkC,QACJ;UACI,SAASC,CAAI,MAAGA,CAAI,YAASC,QAAQD,CACrC;YACaD,YAAGG,QAAQ,IAAI;UAAA;QAC5B;MACJ;IACJ;IAGJ,KAAKrC,cAAc,EAAC;EAAA;EAUxBsC,cAAcC,IACd;IACI,IAAIA,KAAK3B,KAAU,UAAKV,gBACjBqC,IAAK,YAAW,KAAKpC,aAC5B;MACI;IAAA;IAGJ,KAAKF,gBAAmB,QAAKW,KAAQ,QAAK2B,KAAK1B,MAAS;IAE7C,gBAAK,KAAKb,WACrB;MACI,IAAI,EAAEwC,OAAOC,CAAC,IAAI,CAClB;QACI;MAAA;MAGE,iBAAW,KAAKzC,WAAY;MAElC,IAAIkC,QACJ;QACI,SAASC,CAAI,MAAGA,CAAI,YAASC,QAAQD,CACrC;UACaD,YAAGG,QAAQ,IAAI;QAAA;MAC5B;MAGC,iBAAYI,KAAK,EAAC;IAAA;IAG3B,KAAKvC,eAAeqC,IAAK;IACzB,KAAKpC,gBAAgBoC,IAAK;EAAA;AAQlC;AAhNa1C,kBA+MF6C,UAAa","names":["RenderTexturePool","constructor","textureOptions","texturePool","enableFullScreen","_pixelsWidth","_pixelsHeight","createTexture","realHeight","multisample","MSAA_QUALITY","NONE","baseRenderTexture","BaseRenderTexture","assign","width","height","resolution","RenderTexture","getOptimalTexture","minWidth","Math","minHeight","nextPow2","key","renderTexture","pop","filterPoolKey","setResolution","getFilterTexture","input","filterTexture","filterFrame","returnTexture","returnFilterTexture","clear","destroyTextures","textures","j","length","destroy","setScreenSize","size","Number","i","SCREEN_KEY"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/core/src/renderTexture/RenderTexturePool.ts"],"sourcesContent":["import { MSAA_QUALITY } from '@pixi/constants';\nimport { nextPow2 } from '@pixi/utils';\nimport { BaseRenderTexture } from './BaseRenderTexture';\nimport { RenderTexture } from './RenderTexture';\n\nimport type { ISize } from '@pixi/math';\nimport type { IBaseTextureOptions } from '../textures/BaseTexture';\n\n/**\n * Texture pool, used by FilterSystem and plugins.\n *\n * Stores collection of temporary pow2 or screen-sized renderTextures\n *\n * If you use custom RenderTexturePool for your filters, you can use methods\n * `getFilterTexture` and `returnFilterTexture` same as in\n * @memberof PIXI\n */\nexport class RenderTexturePool\n{\n    public textureOptions: IBaseTextureOptions;\n\n    /**\n     * Allow renderTextures of the same size as screen, not just pow2\n     *\n     * Automatically sets to true after `setScreenSize`\n     * @default false\n     */\n    public enableFullScreen: boolean;\n    texturePool: {[x in string | number]: RenderTexture[]};\n    private _pixelsWidth: number;\n    private _pixelsHeight: number;\n\n    /**\n     * @param textureOptions - options that will be passed to BaseRenderTexture constructor\n     * @param {PIXI.SCALE_MODES} [textureOptions.scaleMode] - See {@link PIXI.SCALE_MODES} for possible values.\n     */\n    constructor(textureOptions?: IBaseTextureOptions)\n    {\n        this.texturePool = {};\n        this.textureOptions = textureOptions || {};\n        this.enableFullScreen = false;\n\n        this._pixelsWidth = 0;\n        this._pixelsHeight = 0;\n    }\n\n    /**\n     * Creates texture with params that were specified in pool constructor.\n     * @param realWidth - Width of texture in pixels.\n     * @param realHeight - Height of texture in pixels.\n     * @param multisample - Number of samples of the framebuffer.\n     */\n    createTexture(realWidth: number, realHeight: number, multisample = MSAA_QUALITY.NONE): RenderTexture\n    {\n        const baseRenderTexture = new BaseRenderTexture(Object.assign({\n            width: realWidth,\n            height: realHeight,\n            resolution: 1,\n            multisample,\n        }, this.textureOptions));\n\n        return new RenderTexture(baseRenderTexture);\n    }\n\n    /**\n     * Gets a Power-of-Two render texture or fullScreen texture\n     * @param minWidth - The minimum width of the render texture.\n     * @param minHeight - The minimum height of the render texture.\n     * @param resolution - The resolution of the render texture.\n     * @param multisample - Number of samples of the render texture.\n     * @returns The new render texture.\n     */\n    getOptimalTexture(minWidth: number, minHeight: number, resolution = 1, multisample = MSAA_QUALITY.NONE): RenderTexture\n    {\n        let key;\n\n        minWidth = Math.ceil((minWidth * resolution) - 1e-6);\n        minHeight = Math.ceil((minHeight * resolution) - 1e-6);\n\n        if (!this.enableFullScreen || minWidth !== this._pixelsWidth || minHeight !== this._pixelsHeight)\n        {\n            minWidth = nextPow2(minWidth);\n            minHeight = nextPow2(minHeight);\n            key = (((minWidth & 0xFFFF) << 16) | (minHeight & 0xFFFF)) >>> 0;\n\n            if (multisample > 1)\n            {\n                key += multisample * 0x100000000;\n            }\n        }\n        else\n        {\n            key = multisample > 1 ? -multisample : -1;\n        }\n\n        if (!this.texturePool[key])\n        {\n            this.texturePool[key] = [];\n        }\n\n        let renderTexture = this.texturePool[key].pop();\n\n        if (!renderTexture)\n        {\n            renderTexture = this.createTexture(minWidth, minHeight, multisample);\n        }\n\n        renderTexture.filterPoolKey = key;\n        renderTexture.setResolution(resolution);\n\n        return renderTexture;\n    }\n\n    /**\n     * Gets extra texture of the same size as input renderTexture\n     *\n     * `getFilterTexture(input, 0.5)` or `getFilterTexture(0.5, input)`\n     * @param input - renderTexture from which size and resolution will be copied\n     * @param resolution - override resolution of the renderTexture\n     *  It overrides, it does not multiply\n     * @param multisample - number of samples of the renderTexture\n     */\n    getFilterTexture(input: RenderTexture, resolution?: number, multisample?: MSAA_QUALITY): RenderTexture\n    {\n        const filterTexture = this.getOptimalTexture(input.width, input.height, resolution || input.resolution,\n            multisample || MSAA_QUALITY.NONE);\n\n        filterTexture.filterFrame = input.filterFrame;\n\n        return filterTexture;\n    }\n\n    /**\n     * Place a render texture back into the pool.\n     * @param renderTexture - The renderTexture to free\n     */\n    returnTexture(renderTexture: RenderTexture): void\n    {\n        const key = renderTexture.filterPoolKey;\n\n        renderTexture.filterFrame = null;\n        this.texturePool[key].push(renderTexture);\n    }\n\n    /**\n     * Alias for returnTexture, to be compliant with FilterSystem interface.\n     * @param renderTexture - The renderTexture to free\n     */\n    returnFilterTexture(renderTexture: RenderTexture): void\n    {\n        this.returnTexture(renderTexture);\n    }\n\n    /**\n     * Clears the pool.\n     * @param destroyTextures - Destroy all stored textures.\n     */\n    clear(destroyTextures?: boolean): void\n    {\n        destroyTextures = destroyTextures !== false;\n        if (destroyTextures)\n        {\n            for (const i in this.texturePool)\n            {\n                const textures = this.texturePool[i];\n\n                if (textures)\n                {\n                    for (let j = 0; j < textures.length; j++)\n                    {\n                        textures[j].destroy(true);\n                    }\n                }\n            }\n        }\n\n        this.texturePool = {};\n    }\n\n    /**\n     * If screen size was changed, drops all screen-sized textures,\n     * sets new screen size, sets `enableFullScreen` to true\n     *\n     * Size is measured in pixels, `renderer.view` can be passed here, not `renderer.screen`\n     * @param size - Initial size of screen.\n     */\n    setScreenSize(size: ISize): void\n    {\n        if (size.width === this._pixelsWidth\n            && size.height === this._pixelsHeight)\n        {\n            return;\n        }\n\n        this.enableFullScreen = size.width > 0 && size.height > 0;\n\n        for (const i in this.texturePool)\n        {\n            if (!(Number(i) < 0))\n            {\n                continue;\n            }\n\n            const textures = this.texturePool[i];\n\n            if (textures)\n            {\n                for (let j = 0; j < textures.length; j++)\n                {\n                    textures[j].destroy(true);\n                }\n            }\n\n            this.texturePool[i] = [];\n        }\n\n        this._pixelsWidth = size.width;\n        this._pixelsHeight = size.height;\n    }\n\n    /**\n     * Key that is used to store fullscreen renderTextures in a pool\n     * @readonly\n     */\n    static SCREEN_KEY = -1;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}