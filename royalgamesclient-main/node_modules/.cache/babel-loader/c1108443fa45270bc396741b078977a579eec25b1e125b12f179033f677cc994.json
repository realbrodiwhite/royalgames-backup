{"ast":null,"code":"import { ExtensionType, extensions } from '@pixi/core';\nconst assetKeyMap = {\n  loader: ExtensionType.LoadParser,\n  resolver: ExtensionType.ResolveParser,\n  cache: ExtensionType.CacheParser,\n  detection: ExtensionType.DetectionParser\n};\nextensions.handle(ExtensionType.Asset, extension => {\n  const ref = extension.ref;\n  Object.entries(assetKeyMap).filter(_ref => {\n    let [key] = _ref;\n    return !!ref[key];\n  }).forEach(_ref2 => {\n    var _ref$key$extension;\n    let [key, type] = _ref2;\n    return extensions.add(Object.assign(ref[key], {\n      extension: (_ref$key$extension = ref[key].extension) !== null && _ref$key$extension !== void 0 ? _ref$key$extension : type\n    }));\n  });\n}, extension => {\n  const ref = extension.ref;\n  Object.keys(assetKeyMap).filter(key => !!ref[key]).forEach(key => extensions.remove(ref[key]));\n});","map":{"version":3,"mappings":";AAOA,MAAMA,WAAc;EAChBC,QAAQC,aAAc;EACtBC,UAAUD,aAAc;EACxBE,OAAOF,aAAc;EACrBG,WAAWH,aAAc;AAC7B;AAoBAI,WAAWC,MAAO,eAAcC,KAAO,EAACC,SACxC;EACI,MAAMC,MAAMD,SAAU;EAEtBE,OAAOC,OAAQ,YAAW,CACrB,QAAOC;IAAA,IAAC,CAACC,GAAS;IAAA,QAAC,CAACJ,IAAII,GAAiB;EAAA,GACzCC,QAAQC;IAAA;IAAA,IAAC,CAACF,GAAK;IAAA,OAAUR,UAAW,KAAIK,MAAO,QAC5CD,IAAII,GAGJ;MAAEL,SAAW,4BAAIK,GAAkB,8EAAaG;IAAK,CACzD,CAAC,CAAC;EAAA;AACV,GAAIR,SACJ;EACI,MAAMC,MAAMD,SAAU;EAEtBE,OAAOO,KAAKlB,WAAW,EAClBmB,OAAQL,OAAQ,CAAC,CAACJ,IAAII,GAAiB,GACvCC,QAASD,OAAQR,WAAWc,MAAO,KAAIN,IAAiB,CAAC;AAClE,CAAC","names":["assetKeyMap","loader","ExtensionType","resolver","cache","detection","extensions","handle","Asset","extension","ref","Object","entries","_ref","key","forEach","_ref2","type","keys","filter","remove"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/assets/src/AssetExtension.ts"],"sourcesContent":["import { extensions, ExtensionType } from '@pixi/core';\n\nimport type { CacheParser } from './cache';\nimport type { FormatDetectionParser } from './detections';\nimport type { LoaderParser } from './loader';\nimport type { ResolveURLParser } from './resolver';\n\nconst assetKeyMap = {\n    loader: ExtensionType.LoadParser,\n    resolver: ExtensionType.ResolveParser,\n    cache: ExtensionType.CacheParser,\n    detection: ExtensionType.DetectionParser,\n};\n\ntype AssetType = keyof typeof assetKeyMap;\n\n/**\n * This developer convenience object allows developers to group\n * together the various asset parsers into a single object.\n * @memberof PIXI\n */\ninterface AssetExtension<ASSET = any, META_DATA = any>\n{\n    extension: ExtensionType.Asset,\n    loader?: Partial<LoaderParser<ASSET, META_DATA>>,\n    resolver?: Partial<ResolveURLParser>,\n    cache?: Partial<CacheParser<ASSET>>,\n    detection?: Partial<FormatDetectionParser>,\n}\n\n// Split the Asset extension into it's various parts\n// these are handled in the Assets.ts file\nextensions.handle(ExtensionType.Asset, (extension) =>\n{\n    const ref = extension.ref as AssetExtension;\n\n    Object.entries(assetKeyMap)\n        .filter(([key]) => !!ref[key as AssetType])\n        .forEach(([key, type]) => extensions.add(Object.assign(\n            ref[key as AssetType],\n            // Allow the function to optionally define it's own\n            // ExtensionMetadata, the use cases here is priority for LoaderParsers\n            { extension: ref[key as AssetType].extension ?? type },\n        )));\n}, (extension) =>\n{\n    const ref = extension.ref as AssetExtension;\n\n    Object.keys(assetKeyMap)\n        .filter((key) => !!ref[key as AssetType])\n        .forEach((key) => extensions.remove(ref[key as AssetType]));\n});\n\nexport type { AssetExtension };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}