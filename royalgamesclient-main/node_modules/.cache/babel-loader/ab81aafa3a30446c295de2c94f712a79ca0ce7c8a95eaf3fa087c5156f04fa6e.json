{"ast":null,"code":"import { MSAA_QUALITY } from '@pixi/constants';\nimport { ExtensionType, extensions } from '@pixi/extensions';\nclass MultisampleSystem {\n  constructor(renderer) {\n    this.renderer = renderer;\n  }\n  contextChange(gl) {\n    let samples;\n    if (this.renderer.context.webGLVersion === 1) {\n      const framebuffer = gl.getParameter(gl.FRAMEBUFFER_BINDING);\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n      samples = gl.getParameter(gl.SAMPLES);\n      gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n    } else {\n      const framebuffer = gl.getParameter(gl.DRAW_FRAMEBUFFER_BINDING);\n      gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);\n      samples = gl.getParameter(gl.SAMPLES);\n      gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, framebuffer);\n    }\n    if (samples >= MSAA_QUALITY.HIGH) {\n      this.multisample = MSAA_QUALITY.HIGH;\n    } else if (samples >= MSAA_QUALITY.MEDIUM) {\n      this.multisample = MSAA_QUALITY.MEDIUM;\n    } else if (samples >= MSAA_QUALITY.LOW) {\n      this.multisample = MSAA_QUALITY.LOW;\n    } else {\n      this.multisample = MSAA_QUALITY.NONE;\n    }\n  }\n  destroy() {}\n}\nMultisampleSystem.extension = {\n  type: ExtensionType.RendererSystem,\n  name: \"_multisample\"\n};\nextensions.add(MultisampleSystem);\nexport { MultisampleSystem };","map":{"version":3,"mappings":";;AAYO,MAAMA,iBACb;EAeIC,YAAYC,QACZ;IACI,KAAKA,QAAW;EAAA;EAGVC,cAAcC,EACxB;IACQ;IAEJ,IAAI,IAAK,UAASC,OAAQ,kBAAiB,CAC3C;MACI,MAAMC,WAAc,MAAGC,YAAa,IAAGC,mBAAmB;MAEvDJ,mBAAgBA,EAAG,cAAa,IAAI;MAE7BK,aAAGF,YAAa,IAAGG,OAAO;MAEjCN,mBAAgBA,EAAG,cAAaE,WAAW;IAAA,CAGlD;MACI,MAAMA,WAAc,MAAGC,YAAa,IAAGI,wBAAwB;MAE5DP,mBAAgBA,EAAG,mBAAkB,IAAI;MAElCK,aAAGF,YAAa,IAAGG,OAAO;MAEjCN,mBAAgBA,EAAG,mBAAkBE,WAAW;IAAA;IAGnD,eAAWM,aAAaC,IAC5B;MACI,KAAKC,cAAcF,YAAa;IAAA,CACpC,UACSH,OAAW,iBAAaM,MACjC;MACI,KAAKD,cAAcF,YAAa;IAAA,CACpC,UACSH,OAAW,iBAAaO,GACjC;MACI,KAAKF,cAAcF,YAAa;IAAA,CAGpC;MACI,KAAKE,cAAcF,YAAa;IAAA;EACpC;EAGJK,OACAA;AAGJ;AApEajB,kBAGFkB,SAA+B;EAClCC,MAAMC,aAAc;EACpBC,IAAM;AACV;AAgEJC,WAAWC,IAAIvB,iBAAiB","names":["MultisampleSystem","constructor","renderer","contextChange","gl","context","framebuffer","getParameter","FRAMEBUFFER_BINDING","samples","SAMPLES","DRAW_FRAMEBUFFER_BINDING","MSAA_QUALITY","HIGH","multisample","MEDIUM","LOW","destroy","extension","type","ExtensionType","name","extensions","add"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/core/src/framebuffer/MultisampleSystem.ts"],"sourcesContent":["import { MSAA_QUALITY } from '@pixi/constants';\nimport { extensions, ExtensionType } from '@pixi/extensions';\n\nimport type { ExtensionMetadata } from '@pixi/extensions';\nimport type { IRenderingContext } from '../IRenderer';\nimport type { Renderer } from '../Renderer';\nimport type { ISystem } from '../system/ISystem';\n\n/**\n * System that manages the multisample property on the WebGL renderer\n * @memberof PIXI\n */\nexport class MultisampleSystem implements ISystem\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        type: ExtensionType.RendererSystem,\n        name: '_multisample',\n    };\n\n    /**\n     * The number of msaa samples of the canvas.\n     * @readonly\n     */\n    public multisample: MSAA_QUALITY;\n\n    private renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    protected contextChange(gl: IRenderingContext): void\n    {\n        let samples;\n\n        if (this.renderer.context.webGLVersion === 1)\n        {\n            const framebuffer = gl.getParameter(gl.FRAMEBUFFER_BINDING);\n\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n            samples = gl.getParameter(gl.SAMPLES);\n\n            gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n        }\n        else\n        {\n            const framebuffer = gl.getParameter(gl.DRAW_FRAMEBUFFER_BINDING);\n\n            gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);\n\n            samples = gl.getParameter(gl.SAMPLES);\n\n            gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, framebuffer);\n        }\n\n        if (samples >= MSAA_QUALITY.HIGH)\n        {\n            this.multisample = MSAA_QUALITY.HIGH;\n        }\n        else if (samples >= MSAA_QUALITY.MEDIUM)\n        {\n            this.multisample = MSAA_QUALITY.MEDIUM;\n        }\n        else if (samples >= MSAA_QUALITY.LOW)\n        {\n            this.multisample = MSAA_QUALITY.LOW;\n        }\n        else\n        {\n            this.multisample = MSAA_QUALITY.NONE;\n        }\n    }\n\n    destroy(): void\n    {\n        // ka boom!\n    }\n}\n\nextensions.add(MultisampleSystem);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}