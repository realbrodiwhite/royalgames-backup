{"ast":null,"code":"import { MeshGeometry } from '@pixi/mesh';\nclass PlaneGeometry extends MeshGeometry {\n  constructor() {\n    let width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n    let height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n    let segWidth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;\n    let segHeight = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 10;\n    super();\n    this.segWidth = segWidth;\n    this.segHeight = segHeight;\n    this.width = width;\n    this.height = height;\n    this.build();\n  }\n  build() {\n    const total = this.segWidth * this.segHeight;\n    const verts = [];\n    const uvs = [];\n    const indices = [];\n    const segmentsX = this.segWidth - 1;\n    const segmentsY = this.segHeight - 1;\n    const sizeX = this.width / segmentsX;\n    const sizeY = this.height / segmentsY;\n    for (let i = 0; i < total; i++) {\n      const x = i % this.segWidth;\n      const y = i / this.segWidth | 0;\n      verts.push(x * sizeX, y * sizeY);\n      uvs.push(x / segmentsX, y / segmentsY);\n    }\n    const totalSub = segmentsX * segmentsY;\n    for (let i = 0; i < totalSub; i++) {\n      const xpos = i % segmentsX;\n      const ypos = i / segmentsX | 0;\n      const value = ypos * this.segWidth + xpos;\n      const value2 = ypos * this.segWidth + xpos + 1;\n      const value3 = (ypos + 1) * this.segWidth + xpos;\n      const value4 = (ypos + 1) * this.segWidth + xpos + 1;\n      indices.push(value, value2, value3, value2, value4, value3);\n    }\n    this.buffers[0].data = new Float32Array(verts);\n    this.buffers[1].data = new Float32Array(uvs);\n    this.indexBuffer.data = new Uint16Array(indices);\n    this.buffers[0].update();\n    this.buffers[1].update();\n    this.indexBuffer.update();\n  }\n}\nexport { PlaneGeometry };","map":{"version":3,"mappings":";AAKO,MAAMA,sBAAsBC,YACnC;EAYIC,cACA;IAAA,IADYC,4EAAQ,GAAK;IAAA,iFAAS;IAAA,IAAKC,QAAW;IAAA,IAAIC,gFAAY,EAClE;IACU;IAEN,KAAKD,QAAW;IAChB,KAAKC,SAAY;IAEjB,KAAKF,KAAQ;IACb,KAAKG,MAAS;IAEd,KAAKC,KAAM;EAAA;EAOfA,KACAA;IACU,cAAQ,IAAK,YAAW,IAAK;IACnC,MAAMC,QAAQ,EAAC;IACf,MAAMC,MAAM,EAAC;IACb,MAAMC,UAAU,EAAC;IAEX,kBAAY,KAAKN,QAAW;IAC5B,kBAAY,KAAKC,SAAY;IAE7B,cAAS,KAAKF,KAAS;IACvB,cAAS,KAAKG,MAAU;IAE9B,SAASK,CAAI,MAAGA,CAAI,UAAOA,CAC3B;MACU,UAAKA,IAAI,IAAK;MACd,UAAMA,CAAI,QAAKP,QAAY;MAEjCI,MAAMI,IAAK,KAAIC,KAAO,MAAIC,KAAK;MAC/BL,IAAIG,IAAK,KAAIG,SAAW,MAAIC,SAAS;IAAA;IAGzC,MAAMC,WAAWF,SAAY;IAE7B,SAASJ,CAAI,MAAGA,CAAI,aAAUA,CAC9B;MACI,MAAMO,OAAOP,CAAI;MACX,aAAQA,IAAII,SAAa;MAEzB,cAASI,IAAO,QAAKf,QAAY;MACvC,MAAMgB,MAAU,UAAO,IAAK,YAAYF,IAAO;MAC/C,MAAMG,MAAW,WAAO,CAAK,SAAKjB,QAAY;MAC9C,MAAMkB,MAAW,WAAO,CAAK,SAAKlB,WAAYc,IAAO;MAErDR,QAAQE,KAAKW,KAAO,UAAQF,MACxB,UAAQC,QAAQD,MAAM;IAAA;IAG9B,KAAKG,OAAQ,IAAGC,IAAO,OAAIC,aAAalB,KAAK;IAC7C,KAAKgB,OAAQ,IAAGC,IAAO,OAAIC,aAAajB,GAAG;IAC3C,KAAKkB,WAAY,QAAO,IAAIC,YAAYlB,OAAO;IAG1C,aAAQ,GAAGmB,MAAO;IAClB,aAAQ,GAAGA,MAAO;IACvB,KAAKF,YAAYE,MAAO;EAAA;AAEhC","names":["PlaneGeometry","MeshGeometry","constructor","width","segWidth","segHeight","height","build","verts","uvs","indices","i","push","sizeX","sizeY","segmentsX","segmentsY","totalSub","xpos","ypos","value2","value3","value4","value","buffers","data","Float32Array","indexBuffer","Uint16Array","update"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/mesh-extras/src/geometry/PlaneGeometry.ts"],"sourcesContent":["import { MeshGeometry } from '@pixi/mesh';\n\n/**\n * @memberof PIXI\n */\nexport class PlaneGeometry extends MeshGeometry\n{\n    public segWidth: number;\n    public segHeight: number;\n    public width: number;\n    public height: number;\n\n    /**\n     * @param width - The width of the plane.\n     * @param height - The height of the plane.\n     * @param segWidth - Number of horizontal segments.\n     * @param segHeight - Number of vertical segments.\n     */\n    constructor(width = 100, height = 100, segWidth = 10, segHeight = 10)\n    {\n        super();\n\n        this.segWidth = segWidth;\n        this.segHeight = segHeight;\n\n        this.width = width;\n        this.height = height;\n\n        this.build();\n    }\n\n    /**\n     * Refreshes plane coordinates\n     * @private\n     */\n    build(): void\n    {\n        const total = this.segWidth * this.segHeight;\n        const verts = [];\n        const uvs = [];\n        const indices = [];\n\n        const segmentsX = this.segWidth - 1;\n        const segmentsY = this.segHeight - 1;\n\n        const sizeX = (this.width) / segmentsX;\n        const sizeY = (this.height) / segmentsY;\n\n        for (let i = 0; i < total; i++)\n        {\n            const x = (i % this.segWidth);\n            const y = ((i / this.segWidth) | 0);\n\n            verts.push(x * sizeX, y * sizeY);\n            uvs.push(x / segmentsX, y / segmentsY);\n        }\n\n        const totalSub = segmentsX * segmentsY;\n\n        for (let i = 0; i < totalSub; i++)\n        {\n            const xpos = i % segmentsX;\n            const ypos = (i / segmentsX) | 0;\n\n            const value = (ypos * this.segWidth) + xpos;\n            const value2 = (ypos * this.segWidth) + xpos + 1;\n            const value3 = ((ypos + 1) * this.segWidth) + xpos;\n            const value4 = ((ypos + 1) * this.segWidth) + xpos + 1;\n\n            indices.push(value, value2, value3,\n                value2, value4, value3);\n        }\n\n        this.buffers[0].data = new Float32Array(verts);\n        this.buffers[1].data = new Float32Array(uvs);\n        this.indexBuffer.data = new Uint16Array(indices);\n\n        // ensure that the changes are uploaded\n        this.buffers[0].update();\n        this.buffers[1].update();\n        this.indexBuffer.update();\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}