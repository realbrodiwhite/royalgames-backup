{"ast":null,"code":"import { GLProgram } from '../GLProgram.mjs';\nimport { compileShader } from './compileShader.mjs';\nimport { defaultValue } from './defaultValue.mjs';\nimport { getAttributeData } from './getAttributeData.mjs';\nimport { getUniformData } from './getUniformData.mjs';\nimport { logProgramError } from './logProgramError.mjs';\nfunction generateProgram(gl, program) {\n  var _program$extra;\n  const glVertShader = compileShader(gl, gl.VERTEX_SHADER, program.vertexSrc);\n  const glFragShader = compileShader(gl, gl.FRAGMENT_SHADER, program.fragmentSrc);\n  const webGLProgram = gl.createProgram();\n  gl.attachShader(webGLProgram, glVertShader);\n  gl.attachShader(webGLProgram, glFragShader);\n  const transformFeedbackVaryings = (_program$extra = program.extra) === null || _program$extra === void 0 ? void 0 : _program$extra.transformFeedbackVaryings;\n  if (transformFeedbackVaryings) {\n    if (typeof gl.transformFeedbackVaryings !== \"function\") {\n      console.warn(\"TransformFeedback is not supported but TransformFeedbackVaryings are given.\");\n    } else {\n      gl.transformFeedbackVaryings(webGLProgram, transformFeedbackVaryings.names, transformFeedbackVaryings.bufferMode === \"separate\" ? gl.SEPARATE_ATTRIBS : gl.INTERLEAVED_ATTRIBS);\n    }\n  }\n  gl.linkProgram(webGLProgram);\n  if (!gl.getProgramParameter(webGLProgram, gl.LINK_STATUS)) {\n    logProgramError(gl, webGLProgram, glVertShader, glFragShader);\n  }\n  program.attributeData = getAttributeData(webGLProgram, gl);\n  program.uniformData = getUniformData(webGLProgram, gl);\n  if (!/^[ \\t]*#[ \\t]*version[ \\t]+300[ \\t]+es[ \\t]*$/m.test(program.vertexSrc)) {\n    const keys = Object.keys(program.attributeData);\n    keys.sort((a, b) => a > b ? 1 : -1);\n    for (let i = 0; i < keys.length; i++) {\n      program.attributeData[keys[i]].location = i;\n      gl.bindAttribLocation(webGLProgram, i, keys[i]);\n    }\n    gl.linkProgram(webGLProgram);\n  }\n  gl.deleteShader(glVertShader);\n  gl.deleteShader(glFragShader);\n  const uniformData = {};\n  for (const i in program.uniformData) {\n    const data = program.uniformData[i];\n    uniformData[i] = {\n      location: gl.getUniformLocation(webGLProgram, i),\n      value: defaultValue(data.type, data.size)\n    };\n  }\n  const glProgram = new GLProgram(webGLProgram, uniformData);\n  return glProgram;\n}\nexport { generateProgram };","map":{"version":3,"mappings":";;;;;;AAgBO,yBAAyBA,IAAuBC,OACvD;EAAA;EACI,MAAMC,eAAeC,aAAc,KAAIH,EAAG,gBAAeC,QAAQG,SAAS;EAC1E,MAAMC,eAAeF,aAAc,KAAIH,EAAG,kBAAiBC,QAAQK,WAAW;EAExE,qBAAeN,GAAGO,aAAc;EAEnCP,gBAAaQ,cAAcN,YAAY;EACvCF,gBAAaQ,cAAcH,YAAY;EAEpC,oDAA4BJ,QAAQQ,KAAO,mDAAfC,eAAeC;EAEjD,IAAIA,yBACJ;IACQ,WAAOX,EAAG,+BAA8B,UAC5C;MAEIY,QAAQC,kFAAkF;IAAA,CAI9F;MACOb,6BACCQ,YACA,4BAA0BM,KAC1B,4BAA0BC,eAAe,UACnC,MAAGC,gBACH,MAAGC,mBACb;IAAA;EACJ;EAGJjB,GAAGkB,YAAYV,YAAY;EAE3B,IAAI,CAACR,EAAG,qBAAoBQ,YAAc,KAAGW,WAAW,CACxD;IACoBC,oBAAIZ,YAAc,gBAAcH,YAAY;EAAA;EAGxDJ,wBAAgBoB,gBAAiB,eAAcrB,EAAE;EACjDC,sBAAcqB,cAAe,eAActB,EAAE;EAKrD,IAAI,CAAE,iDAAkDuB,IAAK,SAAQnB,SAAS,CAC9E;IACI,MAAMoB,IAAO,UAAOA,IAAK,SAAQC,aAAa;IAE9CD,KAAKE,KAAK,CAACC,GAAGC,MAAOD,CAAI,OAAK,IAAI,CAAE;IAEpC,SAASE,CAAI,MAAGA,CAAI,QAAKC,QAAQD,CACjC;MACY5B,sBAAcuB,IAAK,KAAIO,QAAW;MAE1C/B,GAAGgC,kBAAmB,eAAcH,CAAG,OAAKA,CAAE;IAAA;IAGlD7B,GAAGkB,YAAYV,YAAY;EAAA;EAG/BR,GAAGiC,aAAa/B,YAAY;EAC5BF,GAAGiC,aAAa5B,YAAY;EAE5B,MAAM6B,cAA+C,EAAC;EAE3C,gBAAKjC,QAAQiC,WACxB;IACU,aAAOjC,QAAQiC,WAAY;IAEjCA,YAAYL,CAAK;MACbE,QAAU,KAAGI,kBAAmB,eAAcN,CAAC;MAC/CO,KAAO,eAAaC,IAAK,OAAMA,KAAKC,IAAI;IAAA,CAC5C;EAAA;EAGJ,MAAMC,SAAY,OAAIC,SAAU,eAAcN,WAAW;EAElD;AACX","names":["gl","program","glVertShader","compileShader","vertexSrc","glFragShader","fragmentSrc","createProgram","webGLProgram","extra","_program$extra","transformFeedbackVaryings","console","warn","names","bufferMode","SEPARATE_ATTRIBS","INTERLEAVED_ATTRIBS","linkProgram","LINK_STATUS","logProgramError","getAttributeData","getUniformData","test","keys","attributeData","sort","a","b","i","length","location","bindAttribLocation","deleteShader","uniformData","getUniformLocation","value","data","size","glProgram","GLProgram"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/core/src/shader/utils/generateProgram.ts"],"sourcesContent":["import { GLProgram } from '../GLProgram';\nimport { compileShader } from './compileShader';\nimport { defaultValue } from './defaultValue';\nimport { getAttributeData } from './getAttributeData';\nimport { getUniformData } from './getUniformData';\nimport { logProgramError } from './logProgramError';\n\nimport type { IRenderingContext } from '../../IRenderer';\nimport type { IGLUniformData } from '../GLProgram';\nimport type { Program } from '../Program';\n\n/**\n * generates a WebGL Program object from a high level Pixi Program.\n * @param gl - a rendering context on which to generate the program\n * @param program - the high level Pixi Program.\n */\nexport function generateProgram(gl: IRenderingContext, program: Program): GLProgram\n{\n    const glVertShader = compileShader(gl, gl.VERTEX_SHADER, program.vertexSrc);\n    const glFragShader = compileShader(gl, gl.FRAGMENT_SHADER, program.fragmentSrc);\n\n    const webGLProgram = gl.createProgram();\n\n    gl.attachShader(webGLProgram, glVertShader);\n    gl.attachShader(webGLProgram, glFragShader);\n\n    const transformFeedbackVaryings = program.extra?.transformFeedbackVaryings;\n\n    if (transformFeedbackVaryings)\n    {\n        if (typeof gl.transformFeedbackVaryings !== 'function')\n        {\n            // #if _DEBUG\n            console.warn(`TransformFeedback is not supported but TransformFeedbackVaryings are given.`);\n            // #endif\n        }\n        else\n        {\n            gl.transformFeedbackVaryings(\n                webGLProgram,\n                transformFeedbackVaryings.names,\n                transformFeedbackVaryings.bufferMode === 'separate'\n                    ? gl.SEPARATE_ATTRIBS\n                    : gl.INTERLEAVED_ATTRIBS\n            );\n        }\n    }\n\n    gl.linkProgram(webGLProgram);\n\n    if (!gl.getProgramParameter(webGLProgram, gl.LINK_STATUS))\n    {\n        logProgramError(gl, webGLProgram, glVertShader, glFragShader);\n    }\n\n    program.attributeData = getAttributeData(webGLProgram, gl);\n    program.uniformData = getUniformData(webGLProgram, gl);\n\n    // GLSL 1.00: bind attributes sorted by name in ascending order\n    // GLSL 3.00: don't change the attribute locations that where chosen by the compiler\n    //            or assigned by the layout specifier in the shader source code\n    if (!(/^[ \\t]*#[ \\t]*version[ \\t]+300[ \\t]+es[ \\t]*$/m).test(program.vertexSrc))\n    {\n        const keys = Object.keys(program.attributeData);\n\n        keys.sort((a, b) => (a > b) ? 1 : -1); // eslint-disable-line no-confusing-arrow\n\n        for (let i = 0; i < keys.length; i++)\n        {\n            program.attributeData[keys[i]].location = i;\n\n            gl.bindAttribLocation(webGLProgram, i, keys[i]);\n        }\n\n        gl.linkProgram(webGLProgram);\n    }\n\n    gl.deleteShader(glVertShader);\n    gl.deleteShader(glFragShader);\n\n    const uniformData: {[key: string]: IGLUniformData} = {};\n\n    for (const i in program.uniformData)\n    {\n        const data = program.uniformData[i];\n\n        uniformData[i] = {\n            location: gl.getUniformLocation(webGLProgram, i),\n            value: defaultValue(data.type, data.size),\n        };\n    }\n\n    const glProgram = new GLProgram(webGLProgram, uniformData);\n\n    return glProgram;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}