{"ast":null,"code":"import { ExtensionType, extensions } from '@pixi/extensions';\nclass StartupSystem {\n  constructor(renderer) {\n    this.renderer = renderer;\n  }\n  run(options) {\n    const renderer = this.renderer;\n    renderer.emitWithCustomOptions(renderer.runners.init, options);\n    if (options.hello) {\n      console.log(\"PixiJS \".concat(\"7.1.2\", \" - \", renderer.rendererLogId, \" - https://pixijs.com\"));\n    }\n    renderer.resize(this.renderer.screen.width, this.renderer.screen.height);\n  }\n  destroy() {}\n}\nStartupSystem.extension = {\n  type: [ExtensionType.RendererSystem, ExtensionType.CanvasRendererSystem],\n  name: \"startup\"\n};\nextensions.add(StartupSystem);\nexport { StartupSystem };","map":{"version":3,"mappings":";AAuBU,MAAMA,aAChB;EAYIC,YAAYC,QACZ;IACI,KAAKA,QAAW;EAAA;EAOpBC,IAAIC,OACJ;IACI,MAAMF,WAAW,IAAK;IAEtBA,SAASG,qBAAsB,UAASC,OAAQ,OAAMF,OAAO;IAE7D,IAAIA,QAAQG,KACZ;MAEIC,QAAQC,GAAI,kBAAU,OAAiB,kBAASC,aAAoC;IAAA;IAG/ER,gBAAO,KAAKA,QAAS,QAAOS,OAAO,IAAK,UAASC,OAAOC,MAAM;EAAA;EAG3EC,OACAA;AAGJ;AAzCgBd,cAGLe,SAA+B;EAClCC,IAAM,GACFC,aAAc,iBACdA,aAAc,sBAClB;EACAC,IAAM;AACV;AAkCJC,WAAWC,IAAIpB,aAAa","names":["StartupSystem","constructor","renderer","run","options","emitWithCustomOptions","runners","hello","console","log","rendererLogId","width","screen","height","destroy","extension","type","ExtensionType","name","extensions","add"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/core/src/startup/StartupSystem.ts"],"sourcesContent":["import { extensions, ExtensionType } from '@pixi/extensions';\n\nimport type { ExtensionMetadata } from '@pixi/extensions';\nimport type { BackgroundOptions } from '../background/BackgroundSystem';\nimport type { IRenderer } from '../IRenderer';\nimport type { IRendererPlugins } from '../plugin/PluginSystem';\nimport type { ISystem } from '../system/ISystem';\nimport type { ContextOptions } from '../systems';\nimport type { ViewOptions } from '../view/ViewSystem';\n\n// TODO this can be infered by good use of generics in the future..\nexport interface StartupOptions extends Record<string, unknown>\n{\n    hello: boolean;\n    _plugin: IRendererPlugins,\n    background: BackgroundOptions,\n    _view: ViewOptions,\n    context?: ContextOptions\n}\n\n/**\n * A simple system responsible for initiating the renderer.\n * @memberof PIXI\n */export class StartupSystem implements ISystem\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        type: [\n            ExtensionType.RendererSystem,\n            ExtensionType.CanvasRendererSystem\n        ],\n        name: 'startup',\n    };\n\n    readonly renderer: IRenderer;\n\n    constructor(renderer: IRenderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * It all starts here! This initiates every system, passing in the options for any system by name.\n     * @param options - the config for the renderer and all its systems\n     */\n    run(options: StartupOptions): void\n    {\n        const renderer = this.renderer;\n\n        renderer.emitWithCustomOptions(renderer.runners.init, options);\n\n        if (options.hello)\n        {\n            // eslint-disable-next-line no-console\n            console.log(`PixiJS ${'$_VERSION'} - ${renderer.rendererLogId} - https://pixijs.com`);\n        }\n\n        renderer.resize(this.renderer.screen.width, this.renderer.screen.height);\n    }\n\n    destroy(): void\n    {\n        // ka pow!\n    }\n}\n\nextensions.add(StartupSystem);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}