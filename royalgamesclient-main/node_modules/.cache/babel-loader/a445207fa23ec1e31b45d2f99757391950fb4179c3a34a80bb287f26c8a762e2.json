{"ast":null,"code":"import { LoaderParserPriority, copySearchParams } from '@pixi/assets';\nimport { utils, ExtensionType, settings, extensions } from '@pixi/core';\nimport { Spritesheet } from './Spritesheet.mjs';\nconst validImages = [\"jpg\", \"png\", \"jpeg\", \"avif\", \"webp\"];\nfunction getCacheableAssets(keys, asset, ignoreMultiPack) {\n  const out = {};\n  keys.forEach(key => {\n    out[key] = asset;\n  });\n  Object.keys(asset.textures).forEach(key => {\n    out[key] = asset.textures[key];\n  });\n  if (!ignoreMultiPack) {\n    const basePath = utils.path.dirname(keys[0]);\n    asset.linkedSheets.forEach((item, i) => {\n      const out2 = getCacheableAssets([\"\".concat(basePath, \"/\").concat(asset.data.meta.related_multi_packs[i])], item, true);\n      Object.assign(out, out2);\n    });\n  }\n  return out;\n}\nconst spritesheetAsset = {\n  extension: ExtensionType.Asset,\n  cache: {\n    test: asset => asset instanceof Spritesheet,\n    getCacheableAssets: (keys, asset) => getCacheableAssets(keys, asset, false)\n  },\n  resolver: {\n    test: value => {\n      const tempURL = value.split(\"?\")[0];\n      const split = tempURL.split(\".\");\n      const extension = split.pop();\n      const format = split.pop();\n      return extension === \"json\" && validImages.includes(format);\n    },\n    parse: value => {\n      var _settings$RETINA_PREF, _settings$RETINA_PREF2;\n      const split = value.split(\".\");\n      return {\n        resolution: parseFloat((_settings$RETINA_PREF = (_settings$RETINA_PREF2 = settings.RETINA_PREFIX.exec(value)) === null || _settings$RETINA_PREF2 === void 0 ? void 0 : _settings$RETINA_PREF2[1]) !== null && _settings$RETINA_PREF !== void 0 ? _settings$RETINA_PREF : \"1\"),\n        format: split[split.length - 2],\n        src: value\n      };\n    }\n  },\n  loader: {\n    extension: {\n      type: ExtensionType.LoadParser,\n      priority: LoaderParserPriority.Normal\n    },\n    async testParse(asset, options) {\n      return utils.path.extname(options.src).toLowerCase() === \".json\" && !!asset.frames;\n    },\n    async parse(asset, options, loader) {\n      var _asset$meta;\n      let basePath = utils.path.dirname(options.src);\n      if (basePath && basePath.lastIndexOf(\"/\") !== basePath.length - 1) {\n        basePath += \"/\";\n      }\n      let imagePath = basePath + asset.meta.image;\n      imagePath = copySearchParams(imagePath, options.src);\n      const assets = await loader.load([imagePath]);\n      const texture = assets[imagePath];\n      const spritesheet = new Spritesheet(texture.baseTexture, asset, options.src);\n      await spritesheet.parse();\n      const multiPacks = asset === null || asset === void 0 ? void 0 : (_asset$meta = asset.meta) === null || _asset$meta === void 0 ? void 0 : _asset$meta.related_multi_packs;\n      if (Array.isArray(multiPacks)) {\n        const promises = [];\n        for (const item of multiPacks) {\n          var _options$data;\n          if (typeof item !== \"string\") {\n            continue;\n          }\n          let itemUrl = basePath + item;\n          if ((_options$data = options.data) !== null && _options$data !== void 0 && _options$data.ignoreMultiPack) {\n            continue;\n          }\n          itemUrl = copySearchParams(itemUrl, options.src);\n          promises.push(loader.load({\n            src: itemUrl,\n            data: {\n              ignoreMultiPack: true\n            }\n          }));\n        }\n        const res = await Promise.all(promises);\n        spritesheet.linkedSheets = res;\n        res.forEach(item => {\n          item.linkedSheets = [spritesheet].concat(spritesheet.linkedSheets.filter(sp => sp !== item));\n        });\n      }\n      return spritesheet;\n    },\n    unload(spritesheet) {\n      spritesheet.destroy(true);\n    }\n  }\n};\nextensions.add(spritesheetAsset);\nexport { spritesheetAsset };","map":{"version":3,"mappings":"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","names":["validImages","getCacheableAssets","asset","ignoreMultiPack","out","keys","key","Object","textures","basePath","path","linkedSheets","item","i","out2","data","related_multi_packs","spritesheetAsset","extension","ExtensionType","cache","test","resolver","value","tempURL","split","pop","format","parse","resolution","parseFloat","settings","exec","_settings$RETINA_PREF2","length","src","loader","type","priority","LoaderParserPriority","testParse","options","meta","imagePath","assets","load","texture","spritesheet","Spritesheet","baseTexture","_asset$meta","isArray","promises","multiPacks","itemUrl","_options$data","res","Promise","concat","sp","unload","destroy","extensions","add"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/spritesheet/src/spritesheetAsset.ts"],"sourcesContent":["import { copySearchParams, LoaderParserPriority } from '@pixi/assets';\nimport { extensions, ExtensionType, settings, utils } from '@pixi/core';\nimport { Spritesheet } from './Spritesheet';\n\nimport type { AssetExtension, LoadAsset, Loader, ResolveAsset } from '@pixi/assets';\nimport type { Texture } from '@pixi/core';\nimport type { ISpritesheetData } from './Spritesheet';\n\ninterface SpriteSheetJson extends ISpritesheetData\n{\n    meta: {\n        image: string;\n        scale: string;\n        // eslint-disable-next-line camelcase\n        related_multi_packs?: string[];\n    };\n}\n\nconst validImages = ['jpg', 'png', 'jpeg', 'avif', 'webp'];\n\nfunction getCacheableAssets(keys: string[], asset: Spritesheet, ignoreMultiPack: boolean)\n{\n    const out: Record<string, any> = {};\n\n    keys.forEach((key: string) =>\n    {\n        out[key] = asset;\n    });\n\n    Object.keys(asset.textures).forEach((key) =>\n    {\n        out[key] = asset.textures[key];\n    });\n\n    if (!ignoreMultiPack)\n    {\n        const basePath = utils.path.dirname(keys[0]);\n\n        asset.linkedSheets.forEach((item: Spritesheet, i) =>\n        {\n            const out2 = getCacheableAssets([`${basePath}/${asset.data.meta.related_multi_packs[i]}`], item, true);\n\n            Object.assign(out, out2);\n        });\n    }\n\n    return out;\n}\n\n/**\n * Asset extension for loading spritesheets.\n * @memberof PIXI\n */\nexport const spritesheetAsset = {\n    extension: ExtensionType.Asset,\n    /** Handle the caching of the related Spritesheet Textures */\n    cache: {\n        test: (asset: Spritesheet) => asset instanceof Spritesheet,\n        getCacheableAssets: (keys: string[], asset: Spritesheet) => getCacheableAssets(keys, asset, false),\n    },\n    /** Resolve the the resolution of the asset. */\n    resolver: {\n        test: (value: string): boolean =>\n        {\n            const tempURL = value.split('?')[0];\n            const split = tempURL.split('.');\n            const extension = split.pop();\n            const format = split.pop();\n\n            return extension === 'json' && validImages.includes(format);\n        },\n        parse: (value: string): ResolveAsset =>\n        {\n            const split = value.split('.');\n\n            return {\n                resolution: parseFloat(settings.RETINA_PREFIX.exec(value)?.[1] ?? '1'),\n                format: split[split.length - 2],\n                src: value,\n            };\n        },\n    },\n    /**\n     * Loader plugin that parses sprite sheets!\n     * once the JSON has been loaded this checks to see if the JSON is spritesheet data.\n     * If it is, we load the spritesheets image and parse the data into PIXI.Spritesheet\n     * All textures in the sprite sheet are then added to the cache\n     * @ignore\n     */\n    loader: {\n        extension: {\n            type: ExtensionType.LoadParser,\n            priority: LoaderParserPriority.Normal,\n        },\n\n        async testParse(asset: SpriteSheetJson, options: LoadAsset): Promise<boolean>\n        {\n            return (utils.path.extname(options.src).toLowerCase() === '.json' && !!asset.frames);\n        },\n\n        async parse(asset: SpriteSheetJson, options: LoadAsset, loader: Loader): Promise<Spritesheet>\n        {\n            let basePath = utils.path.dirname(options.src);\n\n            if (basePath && basePath.lastIndexOf('/') !== (basePath.length - 1))\n            {\n                basePath += '/';\n            }\n\n            let imagePath = basePath + asset.meta.image;\n\n            imagePath = copySearchParams(imagePath, options.src);\n\n            const assets = await loader.load<Texture>([imagePath]);\n            const texture = assets[imagePath];\n            const spritesheet = new Spritesheet(\n                texture.baseTexture,\n                asset,\n                options.src,\n            );\n\n            await spritesheet.parse();\n\n            // Check and add the multi atlas\n            // Heavily influenced and based on https://github.com/rocket-ua/pixi-tps-loader/blob/master/src/ResourceLoader.js\n            // eslint-disable-next-line camelcase\n            const multiPacks = asset?.meta?.related_multi_packs;\n\n            if (Array.isArray(multiPacks))\n            {\n                const promises: Promise<Spritesheet>[] = [];\n\n                for (const item of multiPacks)\n                {\n                    if (typeof item !== 'string')\n                    {\n                        continue;\n                    }\n\n                    let itemUrl = basePath + item;\n\n                    // Check if the file wasn't already added as multipack\n                    if (options.data?.ignoreMultiPack)\n                    {\n                        continue;\n                    }\n\n                    itemUrl = copySearchParams(itemUrl, options.src);\n\n                    promises.push(loader.load<Spritesheet>({\n                        src: itemUrl,\n                        data: {\n                            ignoreMultiPack: true,\n                        }\n                    }));\n                }\n\n                const res = await Promise.all(promises);\n\n                spritesheet.linkedSheets = res;\n                res.forEach((item) =>\n                {\n                    item.linkedSheets = [spritesheet].concat(spritesheet.linkedSheets.filter((sp) => (sp !== item)));\n                });\n            }\n\n            return spritesheet;\n        },\n\n        unload(spritesheet: Spritesheet)\n        {\n            spritesheet.destroy(true);\n        },\n    },\n} as AssetExtension<Spritesheet | SpriteSheetJson>;\n\nextensions.add(spritesheetAsset);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}