{"ast":null,"code":"import { PI_2 } from './const.mjs';\nimport { Point } from './Point.mjs';\nclass Matrix {\n  constructor() {\n    let a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    let tx = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n    let ty = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n    this.array = null;\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.d = d;\n    this.tx = tx;\n    this.ty = ty;\n  }\n  fromArray(array) {\n    this.a = array[0];\n    this.b = array[1];\n    this.c = array[3];\n    this.d = array[4];\n    this.tx = array[2];\n    this.ty = array[5];\n  }\n  set(a, b, c, d, tx, ty) {\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.d = d;\n    this.tx = tx;\n    this.ty = ty;\n    return this;\n  }\n  toArray(transpose, out) {\n    if (!this.array) {\n      this.array = new Float32Array(9);\n    }\n    const array = out || this.array;\n    if (transpose) {\n      array[0] = this.a;\n      array[1] = this.b;\n      array[2] = 0;\n      array[3] = this.c;\n      array[4] = this.d;\n      array[5] = 0;\n      array[6] = this.tx;\n      array[7] = this.ty;\n      array[8] = 1;\n    } else {\n      array[0] = this.a;\n      array[1] = this.c;\n      array[2] = this.tx;\n      array[3] = this.b;\n      array[4] = this.d;\n      array[5] = this.ty;\n      array[6] = 0;\n      array[7] = 0;\n      array[8] = 1;\n    }\n    return array;\n  }\n  apply(pos, newPos) {\n    newPos = newPos || new Point();\n    const x = pos.x;\n    const y = pos.y;\n    newPos.x = this.a * x + this.c * y + this.tx;\n    newPos.y = this.b * x + this.d * y + this.ty;\n    return newPos;\n  }\n  applyInverse(pos, newPos) {\n    newPos = newPos || new Point();\n    const id = 1 / (this.a * this.d + this.c * -this.b);\n    const x = pos.x;\n    const y = pos.y;\n    newPos.x = this.d * id * x + -this.c * id * y + (this.ty * this.c - this.tx * this.d) * id;\n    newPos.y = this.a * id * y + -this.b * id * x + (-this.ty * this.a + this.tx * this.b) * id;\n    return newPos;\n  }\n  translate(x, y) {\n    this.tx += x;\n    this.ty += y;\n    return this;\n  }\n  scale(x, y) {\n    this.a *= x;\n    this.d *= y;\n    this.c *= x;\n    this.b *= y;\n    this.tx *= x;\n    this.ty *= y;\n    return this;\n  }\n  rotate(angle) {\n    const cos = Math.cos(angle);\n    const sin = Math.sin(angle);\n    const a1 = this.a;\n    const c1 = this.c;\n    const tx1 = this.tx;\n    this.a = a1 * cos - this.b * sin;\n    this.b = a1 * sin + this.b * cos;\n    this.c = c1 * cos - this.d * sin;\n    this.d = c1 * sin + this.d * cos;\n    this.tx = tx1 * cos - this.ty * sin;\n    this.ty = tx1 * sin + this.ty * cos;\n    return this;\n  }\n  append(matrix) {\n    const a1 = this.a;\n    const b1 = this.b;\n    const c1 = this.c;\n    const d1 = this.d;\n    this.a = matrix.a * a1 + matrix.b * c1;\n    this.b = matrix.a * b1 + matrix.b * d1;\n    this.c = matrix.c * a1 + matrix.d * c1;\n    this.d = matrix.c * b1 + matrix.d * d1;\n    this.tx = matrix.tx * a1 + matrix.ty * c1 + this.tx;\n    this.ty = matrix.tx * b1 + matrix.ty * d1 + this.ty;\n    return this;\n  }\n  setTransform(x, y, pivotX, pivotY, scaleX, scaleY, rotation, skewX, skewY) {\n    this.a = Math.cos(rotation + skewY) * scaleX;\n    this.b = Math.sin(rotation + skewY) * scaleX;\n    this.c = -Math.sin(rotation - skewX) * scaleY;\n    this.d = Math.cos(rotation - skewX) * scaleY;\n    this.tx = x - (pivotX * this.a + pivotY * this.c);\n    this.ty = y - (pivotX * this.b + pivotY * this.d);\n    return this;\n  }\n  prepend(matrix) {\n    const tx1 = this.tx;\n    if (matrix.a !== 1 || matrix.b !== 0 || matrix.c !== 0 || matrix.d !== 1) {\n      const a1 = this.a;\n      const c1 = this.c;\n      this.a = a1 * matrix.a + this.b * matrix.c;\n      this.b = a1 * matrix.b + this.b * matrix.d;\n      this.c = c1 * matrix.a + this.d * matrix.c;\n      this.d = c1 * matrix.b + this.d * matrix.d;\n    }\n    this.tx = tx1 * matrix.a + this.ty * matrix.c + matrix.tx;\n    this.ty = tx1 * matrix.b + this.ty * matrix.d + matrix.ty;\n    return this;\n  }\n  decompose(transform) {\n    const a = this.a;\n    const b = this.b;\n    const c = this.c;\n    const d = this.d;\n    const pivot = transform.pivot;\n    const skewX = -Math.atan2(-c, d);\n    const skewY = Math.atan2(b, a);\n    const delta = Math.abs(skewX + skewY);\n    if (delta < 1e-5 || Math.abs(PI_2 - delta) < 1e-5) {\n      transform.rotation = skewY;\n      transform.skew.x = transform.skew.y = 0;\n    } else {\n      transform.rotation = 0;\n      transform.skew.x = skewX;\n      transform.skew.y = skewY;\n    }\n    transform.scale.x = Math.sqrt(a * a + b * b);\n    transform.scale.y = Math.sqrt(c * c + d * d);\n    transform.position.x = this.tx + (pivot.x * a + pivot.y * c);\n    transform.position.y = this.ty + (pivot.x * b + pivot.y * d);\n    return transform;\n  }\n  invert() {\n    const a1 = this.a;\n    const b1 = this.b;\n    const c1 = this.c;\n    const d1 = this.d;\n    const tx1 = this.tx;\n    const n = a1 * d1 - b1 * c1;\n    this.a = d1 / n;\n    this.b = -b1 / n;\n    this.c = -c1 / n;\n    this.d = a1 / n;\n    this.tx = (c1 * this.ty - d1 * tx1) / n;\n    this.ty = -(a1 * this.ty - b1 * tx1) / n;\n    return this;\n  }\n  identity() {\n    this.a = 1;\n    this.b = 0;\n    this.c = 0;\n    this.d = 1;\n    this.tx = 0;\n    this.ty = 0;\n    return this;\n  }\n  clone() {\n    const matrix = new Matrix();\n    matrix.a = this.a;\n    matrix.b = this.b;\n    matrix.c = this.c;\n    matrix.d = this.d;\n    matrix.tx = this.tx;\n    matrix.ty = this.ty;\n    return matrix;\n  }\n  copyTo(matrix) {\n    matrix.a = this.a;\n    matrix.b = this.b;\n    matrix.c = this.c;\n    matrix.d = this.d;\n    matrix.tx = this.tx;\n    matrix.ty = this.ty;\n    return matrix;\n  }\n  copyFrom(matrix) {\n    this.a = matrix.a;\n    this.b = matrix.b;\n    this.c = matrix.c;\n    this.d = matrix.d;\n    this.tx = matrix.tx;\n    this.ty = matrix.ty;\n    return this;\n  }\n  toString() {\n    return \"[@pixi/math:Matrix a=\".concat(this.a, \" b=\").concat(this.b, \" c=\").concat(this.c, \" d=\").concat(this.d, \" tx=\").concat(this.tx, \" ty=\").concat(this.ty, \"]\");\n  }\n  static get IDENTITY() {\n    return new Matrix();\n  }\n  static get TEMP_MATRIX() {\n    return new Matrix();\n  }\n}\nexport { Matrix };","map":{"version":3,"mappings":"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","names":["Matrix","constructor","a","array","b","c","d","tx","ty","fromArray","set","toArray","transpose","out","Float32Array","apply","pos","newPos","Point","x","y","applyInverse","id","translate","scale","rotate","angle","Math","a1","c1","tx1","cos","sin","append","matrix","b1","d1","setTransform","pivotY","scaleX","rotation","skewY","skewX","prepend","decompose","transform","pivot","atan2","delta","abs","PI_2","skew","sqrt","invert","identity","clone","copyTo","copyFrom","toString","IDENTITY","TEMP_MATRIX"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/math/src/Matrix.ts"],"sourcesContent":["import { PI_2 } from './const';\nimport { Point } from './Point';\n\nimport type { IPointData } from './IPointData';\nimport type { Transform } from './Transform';\n\n/**\n * The PixiJS Matrix as a class makes it a lot faster.\n *\n * Here is a representation of it:\n * ```\n * | a | c | tx|\n * | b | d | ty|\n * | 0 | 0 | 1 |\n * ```\n * @memberof PIXI\n */\nexport class Matrix\n{\n    /** @default 1 */\n    public a: number;\n\n    /** @default 0 */\n    public b: number;\n\n    /** @default 0 */\n    public c: number;\n\n    /** @default 1 */\n    public d: number;\n\n    /** @default 0 */\n    public tx: number;\n\n    /** @default 0 */\n    public ty: number;\n\n    public array: Float32Array | null = null;\n\n    /**\n     * @param a - x scale\n     * @param b - y skew\n     * @param c - x skew\n     * @param d - y scale\n     * @param tx - x translation\n     * @param ty - y translation\n     */\n    constructor(a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0)\n    {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.d = d;\n        this.tx = tx;\n        this.ty = ty;\n    }\n\n    /**\n     * Creates a Matrix object based on the given array. The Element to Matrix mapping order is as follows:\n     *\n     * a = array[0]\n     * b = array[1]\n     * c = array[3]\n     * d = array[4]\n     * tx = array[2]\n     * ty = array[5]\n     * @param array - The array that the matrix will be populated from.\n     */\n    fromArray(array: number[]): void\n    {\n        this.a = array[0];\n        this.b = array[1];\n        this.c = array[3];\n        this.d = array[4];\n        this.tx = array[2];\n        this.ty = array[5];\n    }\n\n    /**\n     * Sets the matrix properties.\n     * @param a - Matrix component\n     * @param b - Matrix component\n     * @param c - Matrix component\n     * @param d - Matrix component\n     * @param tx - Matrix component\n     * @param ty - Matrix component\n     * @returns This matrix. Good for chaining method calls.\n     */\n    set(a: number, b: number, c: number, d: number, tx: number, ty: number): this\n    {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.d = d;\n        this.tx = tx;\n        this.ty = ty;\n\n        return this;\n    }\n\n    /**\n     * Creates an array from the current Matrix object.\n     * @param transpose - Whether we need to transpose the matrix or not\n     * @param [out=new Float32Array(9)] - If provided the array will be assigned to out\n     * @returns The newly created array which contains the matrix\n     */\n    toArray(transpose: boolean, out?: Float32Array): Float32Array\n    {\n        if (!this.array)\n        {\n            this.array = new Float32Array(9);\n        }\n\n        const array = out || this.array;\n\n        if (transpose)\n        {\n            array[0] = this.a;\n            array[1] = this.b;\n            array[2] = 0;\n            array[3] = this.c;\n            array[4] = this.d;\n            array[5] = 0;\n            array[6] = this.tx;\n            array[7] = this.ty;\n            array[8] = 1;\n        }\n        else\n        {\n            array[0] = this.a;\n            array[1] = this.c;\n            array[2] = this.tx;\n            array[3] = this.b;\n            array[4] = this.d;\n            array[5] = this.ty;\n            array[6] = 0;\n            array[7] = 0;\n            array[8] = 1;\n        }\n\n        return array;\n    }\n\n    /**\n     * Get a new position with the current transformation applied.\n     * Can be used to go from a child's coordinate space to the world coordinate space. (e.g. rendering)\n     * @param pos - The origin\n     * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n     * @returns {PIXI.Point} The new point, transformed through this matrix\n     */\n    apply<P extends IPointData = Point>(pos: IPointData, newPos?: P): P\n    {\n        newPos = (newPos || new Point()) as P;\n\n        const x = pos.x;\n        const y = pos.y;\n\n        newPos.x = (this.a * x) + (this.c * y) + this.tx;\n        newPos.y = (this.b * x) + (this.d * y) + this.ty;\n\n        return newPos;\n    }\n\n    /**\n     * Get a new position with the inverse of the current transformation applied.\n     * Can be used to go from the world coordinate space to a child's coordinate space. (e.g. input)\n     * @param pos - The origin\n     * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n     * @returns {PIXI.Point} The new point, inverse-transformed through this matrix\n     */\n    applyInverse<P extends IPointData = Point>(pos: IPointData, newPos?: P): P\n    {\n        newPos = (newPos || new Point()) as P;\n\n        const id = 1 / ((this.a * this.d) + (this.c * -this.b));\n\n        const x = pos.x;\n        const y = pos.y;\n\n        newPos.x = (this.d * id * x) + (-this.c * id * y) + (((this.ty * this.c) - (this.tx * this.d)) * id);\n        newPos.y = (this.a * id * y) + (-this.b * id * x) + (((-this.ty * this.a) + (this.tx * this.b)) * id);\n\n        return newPos;\n    }\n\n    /**\n     * Translates the matrix on the x and y.\n     * @param x - How much to translate x by\n     * @param y - How much to translate y by\n     * @returns This matrix. Good for chaining method calls.\n     */\n    translate(x: number, y: number): this\n    {\n        this.tx += x;\n        this.ty += y;\n\n        return this;\n    }\n\n    /**\n     * Applies a scale transformation to the matrix.\n     * @param x - The amount to scale horizontally\n     * @param y - The amount to scale vertically\n     * @returns This matrix. Good for chaining method calls.\n     */\n    scale(x: number, y: number): this\n    {\n        this.a *= x;\n        this.d *= y;\n        this.c *= x;\n        this.b *= y;\n        this.tx *= x;\n        this.ty *= y;\n\n        return this;\n    }\n\n    /**\n     * Applies a rotation transformation to the matrix.\n     * @param angle - The angle in radians.\n     * @returns This matrix. Good for chaining method calls.\n     */\n    rotate(angle: number): this\n    {\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        const a1 = this.a;\n        const c1 = this.c;\n        const tx1 = this.tx;\n\n        this.a = (a1 * cos) - (this.b * sin);\n        this.b = (a1 * sin) + (this.b * cos);\n        this.c = (c1 * cos) - (this.d * sin);\n        this.d = (c1 * sin) + (this.d * cos);\n        this.tx = (tx1 * cos) - (this.ty * sin);\n        this.ty = (tx1 * sin) + (this.ty * cos);\n\n        return this;\n    }\n\n    /**\n     * Appends the given Matrix to this Matrix.\n     * @param matrix - The matrix to append.\n     * @returns This matrix. Good for chaining method calls.\n     */\n    append(matrix: Matrix): this\n    {\n        const a1 = this.a;\n        const b1 = this.b;\n        const c1 = this.c;\n        const d1 = this.d;\n\n        this.a = (matrix.a * a1) + (matrix.b * c1);\n        this.b = (matrix.a * b1) + (matrix.b * d1);\n        this.c = (matrix.c * a1) + (matrix.d * c1);\n        this.d = (matrix.c * b1) + (matrix.d * d1);\n\n        this.tx = (matrix.tx * a1) + (matrix.ty * c1) + this.tx;\n        this.ty = (matrix.tx * b1) + (matrix.ty * d1) + this.ty;\n\n        return this;\n    }\n\n    /**\n     * Sets the matrix based on all the available properties\n     * @param x - Position on the x axis\n     * @param y - Position on the y axis\n     * @param pivotX - Pivot on the x axis\n     * @param pivotY - Pivot on the y axis\n     * @param scaleX - Scale on the x axis\n     * @param scaleY - Scale on the y axis\n     * @param rotation - Rotation in radians\n     * @param skewX - Skew on the x axis\n     * @param skewY - Skew on the y axis\n     * @returns This matrix. Good for chaining method calls.\n     */\n    setTransform(x: number, y: number, pivotX: number, pivotY: number, scaleX: number,\n        scaleY: number, rotation: number, skewX: number, skewY: number): this\n    {\n        this.a = Math.cos(rotation + skewY) * scaleX;\n        this.b = Math.sin(rotation + skewY) * scaleX;\n        this.c = -Math.sin(rotation - skewX) * scaleY;\n        this.d = Math.cos(rotation - skewX) * scaleY;\n\n        this.tx = x - ((pivotX * this.a) + (pivotY * this.c));\n        this.ty = y - ((pivotX * this.b) + (pivotY * this.d));\n\n        return this;\n    }\n\n    /**\n     * Prepends the given Matrix to this Matrix.\n     * @param matrix - The matrix to prepend\n     * @returns This matrix. Good for chaining method calls.\n     */\n    prepend(matrix: Matrix): this\n    {\n        const tx1 = this.tx;\n\n        if (matrix.a !== 1 || matrix.b !== 0 || matrix.c !== 0 || matrix.d !== 1)\n        {\n            const a1 = this.a;\n            const c1 = this.c;\n\n            this.a = (a1 * matrix.a) + (this.b * matrix.c);\n            this.b = (a1 * matrix.b) + (this.b * matrix.d);\n            this.c = (c1 * matrix.a) + (this.d * matrix.c);\n            this.d = (c1 * matrix.b) + (this.d * matrix.d);\n        }\n\n        this.tx = (tx1 * matrix.a) + (this.ty * matrix.c) + matrix.tx;\n        this.ty = (tx1 * matrix.b) + (this.ty * matrix.d) + matrix.ty;\n\n        return this;\n    }\n\n    /**\n     * Decomposes the matrix (x, y, scaleX, scaleY, and rotation) and sets the properties on to a transform.\n     * @param transform - The transform to apply the properties to.\n     * @returns The transform with the newly applied properties\n     */\n    decompose(transform: Transform): Transform\n    {\n        // sort out rotation / skew..\n        const a = this.a;\n        const b = this.b;\n        const c = this.c;\n        const d = this.d;\n        const pivot = transform.pivot;\n\n        const skewX = -Math.atan2(-c, d);\n        const skewY = Math.atan2(b, a);\n\n        const delta = Math.abs(skewX + skewY);\n\n        if (delta < 0.00001 || Math.abs(PI_2 - delta) < 0.00001)\n        {\n            transform.rotation = skewY;\n            transform.skew.x = transform.skew.y = 0;\n        }\n        else\n        {\n            transform.rotation = 0;\n            transform.skew.x = skewX;\n            transform.skew.y = skewY;\n        }\n\n        // next set scale\n        transform.scale.x = Math.sqrt((a * a) + (b * b));\n        transform.scale.y = Math.sqrt((c * c) + (d * d));\n\n        // next set position\n        transform.position.x = this.tx + ((pivot.x * a) + (pivot.y * c));\n        transform.position.y = this.ty + ((pivot.x * b) + (pivot.y * d));\n\n        return transform;\n    }\n\n    /**\n     * Inverts this matrix\n     * @returns This matrix. Good for chaining method calls.\n     */\n    invert(): this\n    {\n        const a1 = this.a;\n        const b1 = this.b;\n        const c1 = this.c;\n        const d1 = this.d;\n        const tx1 = this.tx;\n        const n = (a1 * d1) - (b1 * c1);\n\n        this.a = d1 / n;\n        this.b = -b1 / n;\n        this.c = -c1 / n;\n        this.d = a1 / n;\n        this.tx = ((c1 * this.ty) - (d1 * tx1)) / n;\n        this.ty = -((a1 * this.ty) - (b1 * tx1)) / n;\n\n        return this;\n    }\n\n    /**\n     * Resets this Matrix to an identity (default) matrix.\n     * @returns This matrix. Good for chaining method calls.\n     */\n    identity(): this\n    {\n        this.a = 1;\n        this.b = 0;\n        this.c = 0;\n        this.d = 1;\n        this.tx = 0;\n        this.ty = 0;\n\n        return this;\n    }\n\n    /**\n     * Creates a new Matrix object with the same values as this one.\n     * @returns A copy of this matrix. Good for chaining method calls.\n     */\n    clone(): Matrix\n    {\n        const matrix = new Matrix();\n\n        matrix.a = this.a;\n        matrix.b = this.b;\n        matrix.c = this.c;\n        matrix.d = this.d;\n        matrix.tx = this.tx;\n        matrix.ty = this.ty;\n\n        return matrix;\n    }\n\n    /**\n     * Changes the values of the given matrix to be the same as the ones in this matrix\n     * @param matrix - The matrix to copy to.\n     * @returns The matrix given in parameter with its values updated.\n     */\n    copyTo(matrix: Matrix): Matrix\n    {\n        matrix.a = this.a;\n        matrix.b = this.b;\n        matrix.c = this.c;\n        matrix.d = this.d;\n        matrix.tx = this.tx;\n        matrix.ty = this.ty;\n\n        return matrix;\n    }\n\n    /**\n     * Changes the values of the matrix to be the same as the ones in given matrix\n     * @param {PIXI.Matrix} matrix - The matrix to copy from.\n     * @returns {PIXI.Matrix} this\n     */\n    copyFrom(matrix: Matrix): this\n    {\n        this.a = matrix.a;\n        this.b = matrix.b;\n        this.c = matrix.c;\n        this.d = matrix.d;\n        this.tx = matrix.tx;\n        this.ty = matrix.ty;\n\n        return this;\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:Matrix a=${this.a} b=${this.b} c=${this.c} d=${this.d} tx=${this.tx} ty=${this.ty}]`;\n    }\n    // #endif\n\n    /**\n     * A default (identity) matrix\n     * @readonly\n     */\n    static get IDENTITY(): Matrix\n    {\n        return new Matrix();\n    }\n\n    /**\n     * A temp matrix\n     * @readonly\n     */\n    static get TEMP_MATRIX(): Matrix\n    {\n        return new Matrix();\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}