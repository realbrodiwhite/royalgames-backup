{"ast":null,"code":"const convertToList = (input, transform) => {\n  if (!Array.isArray(input)) {\n    input = [input];\n  }\n  if (!transform) {\n    return input;\n  }\n  return input.map(item => {\n    if (typeof item === \"string\") {\n      return transform(item);\n    }\n    return item;\n  });\n};\nexport { convertToList };","map":{"version":3,"mappings":"AAAa,sBAAgBA,CAAIC,OAAoCC,SACrE;EACI,IAAI,CAACC,MAAMC,OAAQ,MAAK,CACxB;IACIH,QAAQ,CAACA,KAAU;EAAA;EAGvB,IAAI,CAACC,SACL;IACW;EAAA;EAGH,aAAyBG,GAAI,CAACC,IACtC;IACQ,WAAOA,SAAS,QACpB;MACI,OAAOJ,UAAUI,IAAc;IAAA;IAG5B;EAAA,CACV;AACL","names":["convertToList","input","transform","Array","isArray","map","item"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/assets/src/utils/convertToList.ts"],"sourcesContent":["export const convertToList = <T>(input: string | T | (string | T)[], transform?: (input: string) => T): T[] =>\n{\n    if (!Array.isArray(input))\n    {\n        input = [input as T];\n    }\n\n    if (!transform)\n    {\n        return input as T[];\n    }\n\n    return (input as (string | T)[]).map((item): T =>\n    {\n        if (typeof item === 'string')\n        {\n            return transform(item as string);\n        }\n\n        return item as T;\n    });\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}