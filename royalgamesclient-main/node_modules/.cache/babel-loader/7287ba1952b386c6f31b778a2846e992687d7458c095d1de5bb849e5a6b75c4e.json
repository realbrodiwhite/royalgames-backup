{"ast":null,"code":"import { Point, ObservablePoint, BLEND_MODES, Texture, settings, utils, Rectangle } from '@pixi/core';\nimport { Container, Bounds } from '@pixi/display';\nconst tempPoint = new Point();\nconst indices = new Uint16Array([0, 1, 2, 0, 2, 3]);\nclass Sprite extends Container {\n  constructor(texture) {\n    super();\n    this._anchor = new ObservablePoint(this._onAnchorUpdate, this, texture ? texture.defaultAnchor.x : 0, texture ? texture.defaultAnchor.y : 0);\n    this._texture = null;\n    this._width = 0;\n    this._height = 0;\n    this._tint = null;\n    this._tintRGB = null;\n    this.tint = 16777215;\n    this.blendMode = BLEND_MODES.NORMAL;\n    this._cachedTint = 16777215;\n    this.uvs = null;\n    this.texture = texture || Texture.EMPTY;\n    this.vertexData = new Float32Array(8);\n    this.vertexTrimmedData = null;\n    this._transformID = -1;\n    this._textureID = -1;\n    this._transformTrimmedID = -1;\n    this._textureTrimmedID = -1;\n    this.indices = indices;\n    this.pluginName = \"batch\";\n    this.isSprite = true;\n    this._roundPixels = settings.ROUND_PIXELS;\n  }\n  _onTextureUpdate() {\n    this._textureID = -1;\n    this._textureTrimmedID = -1;\n    this._cachedTint = 16777215;\n    if (this._width) {\n      this.scale.x = utils.sign(this.scale.x) * this._width / this._texture.orig.width;\n    }\n    if (this._height) {\n      this.scale.y = utils.sign(this.scale.y) * this._height / this._texture.orig.height;\n    }\n  }\n  _onAnchorUpdate() {\n    this._transformID = -1;\n    this._transformTrimmedID = -1;\n  }\n  calculateVertices() {\n    const texture = this._texture;\n    if (this._transformID === this.transform._worldID && this._textureID === texture._updateID) {\n      return;\n    }\n    if (this._textureID !== texture._updateID) {\n      this.uvs = this._texture._uvs.uvsFloat32;\n    }\n    this._transformID = this.transform._worldID;\n    this._textureID = texture._updateID;\n    const wt = this.transform.worldTransform;\n    const a = wt.a;\n    const b = wt.b;\n    const c = wt.c;\n    const d = wt.d;\n    const tx = wt.tx;\n    const ty = wt.ty;\n    const vertexData = this.vertexData;\n    const trim = texture.trim;\n    const orig = texture.orig;\n    const anchor = this._anchor;\n    let w0 = 0;\n    let w1 = 0;\n    let h0 = 0;\n    let h1 = 0;\n    if (trim) {\n      w1 = trim.x - anchor._x * orig.width;\n      w0 = w1 + trim.width;\n      h1 = trim.y - anchor._y * orig.height;\n      h0 = h1 + trim.height;\n    } else {\n      w1 = -anchor._x * orig.width;\n      w0 = w1 + orig.width;\n      h1 = -anchor._y * orig.height;\n      h0 = h1 + orig.height;\n    }\n    vertexData[0] = a * w1 + c * h1 + tx;\n    vertexData[1] = d * h1 + b * w1 + ty;\n    vertexData[2] = a * w0 + c * h1 + tx;\n    vertexData[3] = d * h1 + b * w0 + ty;\n    vertexData[4] = a * w0 + c * h0 + tx;\n    vertexData[5] = d * h0 + b * w0 + ty;\n    vertexData[6] = a * w1 + c * h0 + tx;\n    vertexData[7] = d * h0 + b * w1 + ty;\n    if (this._roundPixels) {\n      const resolution = settings.RESOLUTION;\n      for (let i = 0; i < vertexData.length; ++i) {\n        vertexData[i] = Math.round(vertexData[i] * resolution) / resolution;\n      }\n    }\n  }\n  calculateTrimmedVertices() {\n    if (!this.vertexTrimmedData) {\n      this.vertexTrimmedData = new Float32Array(8);\n    } else if (this._transformTrimmedID === this.transform._worldID && this._textureTrimmedID === this._texture._updateID) {\n      return;\n    }\n    this._transformTrimmedID = this.transform._worldID;\n    this._textureTrimmedID = this._texture._updateID;\n    const texture = this._texture;\n    const vertexData = this.vertexTrimmedData;\n    const orig = texture.orig;\n    const anchor = this._anchor;\n    const wt = this.transform.worldTransform;\n    const a = wt.a;\n    const b = wt.b;\n    const c = wt.c;\n    const d = wt.d;\n    const tx = wt.tx;\n    const ty = wt.ty;\n    const w1 = -anchor._x * orig.width;\n    const w0 = w1 + orig.width;\n    const h1 = -anchor._y * orig.height;\n    const h0 = h1 + orig.height;\n    vertexData[0] = a * w1 + c * h1 + tx;\n    vertexData[1] = d * h1 + b * w1 + ty;\n    vertexData[2] = a * w0 + c * h1 + tx;\n    vertexData[3] = d * h1 + b * w0 + ty;\n    vertexData[4] = a * w0 + c * h0 + tx;\n    vertexData[5] = d * h0 + b * w0 + ty;\n    vertexData[6] = a * w1 + c * h0 + tx;\n    vertexData[7] = d * h0 + b * w1 + ty;\n  }\n  _render(renderer) {\n    this.calculateVertices();\n    renderer.batch.setObjectRenderer(renderer.plugins[this.pluginName]);\n    renderer.plugins[this.pluginName].render(this);\n  }\n  _calculateBounds() {\n    const trim = this._texture.trim;\n    const orig = this._texture.orig;\n    if (!trim || trim.width === orig.width && trim.height === orig.height) {\n      this.calculateVertices();\n      this._bounds.addQuad(this.vertexData);\n    } else {\n      this.calculateTrimmedVertices();\n      this._bounds.addQuad(this.vertexTrimmedData);\n    }\n  }\n  getLocalBounds(rect) {\n    if (this.children.length === 0) {\n      if (!this._localBounds) {\n        this._localBounds = new Bounds();\n      }\n      this._localBounds.minX = this._texture.orig.width * -this._anchor._x;\n      this._localBounds.minY = this._texture.orig.height * -this._anchor._y;\n      this._localBounds.maxX = this._texture.orig.width * (1 - this._anchor._x);\n      this._localBounds.maxY = this._texture.orig.height * (1 - this._anchor._y);\n      if (!rect) {\n        if (!this._localBoundsRect) {\n          this._localBoundsRect = new Rectangle();\n        }\n        rect = this._localBoundsRect;\n      }\n      return this._localBounds.getRectangle(rect);\n    }\n    return super.getLocalBounds.call(this, rect);\n  }\n  containsPoint(point) {\n    this.worldTransform.applyInverse(point, tempPoint);\n    const width = this._texture.orig.width;\n    const height = this._texture.orig.height;\n    const x1 = -width * this.anchor.x;\n    let y1 = 0;\n    if (tempPoint.x >= x1 && tempPoint.x < x1 + width) {\n      y1 = -height * this.anchor.y;\n      if (tempPoint.y >= y1 && tempPoint.y < y1 + height) {\n        return true;\n      }\n    }\n    return false;\n  }\n  destroy(options) {\n    super.destroy(options);\n    this._texture.off(\"update\", this._onTextureUpdate, this);\n    this._anchor = null;\n    const destroyTexture = typeof options === \"boolean\" ? options : options === null || options === void 0 ? void 0 : options.texture;\n    if (destroyTexture) {\n      const destroyBaseTexture = typeof options === \"boolean\" ? options : options === null || options === void 0 ? void 0 : options.baseTexture;\n      this._texture.destroy(!!destroyBaseTexture);\n    }\n    this._texture = null;\n  }\n  static from(source, options) {\n    const texture = source instanceof Texture ? source : Texture.from(source, options);\n    return new Sprite(texture);\n  }\n  set roundPixels(value) {\n    if (this._roundPixels !== value) {\n      this._transformID = -1;\n    }\n    this._roundPixels = value;\n  }\n  get roundPixels() {\n    return this._roundPixels;\n  }\n  get width() {\n    return Math.abs(this.scale.x) * this._texture.orig.width;\n  }\n  set width(value) {\n    const s = utils.sign(this.scale.x) || 1;\n    this.scale.x = s * value / this._texture.orig.width;\n    this._width = value;\n  }\n  get height() {\n    return Math.abs(this.scale.y) * this._texture.orig.height;\n  }\n  set height(value) {\n    const s = utils.sign(this.scale.y) || 1;\n    this.scale.y = s * value / this._texture.orig.height;\n    this._height = value;\n  }\n  get anchor() {\n    return this._anchor;\n  }\n  set anchor(value) {\n    this._anchor.copyFrom(value);\n  }\n  get tint() {\n    return this._tint;\n  }\n  set tint(value) {\n    this._tint = value;\n    this._tintRGB = (value >> 16) + (value & 65280) + ((value & 255) << 16);\n  }\n  get texture() {\n    return this._texture;\n  }\n  set texture(value) {\n    if (this._texture === value) {\n      return;\n    }\n    if (this._texture) {\n      this._texture.off(\"update\", this._onTextureUpdate, this);\n    }\n    this._texture = value || Texture.EMPTY;\n    this._cachedTint = 16777215;\n    this._textureID = -1;\n    this._textureTrimmedID = -1;\n    if (value) {\n      if (value.baseTexture.valid) {\n        this._onTextureUpdate();\n      } else {\n        value.once(\"update\", this._onTextureUpdate, this);\n      }\n    }\n  }\n}\nexport { Sprite };","map":{"version":3,"mappings":"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","names":["tempPoint","Point","indices","Uint16Array","Sprite","Container","constructor","texture","_anchor","ObservablePoint","_onAnchorUpdate","x","y","_texture","_width","_height","_tint","_tintRGB","tint","blendMode","BLEND_MODES","_cachedTint","uvs","Texture","Float32Array","vertexTrimmedData","_transformID","_textureID","_transformTrimmedID","_textureTrimmedID","pluginName","isSprite","_roundPixels","settings","_onTextureUpdate","scale","utils","orig","calculateVertices","_worldID","_updateID","_uvs","transform","a","wt","b","c","d","tx","ty","vertexData","trim","anchor","w0","w1","h0","h1","resolution","i","Math","calculateTrimmedVertices","_render","renderer","batch","plugins","_calculateBounds","width","height","addQuad","getLocalBounds","rect","children","_localBounds","Bounds","minX","minY","maxX","maxY","_localBoundsRect","Rectangle","call","containsPoint","point","applyInverse","x1","y1","destroy","options","destroyTexture","destroyBaseTexture","from","source","roundPixels","value","abs","s","copyFrom","baseTexture","valid","once"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/sprite/src/Sprite.ts"],"sourcesContent":["import { BLEND_MODES, ObservablePoint, Point, Rectangle, settings, Texture, utils } from '@pixi/core';\nimport { Bounds, Container } from '@pixi/display';\n\nimport type { IBaseTextureOptions, IPointData, Renderer, TextureSource } from '@pixi/core';\nimport type { IDestroyOptions } from '@pixi/display';\n\nconst tempPoint = new Point();\nconst indices = new Uint16Array([0, 1, 2, 0, 2, 3]);\n\nexport type SpriteSource = TextureSource | Texture;\n\nexport interface Sprite extends GlobalMixins.Sprite, Container {}\n\n/**\n * The Sprite object is the base for all textured objects that are rendered to the screen\n *\n * A sprite can be created directly from an image like this:\n *\n * ```js\n * import { Sprite } from 'pixi.js';\n *\n * const sprite = Sprite.from('assets/image.png');\n * ```\n *\n * The more efficient way to create sprites is using a {@link PIXI.Spritesheet},\n * as swapping base textures when rendering to the screen is inefficient.\n *\n * ```js\n * import { Assets, Sprite } from 'pixi.js';\n *\n * const sheet = await Assets.load('assets/spritesheet.json');\n * const sprite = new Sprite(sheet.textures['image.png']);\n * ```\n * @memberof PIXI\n */\nexport class Sprite extends Container\n{\n    /**\n     * The blend mode to be applied to the sprite. Apply a value of `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n     * @default PIXI.BLEND_MODES.NORMAL\n     */\n    public blendMode: BLEND_MODES;\n    public indices: Uint16Array;\n\n    /**\n     * Plugin that is responsible for rendering this element.\n     * Allows to customize the rendering process without overriding '_render' & '_renderCanvas' methods.\n     * @default 'batch'\n     */\n    public pluginName: string;\n\n    /**\n     * The width of the sprite (this is initially set by the texture).\n     * @protected\n     */\n    _width: number;\n\n    /**\n     * The height of the sprite (this is initially set by the texture)\n     * @protected\n     */\n    _height: number;\n\n    /**\n     * The texture that the sprite is using.\n     * @private\n     */\n    _texture: Texture;\n    _textureID: number;\n\n    /**\n     * Cached tint value so we can tell when the tint is changed.\n     * Value is used for 2d CanvasRenderer.\n     * @protected\n     * @default 0xFFFFFF\n     */\n    _cachedTint: number;\n    protected _textureTrimmedID: number;\n\n    /**\n     * This is used to store the uvs data of the sprite, assigned at the same time\n     * as the vertexData in calculateVertices().\n     * @member {Float32Array}\n     */\n    protected uvs: Float32Array;\n\n    /**\n     * The anchor point defines the normalized coordinates\n     * in the texture that map to the position of this\n     * sprite.\n     *\n     * By default, this is `(0,0)` (or `texture.defaultAnchor`\n     * if you have modified that), which means the position\n     * `(x,y)` of this `Sprite` will be the top-left corner.\n     *\n     * Note: Updating `texture.defaultAnchor` after\n     * constructing a `Sprite` does _not_ update its anchor.\n     *\n     * {@link https://docs.cocos2d-x.org/cocos2d-x/en/sprites/manipulation.html}\n     * @default `this.texture.defaultAnchor`\n     */\n    protected _anchor: ObservablePoint;\n\n    /**\n     * This is used to store the vertex data of the sprite (basically a quad).\n     * @member {Float32Array}\n     */\n    protected vertexData: Float32Array;\n\n    /**\n     * This is used to calculate the bounds of the object IF it is a trimmed sprite.\n     * @member {Float32Array}\n     */\n    private vertexTrimmedData: Float32Array;\n\n    /**\n     * Internal roundPixels field\n     * @private\n     */\n    private _roundPixels: boolean;\n    private _transformID: number;\n    private _transformTrimmedID: number;\n\n    /**\n     * The tint applied to the sprite. This is a hex value. A value of 0xFFFFFF will remove any tint effect.\n     * @default 0xFFFFFF\n     */\n    private _tint: number;\n\n    // Internal-only properties\n    /**\n     * The tint applied to the sprite. This is a RGB value. A value of 0xFFFFFF will remove any tint effect.\n     * @private\n     * @default 16777215\n     */\n    _tintRGB: number;\n\n    /** @param texture - The texture for this sprite. */\n    constructor(texture?: Texture)\n    {\n        super();\n\n        this._anchor = new ObservablePoint(\n            this._onAnchorUpdate,\n            this,\n            (texture ? texture.defaultAnchor.x : 0),\n            (texture ? texture.defaultAnchor.y : 0)\n        );\n\n        this._texture = null;\n\n        this._width = 0;\n        this._height = 0;\n        this._tint = null;\n        this._tintRGB = null;\n\n        this.tint = 0xFFFFFF;\n        this.blendMode = BLEND_MODES.NORMAL;\n        this._cachedTint = 0xFFFFFF;\n        this.uvs = null;\n\n        // call texture setter\n        this.texture = texture || Texture.EMPTY;\n        this.vertexData = new Float32Array(8);\n        this.vertexTrimmedData = null;\n\n        this._transformID = -1;\n        this._textureID = -1;\n\n        this._transformTrimmedID = -1;\n        this._textureTrimmedID = -1;\n\n        // Batchable stuff..\n        // TODO could make this a mixin?\n        this.indices = indices;\n\n        this.pluginName = 'batch';\n\n        /**\n         * Used to fast check if a sprite is.. a sprite!\n         * @member {boolean}\n         */\n        this.isSprite = true;\n        this._roundPixels = settings.ROUND_PIXELS;\n    }\n\n    /** When the texture is updated, this event will fire to update the scale and frame. */\n    protected _onTextureUpdate(): void\n    {\n        this._textureID = -1;\n        this._textureTrimmedID = -1;\n        this._cachedTint = 0xFFFFFF;\n\n        // so if _width is 0 then width was not set..\n        if (this._width)\n        {\n            this.scale.x = utils.sign(this.scale.x) * this._width / this._texture.orig.width;\n        }\n\n        if (this._height)\n        {\n            this.scale.y = utils.sign(this.scale.y) * this._height / this._texture.orig.height;\n        }\n    }\n\n    /** Called when the anchor position updates. */\n    private _onAnchorUpdate(): void\n    {\n        this._transformID = -1;\n        this._transformTrimmedID = -1;\n    }\n\n    /** Calculates worldTransform * vertices, store it in vertexData. */\n    public calculateVertices(): void\n    {\n        const texture = this._texture;\n\n        if (this._transformID === this.transform._worldID && this._textureID === texture._updateID)\n        {\n            return;\n        }\n\n        // update texture UV here, because base texture can be changed without calling `_onTextureUpdate`\n        if (this._textureID !== texture._updateID)\n        {\n            this.uvs = this._texture._uvs.uvsFloat32;\n        }\n\n        this._transformID = this.transform._worldID;\n        this._textureID = texture._updateID;\n\n        // set the vertex data\n\n        const wt = this.transform.worldTransform;\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n        const vertexData = this.vertexData;\n        const trim = texture.trim;\n        const orig = texture.orig;\n        const anchor = this._anchor;\n\n        let w0 = 0;\n        let w1 = 0;\n        let h0 = 0;\n        let h1 = 0;\n\n        if (trim)\n        {\n            // if the sprite is trimmed and is not a tilingsprite then we need to add the extra\n            // space before transforming the sprite coords.\n            w1 = trim.x - (anchor._x * orig.width);\n            w0 = w1 + trim.width;\n\n            h1 = trim.y - (anchor._y * orig.height);\n            h0 = h1 + trim.height;\n        }\n        else\n        {\n            w1 = -anchor._x * orig.width;\n            w0 = w1 + orig.width;\n\n            h1 = -anchor._y * orig.height;\n            h0 = h1 + orig.height;\n        }\n\n        // xy\n        vertexData[0] = (a * w1) + (c * h1) + tx;\n        vertexData[1] = (d * h1) + (b * w1) + ty;\n\n        // xy\n        vertexData[2] = (a * w0) + (c * h1) + tx;\n        vertexData[3] = (d * h1) + (b * w0) + ty;\n\n        // xy\n        vertexData[4] = (a * w0) + (c * h0) + tx;\n        vertexData[5] = (d * h0) + (b * w0) + ty;\n\n        // xy\n        vertexData[6] = (a * w1) + (c * h0) + tx;\n        vertexData[7] = (d * h0) + (b * w1) + ty;\n\n        if (this._roundPixels)\n        {\n            const resolution = settings.RESOLUTION;\n\n            for (let i = 0; i < vertexData.length; ++i)\n            {\n                vertexData[i] = Math.round(vertexData[i] * resolution) / resolution;\n            }\n        }\n    }\n\n    /**\n     * Calculates worldTransform * vertices for a non texture with a trim. store it in vertexTrimmedData.\n     *\n     * This is used to ensure that the true width and height of a trimmed texture is respected.\n     */\n    public calculateTrimmedVertices(): void\n    {\n        if (!this.vertexTrimmedData)\n        {\n            this.vertexTrimmedData = new Float32Array(8);\n        }\n        else if (this._transformTrimmedID === this.transform._worldID && this._textureTrimmedID === this._texture._updateID)\n        {\n            return;\n        }\n\n        this._transformTrimmedID = this.transform._worldID;\n        this._textureTrimmedID = this._texture._updateID;\n\n        // lets do some special trim code!\n        const texture = this._texture;\n        const vertexData = this.vertexTrimmedData;\n        const orig = texture.orig;\n        const anchor = this._anchor;\n\n        // lets calculate the new untrimmed bounds..\n        const wt = this.transform.worldTransform;\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n\n        const w1 = -anchor._x * orig.width;\n        const w0 = w1 + orig.width;\n\n        const h1 = -anchor._y * orig.height;\n        const h0 = h1 + orig.height;\n\n        // xy\n        vertexData[0] = (a * w1) + (c * h1) + tx;\n        vertexData[1] = (d * h1) + (b * w1) + ty;\n\n        // xy\n        vertexData[2] = (a * w0) + (c * h1) + tx;\n        vertexData[3] = (d * h1) + (b * w0) + ty;\n\n        // xy\n        vertexData[4] = (a * w0) + (c * h0) + tx;\n        vertexData[5] = (d * h0) + (b * w0) + ty;\n\n        // xy\n        vertexData[6] = (a * w1) + (c * h0) + tx;\n        vertexData[7] = (d * h0) + (b * w1) + ty;\n    }\n\n    /**\n     *\n     * Renders the object using the WebGL renderer\n     * @param renderer - The webgl renderer to use.\n     */\n    protected _render(renderer: Renderer): void\n    {\n        this.calculateVertices();\n\n        renderer.batch.setObjectRenderer(renderer.plugins[this.pluginName]);\n        renderer.plugins[this.pluginName].render(this);\n    }\n\n    /** Updates the bounds of the sprite. */\n    protected _calculateBounds(): void\n    {\n        const trim = this._texture.trim;\n        const orig = this._texture.orig;\n\n        // First lets check to see if the current texture has a trim..\n        if (!trim || (trim.width === orig.width && trim.height === orig.height))\n        {\n            // no trim! lets use the usual calculations..\n            this.calculateVertices();\n            this._bounds.addQuad(this.vertexData);\n        }\n        else\n        {\n            // lets calculate a special trimmed bounds...\n            this.calculateTrimmedVertices();\n            this._bounds.addQuad(this.vertexTrimmedData);\n        }\n    }\n\n    /**\n     * Gets the local bounds of the sprite object.\n     * @param rect - Optional output rectangle.\n     * @returns The bounds.\n     */\n    public getLocalBounds(rect?: Rectangle): Rectangle\n    {\n        // we can do a fast local bounds if the sprite has no children!\n        if (this.children.length === 0)\n        {\n            if (!this._localBounds)\n            {\n                this._localBounds = new Bounds();\n            }\n\n            this._localBounds.minX = this._texture.orig.width * -this._anchor._x;\n            this._localBounds.minY = this._texture.orig.height * -this._anchor._y;\n            this._localBounds.maxX = this._texture.orig.width * (1 - this._anchor._x);\n            this._localBounds.maxY = this._texture.orig.height * (1 - this._anchor._y);\n\n            if (!rect)\n            {\n                if (!this._localBoundsRect)\n                {\n                    this._localBoundsRect = new Rectangle();\n                }\n\n                rect = this._localBoundsRect;\n            }\n\n            return this._localBounds.getRectangle(rect);\n        }\n\n        return super.getLocalBounds.call(this, rect);\n    }\n\n    /**\n     * Tests if a point is inside this sprite\n     * @param point - the point to test\n     * @returns The result of the test\n     */\n    public containsPoint(point: IPointData): boolean\n    {\n        this.worldTransform.applyInverse(point, tempPoint);\n\n        const width = this._texture.orig.width;\n        const height = this._texture.orig.height;\n        const x1 = -width * this.anchor.x;\n        let y1 = 0;\n\n        if (tempPoint.x >= x1 && tempPoint.x < x1 + width)\n        {\n            y1 = -height * this.anchor.y;\n\n            if (tempPoint.y >= y1 && tempPoint.y < y1 + height)\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Destroys this sprite and optionally its texture and children.\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param [options.children=false] - if set to true, all the children will have their destroy\n     *      method called as well. 'options' will be passed on to those calls.\n     * @param [options.texture=false] - Should it destroy the current texture of the sprite as well\n     * @param [options.baseTexture=false] - Should it destroy the base texture of the sprite as well\n     */\n    public destroy(options?: IDestroyOptions | boolean): void\n    {\n        super.destroy(options);\n\n        this._texture.off('update', this._onTextureUpdate, this);\n\n        this._anchor = null;\n\n        const destroyTexture = typeof options === 'boolean' ? options : options?.texture;\n\n        if (destroyTexture)\n        {\n            const destroyBaseTexture = typeof options === 'boolean' ? options : options?.baseTexture;\n\n            this._texture.destroy(!!destroyBaseTexture);\n        }\n\n        this._texture = null;\n    }\n\n    // some helper functions..\n\n    /**\n     * Helper function that creates a new sprite based on the source you provide.\n     * The source can be - frame id, image url, video url, canvas element, video element, base texture\n     * @param {string|PIXI.Texture|HTMLImageElement|HTMLVideoElement|ImageBitmap|PIXI.ICanvas} source\n     *     - Source to create texture from\n     * @param {object} [options] - See {@link PIXI.BaseTexture}'s constructor for options.\n     * @returns The newly created sprite\n     */\n    static from(source: SpriteSource, options?: IBaseTextureOptions): Sprite\n    {\n        const texture = (source instanceof Texture)\n            ? source\n            : Texture.from(source, options);\n\n        return new Sprite(texture);\n    }\n\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n     *\n     * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n     * The main disadvantage is movement of objects may appear less smooth.\n     *\n     * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}.\n     * @default false\n     */\n    set roundPixels(value: boolean)\n    {\n        if (this._roundPixels !== value)\n        {\n            this._transformID = -1;\n        }\n        this._roundPixels = value;\n    }\n\n    get roundPixels(): boolean\n    {\n        return this._roundPixels;\n    }\n\n    /** The width of the sprite, setting this will actually modify the scale to achieve the value set. */\n    get width(): number\n    {\n        return Math.abs(this.scale.x) * this._texture.orig.width;\n    }\n\n    set width(value: number)\n    {\n        const s = utils.sign(this.scale.x) || 1;\n\n        this.scale.x = s * value / this._texture.orig.width;\n        this._width = value;\n    }\n\n    /** The height of the sprite, setting this will actually modify the scale to achieve the value set. */\n    get height(): number\n    {\n        return Math.abs(this.scale.y) * this._texture.orig.height;\n    }\n\n    set height(value: number)\n    {\n        const s = utils.sign(this.scale.y) || 1;\n\n        this.scale.y = s * value / this._texture.orig.height;\n        this._height = value;\n    }\n\n    /**\n     * The anchor sets the origin point of the sprite. The default value is taken from the {@link PIXI.Texture|Texture}\n     * and passed to the constructor.\n     *\n     * The default is `(0,0)`, this means the sprite's origin is the top left.\n     *\n     * Setting the anchor to `(0.5,0.5)` means the sprite's origin is centered.\n     *\n     * Setting the anchor to `(1,1)` would mean the sprite's origin point will be the bottom right corner.\n     *\n     * If you pass only single parameter, it will set both x and y to the same value as shown in the example below.\n     * @example\n     * import { Sprite } from 'pixi.js';\n     *\n     * const sprite = new Sprite(Texture.WHITE);\n     * sprite.anchor.set(0.5); // This will set the origin to center. (0.5) is same as (0.5, 0.5).\n     */\n    get anchor(): ObservablePoint\n    {\n        return this._anchor;\n    }\n\n    set anchor(value: ObservablePoint)\n    {\n        this._anchor.copyFrom(value);\n    }\n\n    /**\n     * The tint applied to the sprite. This is a hex value.\n     *\n     * A value of 0xFFFFFF will remove any tint effect.\n     * @default 0xFFFFFF\n     */\n    get tint(): number\n    {\n        return this._tint;\n    }\n\n    set tint(value: number)\n    {\n        this._tint = value;\n        this._tintRGB = (value >> 16) + (value & 0xff00) + ((value & 0xff) << 16);\n    }\n\n    /** The texture that the sprite is using. */\n    get texture(): Texture\n    {\n        return this._texture;\n    }\n\n    set texture(value: Texture)\n    {\n        if (this._texture === value)\n        {\n            return;\n        }\n\n        if (this._texture)\n        {\n            this._texture.off('update', this._onTextureUpdate, this);\n        }\n\n        this._texture = value || Texture.EMPTY;\n        this._cachedTint = 0xFFFFFF;\n\n        this._textureID = -1;\n        this._textureTrimmedID = -1;\n\n        if (value)\n        {\n            // wait for the texture to load\n            if (value.baseTexture.valid)\n            {\n                this._onTextureUpdate();\n            }\n            else\n            {\n                value.once('update', this._onTextureUpdate, this);\n            }\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}