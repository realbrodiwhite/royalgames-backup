{"ast":null,"code":"import { LoaderParserPriority, checkExtension, createTexture } from '@pixi/assets';\nimport { ExtensionType, settings, MIPMAP_MODES, ALPHA_MODES, utils, BaseTexture, extensions } from '@pixi/core';\nimport '../parsers/index.mjs';\nimport { parseKTX } from '../parsers/parseKTX.mjs';\nconst loadKTX = {\n  extension: {\n    type: ExtensionType.LoadParser,\n    priority: LoaderParserPriority.High\n  },\n  test(url) {\n    return checkExtension(url, \".ktx\");\n  },\n  async load(url, asset, loader) {\n    const response = await settings.ADAPTER.fetch(url);\n    const arrayBuffer = await response.arrayBuffer();\n    const {\n      compressed,\n      uncompressed,\n      kvData\n    } = parseKTX(url, arrayBuffer);\n    const resources = compressed !== null && compressed !== void 0 ? compressed : uncompressed;\n    const options = {\n      mipmap: MIPMAP_MODES.OFF,\n      alphaMode: ALPHA_MODES.NO_PREMULTIPLIED_ALPHA,\n      resolution: utils.getResolutionOfUrl(url),\n      ...asset.data\n    };\n    const textures = resources.map(resource => {\n      if (resources === uncompressed) {\n        Object.assign(options, {\n          type: resource.type,\n          format: resource.format\n        });\n      }\n      const base = new BaseTexture(resource, options);\n      base.ktxKeyValueData = kvData;\n      return createTexture(base, loader, url);\n    });\n    return textures.length === 1 ? textures[0] : textures;\n  },\n  unload(texture) {\n    if (Array.isArray(texture)) {\n      texture.forEach(t => t.destroy(true));\n    } else {\n      texture.destroy(true);\n    }\n  }\n};\nextensions.add(loadKTX);\nexport { loadKTX };","map":{"version":3,"mappings":";;;;AAQO,MAAMA,OAAU;EACnBC,SAAW;IACPC,MAAMC,aAAc;IACpBC,UAAUC,oBAAqB;EAAA,CACnC;EAEAC,KAAKC,GACL;IACW,sBAAeA,KAAK,MAAM;EAAA,CACrC;EAEA,MAAMC,KAAKD,GAAa,SAAkBE,MAC1C;IAEI,MAAMC,QAAW,SAAMC,QAAS,SAAQC,MAAML,GAAG;IAE3C,oBAAc,MAAMG,SAASG,WAAY;IAE/C,MAAM;MAAEC,UAAY;MAAAC;MAAcC;IAAW,aAAST,KAAKM,WAAW;IAEtE,MAAMI,YAAYH,UAAc,aAAdA,UAAc,cAAdA,UAAc;IAEhC,MAAMI,OAAU;MACZC,QAAQC,YAAa;MACrBC,WAAWC,WAAY;MACvBC,YAAYC,KAAM,oBAAmBjB,GAAG;MACxC,GAAGkB,KAAM;IAAA,CACb;IAEA,MAAMC,QAAW,aAAUC,GAAI,CAACC,QAChC;MACI,IAAIX,cAAcF,YAClB;QACIc,OAAOC,OAAOZ,OAAS;UACnBhB,MAAO0B,QAAoC;UAC3CG,QAASH,QAAoC;QAAA,CAChD;MAAA;MAGL,MAAMI,IAAO,OAAIC,WAAY,WAAUf,OAAO;MAE9Cc,KAAKE,eAAkB;MAEhB,qBAAcF,IAAM,UAAQzB,GAAG;IAAA,CACzC;IAED,OAAOmB,QAAS,YAAW,CAAI,YAAS,CAAK;EAAA,CACjD;EAEAS,OAAOC,OACP;IACQ,UAAMC,OAAQ,QAAO,CACzB;MACID,QAAQE,QAASC,KAAMA,CAAE,SAAQ,IAAI,CAAC;IAAA,CAG1C;MACIH,QAAQI,QAAQ,IAAI;IAAA;EACxB;AAGR;AAEAC,WAAWC,IAAI1C,OAAO","names":["loadKTX","extension","type","ExtensionType","priority","LoaderParserPriority","test","url","load","loader","response","settings","fetch","arrayBuffer","compressed","uncompressed","kvData","resources","options","mipmap","MIPMAP_MODES","alphaMode","ALPHA_MODES","resolution","utils","asset","textures","map","resource","Object","assign","format","base","BaseTexture","ktxKeyValueData","unload","texture","isArray","forEach","t","destroy","extensions","add"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/compressed-textures/src/loaders/loadKTX.ts"],"sourcesContent":["import { checkExtension, createTexture, LoaderParserPriority } from '@pixi/assets';\nimport { ALPHA_MODES, BaseTexture, extensions, ExtensionType, MIPMAP_MODES, settings, utils } from '@pixi/core';\nimport { parseKTX } from '../parsers';\n\nimport type { LoadAsset, Loader, LoaderParser } from '@pixi/assets';\nimport type { IBaseTextureOptions, Texture } from '@pixi/core';\n\n/** Loads KTX textures! */\nexport const loadKTX = {\n    extension: {\n        type: ExtensionType.LoadParser,\n        priority: LoaderParserPriority.High,\n    },\n\n    test(url: string): boolean\n    {\n        return checkExtension(url, '.ktx');\n    },\n\n    async load(url: string, asset: LoadAsset, loader: Loader): Promise<Texture | Texture[]>\n    {\n        // get an array buffer...\n        const response = await settings.ADAPTER.fetch(url);\n\n        const arrayBuffer = await response.arrayBuffer();\n\n        const { compressed, uncompressed, kvData } = parseKTX(url, arrayBuffer);\n\n        const resources = compressed ?? uncompressed;\n\n        const options = {\n            mipmap: MIPMAP_MODES.OFF,\n            alphaMode: ALPHA_MODES.NO_PREMULTIPLIED_ALPHA,\n            resolution: utils.getResolutionOfUrl(url),\n            ...asset.data,\n        };\n\n        const textures = resources.map((resource) =>\n        {\n            if (resources === uncompressed)\n            {\n                Object.assign(options, {\n                    type: (resource as typeof uncompressed[0]).type,\n                    format: (resource as typeof uncompressed[0]).format,\n                });\n            }\n\n            const base = new BaseTexture(resource, options);\n\n            base.ktxKeyValueData = kvData;\n\n            return createTexture(base, loader, url);\n        });\n\n        return textures.length === 1 ? textures[0] : textures;\n    },\n\n    unload(texture: Texture | Texture[]): void\n    {\n        if (Array.isArray(texture))\n        {\n            texture.forEach((t) => t.destroy(true));\n        }\n        else\n        {\n            texture.destroy(true);\n        }\n    }\n\n} as LoaderParser<Texture | Texture[], IBaseTextureOptions>;\n\nextensions.add(loadKTX);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}