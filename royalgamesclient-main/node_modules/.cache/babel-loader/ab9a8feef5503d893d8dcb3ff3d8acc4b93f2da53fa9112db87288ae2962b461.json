{"ast":null,"code":"import { Filter, CLEAR_MODES } from '@pixi/core';\nimport { generateBlurFragSource } from './generateBlurFragSource.mjs';\nimport { generateBlurVertSource } from './generateBlurVertSource.mjs';\nclass BlurFilterPass extends Filter {\n  constructor(horizontal) {\n    let strength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n    let quality = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;\n    let resolution = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Filter.defaultResolution;\n    let kernelSize = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 5;\n    const vertSrc = generateBlurVertSource(kernelSize, horizontal);\n    const fragSrc = generateBlurFragSource(kernelSize);\n    super(vertSrc, fragSrc);\n    this.horizontal = horizontal;\n    this.resolution = resolution;\n    this._quality = 0;\n    this.quality = quality;\n    this.blur = strength;\n  }\n  apply(filterManager, input, output, clearMode) {\n    if (output) {\n      if (this.horizontal) {\n        this.uniforms.strength = 1 / output.width * (output.width / input.width);\n      } else {\n        this.uniforms.strength = 1 / output.height * (output.height / input.height);\n      }\n    } else {\n      if (this.horizontal) {\n        this.uniforms.strength = 1 / filterManager.renderer.width * (filterManager.renderer.width / input.width);\n      } else {\n        this.uniforms.strength = 1 / filterManager.renderer.height * (filterManager.renderer.height / input.height);\n      }\n    }\n    this.uniforms.strength *= this.strength;\n    this.uniforms.strength /= this.passes;\n    if (this.passes === 1) {\n      filterManager.applyFilter(this, input, output, clearMode);\n    } else {\n      const renderTarget = filterManager.getFilterTexture();\n      const renderer = filterManager.renderer;\n      let flip = input;\n      let flop = renderTarget;\n      this.state.blend = false;\n      filterManager.applyFilter(this, flip, flop, CLEAR_MODES.CLEAR);\n      for (let i = 1; i < this.passes - 1; i++) {\n        filterManager.bindAndClear(flip, CLEAR_MODES.BLIT);\n        this.uniforms.uSampler = flop;\n        const temp = flop;\n        flop = flip;\n        flip = temp;\n        renderer.shader.bind(this);\n        renderer.geometry.draw(5);\n      }\n      this.state.blend = true;\n      filterManager.applyFilter(this, flop, output, clearMode);\n      filterManager.returnFilterTexture(renderTarget);\n    }\n  }\n  get blur() {\n    return this.strength;\n  }\n  set blur(value) {\n    this.padding = 1 + Math.abs(value) * 2;\n    this.strength = value;\n  }\n  get quality() {\n    return this._quality;\n  }\n  set quality(value) {\n    this._quality = value;\n    this.passes = value;\n  }\n}\nexport { BlurFilterPass };","map":{"version":3,"mappings":";;;AAUO,MAAMA,uBAAuBC,MACpC;EAcIC,YAAYC,UAAqB,EACjC;IAAA,IADiCC,+EAAW,CAAG;IAAA,kFAAU;IAAA,IAAGC,UAAa,8EAAOC,iBAAmB;IAAA,qFAAa,CAChH;IACU,gBAAUC,sBAAuB,aAAYJ,UAAU;IACvD,gBAAUK,uBAAuBC,UAAU;IAEjD,MAEIC,SAEAC,OACJ;IAEA,KAAKR,UAAa;IAElB,KAAKE,UAAa;IAElB,KAAKO,QAAW;IAEhB,KAAKC,OAAU;IAEf,KAAKC,IAAO;EAAA;EAUhBC,KAAOA,CACHC,aAA6B,SAAsBC,QAAuBC,SAE9E;IACI,IAAID,MACJ;MACI,IAAI,KAAKd,UACT;QACI,KAAKgB,SAASf,QAAY,OAAIa,OAAOG,KAAU,WAAOA,QAAQC,KAAM;MAAA,CAGxE;QACI,KAAKF,SAASf,QAAY,OAAIa,OAAOK,MAAW,WAAOA,SAASD,KAAM;MAAA;IAC1E,CAGJ;MACI,IAAI,KAAKlB,UACT;QACS,cAASC,WAAY,CAAI,iBAAcmB,SAASH,KAAU,kBAAcG,QAAS,SAAQF,KAAM;MAAA,CAGxG;QACS,cAASjB,WAAY,CAAI,iBAAcmB,SAASD,MAAW,kBAAcC,QAAS,UAASF,KAAM;MAAA;IAC1G;IAIC,cAASjB,YAAY,IAAK;IAC1B,cAASA,YAAY,IAAK;IAE3B,SAAKoB,WAAW,CACpB;MACIR,cAAcS,WAAY,OAAMJ,KAAO,UAAQH,SAAS;IAAA,CAG5D;MACU,qBAAeF,cAAcU,gBAAiB;MACpD,MAAMH,WAAWP,aAAc;MAE/B,IAAIW,IAAO;MACX,IAAIC,IAAO;MAEX,KAAKC,MAAMC,KAAQ;MACnBd,cAAcS,WAAY,OAAME,IAAM,QAAMI,YAAYC,KAAK;MAE7D,SAASC,IAAI,CAAG,MAAI,IAAK,UAAS,GAAGA,CACrC;QACkBjB,2BAAaW,IAAM,cAAYO,IAAI;QAEjD,KAAKf,SAASgB,QAAW;QAEzB,MAAMC,IAAO;QAENR;QACAD;QAEEJ,gBAAOc,KAAK,IAAI;QAChBd,kBAASe,KAAK,CAAC;MAAA;MAG5B,KAAKT,MAAMC,KAAQ;MACnBd,cAAcS,WAAY,OAAMG,IAAM,UAAQV,SAAS;MACvDF,cAAcuB,oBAAoBC,YAAY;IAAA;EAClD;EAMJ,IAAI1B,IACJA;IACI,OAAO,IAAK;EAAA;EAGhB,IAAIA,KAAK2B,KACT;IACI,KAAKC,OAAU,OAAKC,IAAK,KAAIF,KAAK,CAAI;IACtC,KAAKrC,QAAW;EAAA;EAQpB,IAAIS,OACJA;IACI,OAAO,IAAK;EAAA;EAGhB,IAAIA,QAAQ4B,KACZ;IACI,KAAK7B,QAAW;IAChB,KAAKY,MAAS;EAAA;AAEtB","names":["BlurFilterPass","Filter","constructor","horizontal","strength","resolution","defaultResolution","generateBlurVertSource","generateBlurFragSource","kernelSize","vertSrc","fragSrc","_quality","quality","blur","apply","filterManager","output","clearMode","uniforms","width","input","height","renderer","passes","applyFilter","getFilterTexture","flip","flop","state","blend","CLEAR_MODES","CLEAR","i","BLIT","uSampler","temp","bind","draw","returnFilterTexture","renderTarget","value","padding","Math"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/filter-blur/src/BlurFilterPass.ts"],"sourcesContent":["import { CLEAR_MODES, Filter } from '@pixi/core';\nimport { generateBlurFragSource } from './generateBlurFragSource';\nimport { generateBlurVertSource } from './generateBlurVertSource';\n\nimport type { FilterSystem, RenderTexture } from '@pixi/core';\n\n/**\n * The BlurFilterPass applies a horizontal or vertical Gaussian blur to an object.\n * @memberof PIXI\n */\nexport class BlurFilterPass extends Filter\n{\n    public horizontal: boolean;\n    public strength: number;\n    public passes: number;\n\n    private _quality: number;\n\n    /**\n     * @param horizontal - Do pass along the x-axis (`true`) or y-axis (`false`).\n     * @param strength - The strength of the blur filter.\n     * @param quality - The quality of the blur filter.\n     * @param resolution - The resolution of the blur filter.\n     * @param kernelSize - The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15.\n     */\n    constructor(horizontal: boolean, strength = 8, quality = 4, resolution = Filter.defaultResolution, kernelSize = 5)\n    {\n        const vertSrc = generateBlurVertSource(kernelSize, horizontal);\n        const fragSrc = generateBlurFragSource(kernelSize);\n\n        super(\n            // vertex shader\n            vertSrc,\n            // fragment shader\n            fragSrc\n        );\n\n        this.horizontal = horizontal;\n\n        this.resolution = resolution;\n\n        this._quality = 0;\n\n        this.quality = quality;\n\n        this.blur = strength;\n    }\n\n    /**\n     * Applies the filter.\n     * @param filterManager - The manager.\n     * @param input - The input target.\n     * @param output - The output target.\n     * @param clearMode - How to clear\n     */\n    public apply(\n        filterManager: FilterSystem, input: RenderTexture, output: RenderTexture, clearMode: CLEAR_MODES\n    ): void\n    {\n        if (output)\n        {\n            if (this.horizontal)\n            {\n                this.uniforms.strength = (1 / output.width) * (output.width / input.width);\n            }\n            else\n            {\n                this.uniforms.strength = (1 / output.height) * (output.height / input.height);\n            }\n        }\n        else\n        {\n            if (this.horizontal) // eslint-disable-line\n            {\n                this.uniforms.strength = (1 / filterManager.renderer.width) * (filterManager.renderer.width / input.width);\n            }\n            else\n            {\n                this.uniforms.strength = (1 / filterManager.renderer.height) * (filterManager.renderer.height / input.height); // eslint-disable-line\n            }\n        }\n\n        // screen space!\n        this.uniforms.strength *= this.strength;\n        this.uniforms.strength /= this.passes;\n\n        if (this.passes === 1)\n        {\n            filterManager.applyFilter(this, input, output, clearMode);\n        }\n        else\n        {\n            const renderTarget = filterManager.getFilterTexture();\n            const renderer = filterManager.renderer;\n\n            let flip = input;\n            let flop = renderTarget;\n\n            this.state.blend = false;\n            filterManager.applyFilter(this, flip, flop, CLEAR_MODES.CLEAR);\n\n            for (let i = 1; i < this.passes - 1; i++)\n            {\n                filterManager.bindAndClear(flip, CLEAR_MODES.BLIT);\n\n                this.uniforms.uSampler = flop;\n\n                const temp = flop;\n\n                flop = flip;\n                flip = temp;\n\n                renderer.shader.bind(this);\n                renderer.geometry.draw(5);\n            }\n\n            this.state.blend = true;\n            filterManager.applyFilter(this, flop, output, clearMode);\n            filterManager.returnFilterTexture(renderTarget);\n        }\n    }\n    /**\n     * Sets the strength of both the blur.\n     * @default 16\n     */\n    get blur(): number\n    {\n        return this.strength;\n    }\n\n    set blur(value: number)\n    {\n        this.padding = 1 + (Math.abs(value) * 2);\n        this.strength = value;\n    }\n\n    /**\n     * Sets the quality of the blur by modifying the number of passes. More passes means higher\n     * quality bluring but the lower the performance.\n     * @default 4\n     */\n    get quality(): number\n    {\n        return this._quality;\n    }\n\n    set quality(value: number)\n    {\n        this._quality = value;\n        this.passes = value;\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}