{"ast":null,"code":"import { ExtensionType, utils, SVGResource, BaseTexture, settings, extensions } from '@pixi/core';\nimport { LoaderParserPriority } from '../LoaderParser.mjs';\nimport { loadTextures } from './loadTextures.mjs';\nimport { createTexture } from './utils/createTexture.mjs';\nconst loadSVG = {\n  extension: {\n    type: ExtensionType.LoadParser,\n    priority: LoaderParserPriority.High\n  },\n  test(url) {\n    return utils.path.extname(url).toLowerCase() === \".svg\";\n  },\n  async testParse(data) {\n    return SVGResource.test(data);\n  },\n  async parse(asset, data, loader) {\n    var _data$data, _data$data2, _data$data2$resourceO;\n    const src = new SVGResource(asset, data === null || data === void 0 ? void 0 : (_data$data = data.data) === null || _data$data === void 0 ? void 0 : _data$data.resourceOptions);\n    const base = new BaseTexture(src, {\n      resolution: utils.getResolutionOfUrl(asset),\n      ...(data === null || data === void 0 ? void 0 : data.data)\n    });\n    base.resource.src = asset;\n    const texture = createTexture(base, loader, asset);\n    if (!(data !== null && data !== void 0 && (_data$data2 = data.data) !== null && _data$data2 !== void 0 && (_data$data2$resourceO = _data$data2.resourceOptions) !== null && _data$data2$resourceO !== void 0 && _data$data2$resourceO.autoLoad)) {\n      await src.load();\n    }\n    return texture;\n  },\n  async load(url, _options) {\n    const response = await settings.ADAPTER.fetch(url);\n    return response.text();\n  },\n  unload: loadTextures.unload\n};\nextensions.add(loadSVG);\nexport { loadSVG };","map":{"version":3,"mappings":";;;;AAWO,MAAMA,OAAU;EACnBC,SAAW;IACPC,MAAMC,aAAc;IACpBC,UAAUC,oBAAqB;EAAA,CACnC;EAEAC,KAAKC,GACL;IACI,OAAQC,MAAMC,IAAK,SAAQF,GAAG,EAAEG,aAAkB;EAAA,CACtD;EAEA,MAAMC,UAAUC,IAChB;IACW,mBAAYN,KAAKM,IAAI;EAAA,CAChC;EAEA,MAAMC,MAAMC,KAAe,QAAsCC,MACjE;IAAA;IACI,MAAMC,MAAM,IAAIC,YAAYH,KAAO,iEAAMF,mDAANM,WAAYC,eAAe;IAExD,aAAO,IAAIC,YAAYJ,GAAK;MAC9BK,YAAYb,KAAM,oBAAmBM,KAAK;MAC1C,IAAGF,IAAM,aAANA,IAAM,uBAANA,IAAM;IAAA,CACZ;IAEDU,KAAKC,SAASP,GAAM;IAEpB,MAAMQ,OAAU,iBAAcF,IAAM,UAAQR,KAAK;IAEjD,IAAI,EAACF,wDAAMA,IAAM,iEAAZa,YAAYN,iEAAZO,sBAA6BC,QAClC;MACI,MAAMX,IAAIY,IAAK;IAAA;IAGZ;EAAA,CACX;EAEA,MAAMA,IAAKA,MAAaC,QACxB;IACI,MAAMC,QAAW,SAAMC,QAAS,SAAQC,MAAMzB,GAAG;IAEjD,OAAOuB,SAASG,IAAK;EAAA,CACzB;EAEAC,QAAQC,YAAa;AAEzB;AAEAC,WAAWC,IAAIrC,OAAO","names":["loadSVG","extension","type","ExtensionType","priority","LoaderParserPriority","test","url","utils","path","toLowerCase","testParse","data","parse","asset","loader","src","SVGResource","_data$data","resourceOptions","BaseTexture","resolution","base","resource","texture","_data$data2","_data$data2$resourceO","autoLoad","load","_options","response","settings","fetch","text","unload","loadTextures","extensions","add"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/assets/src/loader/parsers/textures/loadSVG.ts"],"sourcesContent":["import { BaseTexture, extensions, ExtensionType, settings, SVGResource, utils } from '@pixi/core';\nimport { LoaderParserPriority } from '../LoaderParser';\nimport { loadTextures } from './loadTextures';\nimport { createTexture } from './utils/createTexture';\n\nimport type { IBaseTextureOptions, Texture } from '@pixi/core';\nimport type { Loader } from '../../Loader';\nimport type { LoadAsset } from '../../types';\nimport type { LoaderParser } from '../LoaderParser';\n\n/** Loads SVG's into Textures */\nexport const loadSVG = {\n    extension: {\n        type: ExtensionType.LoadParser,\n        priority: LoaderParserPriority.High,\n    },\n\n    test(url: string): boolean\n    {\n        return (utils.path.extname(url).toLowerCase() === '.svg');\n    },\n\n    async testParse(data: string): Promise<boolean>\n    {\n        return SVGResource.test(data);\n    },\n\n    async parse(asset: string, data: LoadAsset<IBaseTextureOptions>, loader: Loader): Promise<Texture>\n    {\n        const src = new SVGResource(asset, data?.data?.resourceOptions);\n\n        const base = new BaseTexture(src, {\n            resolution: utils.getResolutionOfUrl(asset),\n            ...data?.data,\n        });\n\n        base.resource.src = asset;\n\n        const texture = createTexture(base, loader, asset);\n\n        if (!data?.data?.resourceOptions?.autoLoad)\n        {\n            await src.load();\n        }\n\n        return texture;\n    },\n\n    async load(url: string, _options: LoadAsset): Promise<string>\n    {\n        const response = await settings.ADAPTER.fetch(url);\n\n        return response.text();\n    },\n\n    unload: loadTextures.unload,\n\n} as LoaderParser<Texture | string, IBaseTextureOptions>;\n\nextensions.add(loadSVG);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}