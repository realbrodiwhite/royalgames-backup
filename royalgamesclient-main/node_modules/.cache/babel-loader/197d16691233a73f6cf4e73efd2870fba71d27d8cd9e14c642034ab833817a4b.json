{"ast":null,"code":"import '../settings.mjs';\nimport { settings } from '@pixi/settings';\nfunction getResolutionOfUrl(url) {\n  var _settings$RETINA_PREF;\n  let defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  const resolution = (_settings$RETINA_PREF = settings.RETINA_PREFIX) === null || _settings$RETINA_PREF === void 0 ? void 0 : _settings$RETINA_PREF.exec(url);\n  if (resolution) {\n    return parseFloat(resolution[1]);\n  }\n  return defaultValue;\n}\nexport { getResolutionOfUrl };","map":{"version":3,"mappings":";;AAWmC,iCACnC;EAAA;EAAA,IADgDA,mFAAe,CAC/D;EACI,MAAMC,UAAa,qCAASC,aAAe,0DAAxBC,sBAAwBC,KAAKC,GAAG;EAEnD,IAAIJ,UACJ;IACW,kBAAWA,WAAW,CAAE;EAAA;EAG5B;AACX","names":["defaultValue","resolution","RETINA_PREFIX","_settings$RETINA_PREF","exec","url"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/utils/src/network/getResolutionOfUrl.ts"],"sourcesContent":["import { settings } from '../settings';\n\n/**\n * get the resolution / device pixel ratio of an asset by looking for the prefix\n * used by spritesheets and image urls\n * @memberof PIXI.utils\n * @function getResolutionOfUrl\n * @param {string} url - the image path\n * @param {number} [defaultValue=1] - the defaultValue if no filename prefix is set.\n * @returns {number} resolution / device pixel ratio of an asset\n */\nexport function getResolutionOfUrl(url: string, defaultValue = 1): number\n{\n    const resolution = settings.RETINA_PREFIX?.exec(url);\n\n    if (resolution)\n    {\n        return parseFloat(resolution[1]);\n    }\n\n    return defaultValue;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}