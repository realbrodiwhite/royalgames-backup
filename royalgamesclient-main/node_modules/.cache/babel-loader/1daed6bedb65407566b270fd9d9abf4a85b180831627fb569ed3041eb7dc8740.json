{"ast":null,"code":"import { Filter, Matrix, Point } from '@pixi/core';\nimport fragment from './displacement.mjs';\nimport vertex from './displacement2.mjs';\nclass DisplacementFilter extends Filter {\n  constructor(sprite, scale) {\n    const maskMatrix = new Matrix();\n    sprite.renderable = false;\n    super(vertex, fragment, {\n      mapSampler: sprite._texture,\n      filterMatrix: maskMatrix,\n      scale: {\n        x: 1,\n        y: 1\n      },\n      rotation: new Float32Array([1, 0, 0, 1])\n    });\n    this.maskSprite = sprite;\n    this.maskMatrix = maskMatrix;\n    if (scale === null || scale === void 0) {\n      scale = 20;\n    }\n    this.scale = new Point(scale, scale);\n  }\n  apply(filterManager, input, output, clearMode) {\n    this.uniforms.filterMatrix = filterManager.calculateSpriteMatrix(this.maskMatrix, this.maskSprite);\n    this.uniforms.scale.x = this.scale.x;\n    this.uniforms.scale.y = this.scale.y;\n    const wt = this.maskSprite.worldTransform;\n    const lenX = Math.sqrt(wt.a * wt.a + wt.b * wt.b);\n    const lenY = Math.sqrt(wt.c * wt.c + wt.d * wt.d);\n    if (lenX !== 0 && lenY !== 0) {\n      this.uniforms.rotation[0] = wt.a / lenX;\n      this.uniforms.rotation[1] = wt.b / lenX;\n      this.uniforms.rotation[2] = wt.c / lenY;\n      this.uniforms.rotation[3] = wt.d / lenY;\n    }\n    filterManager.applyFilter(this, input, output, clearMode);\n  }\n  get map() {\n    return this.uniforms.mapSampler;\n  }\n  set map(value) {\n    this.uniforms.mapSampler = value;\n  }\n}\nexport { DisplacementFilter };","map":{"version":3,"mappings":";;;AAqBO,MAAMA,2BAA2BC,MACxC;EASIC,YAAYC,QAA2BC,KACvC;IACU,mBAAa,IAAIC,MAAO;IAE9BF,OAAOG,UAAa;IAEpB,MAAMC,QAAQC,QAAU;MACpBC,YAAYN,MAAO;MACnBO,YAAc;MACdN,KAAO;QAAEO,CAAG;QAAGC,GAAG;MAAE;MACpBC,UAAU,IAAIC,YAAa,EAAC,GAAG,CAAG,KAAG,CAAC,CAAC;IAAA,CAC1C;IAED,KAAKC,UAAa;IAClB,KAAKC,UAAa;IAEd,cAAU,IAAQ,cAAU,KAChC;MACYZ;IAAA;IAOZ,KAAKA,KAAQ,OAAIa,KAAM,QAAOb,KAAK;EAAA;EAUvCc,KAAOA,CACHC,aAA6B,SAAsBC,QAAuBC,SAE9E;IAEI,KAAKC,SAASZ,YAAe,iBAAca,sBAAsB,IAAK,aAAY,KAAKR,UAAU;IACjG,KAAKO,QAAS,OAAMX,CAAI,QAAKP,KAAM;IACnC,KAAKkB,QAAS,OAAMV,CAAI,QAAKR,KAAM;IAG7B,WAAK,KAAKW,UAAW;IACrB,aAAOS,IAAK,MAAMC,EAAG,KAAIA,GAAGC,CAAM,MAAGC,CAAI,MAAGA,CAAE;IAC9C,aAAOH,IAAK,MAAMC,EAAG,KAAIA,GAAGG,CAAM,MAAGC,CAAI,MAAGA,CAAE;IAEhD,aAAS,CAAK,aAAS,CAC3B;MACI,KAAKP,QAAS,UAAS,CAAK,OAAGI,CAAI;MACnC,KAAKJ,QAAS,UAAS,CAAK,OAAGK,CAAI;MACnC,KAAKL,QAAS,UAAS,CAAK,OAAGM,CAAI;MACnC,KAAKN,QAAS,UAAS,CAAK,OAAGO,CAAI;IAAA;IAIvCV,cAAcW,WAAY,OAAMC,KAAO,UAAQV,SAAS;EAAA;EAI5D,IAAIW,GACJA;IACI,OAAO,KAAKV,QAAS;EAAA;EAGzB,IAAIU,IAAIC,KACR;IACI,KAAKX,SAASb,UAAa;EAAA;AAEnC","names":["DisplacementFilter","Filter","constructor","sprite","scale","Matrix","renderable","vertex","fragment","mapSampler","filterMatrix","x","y","rotation","Float32Array","maskSprite","maskMatrix","Point","apply","filterManager","output","clearMode","uniforms","calculateSpriteMatrix","Math","wt","a","b","c","d","applyFilter","input","map","value"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/filter-displacement/src/DisplacementFilter.ts"],"sourcesContent":["import { Filter, Matrix, Point } from '@pixi/core';\nimport fragment from './displacement.frag';\nimport vertex from './displacement.vert';\n\nimport type { CLEAR_MODES, FilterSystem, ISpriteMaskTarget, RenderTexture, Texture } from '@pixi/core';\n\n/**\n * The DisplacementFilter class uses the pixel values from the specified texture\n * (called the displacement map) to perform a displacement of an object.\n *\n * You can use this filter to apply all manor of crazy warping effects.\n * Currently the `r` property of the texture is used to offset the `x`\n * and the `g` property of the texture is used to offset the `y`.\n *\n * The way it works is it uses the values of the displacement map to look up the\n * correct pixels to output. This means it's not technically moving the original.\n * Instead, it's starting at the output and asking \"which pixel from the original goes here\".\n * For example, if a displacement map pixel has `red = 1` and the filter scale is `20`,\n * this filter will output the pixel approximately 20 pixels to the right of the original.\n * @memberof PIXI\n */\nexport class DisplacementFilter extends Filter\n{\n    public maskSprite: ISpriteMaskTarget;\n    public maskMatrix: Matrix;\n    public scale: Point;\n\n    /**\n     * @param {PIXI.Sprite} sprite - The sprite used for the displacement map. (make sure its added to the scene!)\n     * @param scale - The scale of the displacement\n     */\n    constructor(sprite: ISpriteMaskTarget, scale?: number)\n    {\n        const maskMatrix = new Matrix();\n\n        sprite.renderable = false;\n\n        super(vertex, fragment, {\n            mapSampler: sprite._texture,\n            filterMatrix: maskMatrix,\n            scale: { x: 1, y: 1 },\n            rotation: new Float32Array([1, 0, 0, 1]),\n        });\n\n        this.maskSprite = sprite;\n        this.maskMatrix = maskMatrix;\n\n        if (scale === null || scale === undefined)\n        {\n            scale = 20;\n        }\n\n        /**\n         * scaleX, scaleY for displacements\n         * @member {PIXI.Point}\n         */\n        this.scale = new Point(scale, scale);\n    }\n\n    /**\n     * Applies the filter.\n     * @param filterManager - The manager.\n     * @param input - The input target.\n     * @param output - The output target.\n     * @param clearMode - clearMode.\n     */\n    public apply(\n        filterManager: FilterSystem, input: RenderTexture, output: RenderTexture, clearMode: CLEAR_MODES\n    ): void\n    {\n        // fill maskMatrix with _normalized sprite texture coords_\n        this.uniforms.filterMatrix = filterManager.calculateSpriteMatrix(this.maskMatrix, this.maskSprite);\n        this.uniforms.scale.x = this.scale.x;\n        this.uniforms.scale.y = this.scale.y;\n\n        // Extract rotation from world transform\n        const wt = this.maskSprite.worldTransform;\n        const lenX = Math.sqrt((wt.a * wt.a) + (wt.b * wt.b));\n        const lenY = Math.sqrt((wt.c * wt.c) + (wt.d * wt.d));\n\n        if (lenX !== 0 && lenY !== 0)\n        {\n            this.uniforms.rotation[0] = wt.a / lenX;\n            this.uniforms.rotation[1] = wt.b / lenX;\n            this.uniforms.rotation[2] = wt.c / lenY;\n            this.uniforms.rotation[3] = wt.d / lenY;\n        }\n\n        // draw the filter...\n        filterManager.applyFilter(this, input, output, clearMode);\n    }\n\n    /** The texture used for the displacement map. Must be power of 2 sized texture. */\n    get map(): Texture\n    {\n        return this.uniforms.mapSampler;\n    }\n\n    set map(value: Texture)\n    {\n        this.uniforms.mapSampler = value;\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}