{"ast":null,"code":"function processX(base, ids, depth, result, tags) {\n  const id = ids[depth];\n  for (let i = 0; i < id.length; i++) {\n    const value = id[i];\n    if (depth < ids.length - 1) {\n      processX(base.replace(result[depth], value), ids, depth + 1, result, tags);\n    } else {\n      tags.push(base.replace(result[depth], value));\n    }\n  }\n}\nfunction createStringVariations(string) {\n  const regex = /\\{(.*?)\\}/g;\n  const result = string.match(regex);\n  const tags = [];\n  if (result) {\n    const ids = [];\n    result.forEach(vars => {\n      const split = vars.substring(1, vars.length - 1).split(\",\");\n      ids.push(split);\n    });\n    processX(string, ids, 0, result, tags);\n  } else {\n    tags.push(string);\n  }\n  return tags;\n}\nexport { createStringVariations };","map":{"version":3,"mappings":"AAAA,kBAAkBA,IAAc,OAAiBC,KAAe,UAAkBC,IAClF;EACI,MAAMC,KAAKC,GAAI;EAEf,SAASC,CAAI,MAAGA,CAAI,MAAGC,QAAQD,CAC/B;IACI,MAAME,QAAQJ,EAAG;IAEb,YAAQC,GAAI,UAAS,CACzB;MACaI,cAAKC,OAAQ,QAAOR,KAAQ,QAAK,GAAGG,GAAK,UAAQ,CAAG,UAAQF,IAAI;IAAA,CAG7E;MACIA,KAAKQ,KAAKV,IAAK,SAAQW,MAAO,SAAQJ,KAAK,CAAC;IAAA;EAChD;AAER;AASO,gCAAgCK,MACvC;EACI,MAAMC,KAAQ;EAER,eAASD,MAAO,OAAMC,KAAK;EAEjC,MAAMX,OAAiB,EAAC;EAExB,IAAIS,MACJ;IACI,MAAMP,MAAkB,EAAC;IAElBO,eAASG,IAChB;MAEU,cAAQA,KAAKC,SAAU,IAAGD,KAAKR,MAAS,IAAC,CAAE,OAAM,GAAG;MAE1DF,IAAIM,KAAKM,KAAK;IAAA,CACjB;IAEDR,SAASI,MAAQ,OAAK,CAAG,UAAQV,IAAI;EAAA,CAGzC;IACIA,KAAKQ,KAAKE,MAAM;EAAA;EAGb;AACX","names":["base","depth","tags","id","ids","i","length","value","processX","replace","push","result","string","regex","vars","substring","split"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/assets/src/utils/createStringVariations.ts"],"sourcesContent":["function processX(base: string, ids: string[][], depth: number, result: string[], tags: string[])\n{\n    const id = ids[depth];\n\n    for (let i = 0; i < id.length; i++)\n    {\n        const value = id[i];\n\n        if (depth < ids.length - 1)\n        {\n            processX(base.replace(result[depth], value), ids, depth + 1, result, tags);\n        }\n        else\n        {\n            tags.push(base.replace(result[depth], value));\n        }\n    }\n}\n\n/**\n * Creates a list of all possible combinations of the given strings.\n * @example\n * const out2 = createStringVariations('name is {chicken,wolf,sheep}');\n * console.log(out2); // [ 'name is chicken', 'name is wolf', 'name is sheep' ]\n * @param string - The string to process\n */\nexport function createStringVariations(string: string): string[]\n{\n    const regex = /\\{(.*?)\\}/g;\n\n    const result = string.match(regex);\n\n    const tags: string[] = [];\n\n    if (result)\n    {\n        const ids: string[][] = [];\n\n        result.forEach((vars) =>\n        {\n            // first remove the brackets...\n            const split = vars.substring(1, vars.length - 1).split(',');\n\n            ids.push(split);\n        });\n\n        processX(string, ids, 0, result, tags);\n    }\n    else\n    {\n        tags.push(string);\n    }\n\n    return tags;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}