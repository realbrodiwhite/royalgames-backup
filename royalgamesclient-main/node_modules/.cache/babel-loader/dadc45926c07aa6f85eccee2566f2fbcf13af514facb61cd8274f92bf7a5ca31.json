{"ast":null,"code":"import { Filter, defaultVertex } from '@pixi/core';\nimport fragment from './alpha.mjs';\nclass AlphaFilter extends Filter {\n  constructor() {\n    let alpha = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    super(defaultVertex, fragment, {\n      uAlpha: 1\n    });\n    this.alpha = alpha;\n  }\n  get alpha() {\n    return this.uniforms.uAlpha;\n  }\n  set alpha(value) {\n    this.uniforms.uAlpha = value;\n  }\n}\nexport { AlphaFilter };","map":{"version":3,"mappings":";;AAiBO,MAAMA,oBAAoBC,MACjC;EAIIC,cACA;IAAA,IADYC,4EAAQ,CACpB;IACI,MAAMC,aAAe,YAAU;MAAEC,QAAQ;IAAA,CAAG;IAE5C,KAAKF,KAAQ;EAAA;EAOjB,IAAIA,KACJA;IACI,OAAO,KAAKG,QAAS;EAAA;EAGzB,IAAIH,MAAMI,KACV;IACI,KAAKD,SAASD,MAAS;EAAA;AAE/B","names":["AlphaFilter","Filter","constructor","alpha","defaultVertex","uAlpha","uniforms","value"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/filter-alpha/src/AlphaFilter.ts"],"sourcesContent":["import { defaultVertex, Filter } from '@pixi/core';\nimport fragment from './alpha.frag';\n\n/**\n * Simplest filter - applies alpha.\n *\n * Use this instead of Container's alpha property to avoid visual layering of individual elements.\n * AlphaFilter applies alpha evenly across the entire display object and any opaque elements it contains.\n * If elements are not opaque, they will blend with each other anyway.\n *\n * Very handy if you want to use common features of all filters:\n *\n * 1. Assign a blendMode to this filter, blend all elements inside display object with background.\n *\n * 2. To use clipping in display coordinates, assign a filterArea to the same container that has this filter.\n * @memberof PIXI\n */\nexport class AlphaFilter extends Filter\n{\n    /**\n     * @param alpha - Amount of alpha from 0 to 1, where 0 is transparent\n     */\n    constructor(alpha = 1.0)\n    {\n        super(defaultVertex, fragment, { uAlpha: 1 });\n\n        this.alpha = alpha;\n    }\n\n    /**\n     * Coefficient for alpha multiplication\n     * @default 1\n     */\n    get alpha(): number\n    {\n        return this.uniforms.uAlpha;\n    }\n\n    set alpha(value: number)\n    {\n        this.uniforms.uAlpha = value;\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}