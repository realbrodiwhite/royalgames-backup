{"ast":null,"code":"import { curves } from '../const.mjs';\nclass QuadraticUtils {\n  static curveLength(fromX, fromY, cpX, cpY, toX, toY) {\n    const ax = fromX - 2 * cpX + toX;\n    const ay = fromY - 2 * cpY + toY;\n    const bx = 2 * cpX - 2 * fromX;\n    const by = 2 * cpY - 2 * fromY;\n    const a = 4 * (ax * ax + ay * ay);\n    const b = 4 * (ax * bx + ay * by);\n    const c = bx * bx + by * by;\n    const s = 2 * Math.sqrt(a + b + c);\n    const a2 = Math.sqrt(a);\n    const a32 = 2 * a * a2;\n    const c2 = 2 * Math.sqrt(c);\n    const ba = b / a2;\n    return (a32 * s + a2 * b * (s - c2) + (4 * c * a - b * b) * Math.log((2 * a2 + ba + s) / (ba + c2))) / (4 * a32);\n  }\n  static curveTo(cpX, cpY, toX, toY, points) {\n    const fromX = points[points.length - 2];\n    const fromY = points[points.length - 1];\n    const n = curves._segmentsCount(QuadraticUtils.curveLength(fromX, fromY, cpX, cpY, toX, toY));\n    let xa = 0;\n    let ya = 0;\n    for (let i = 1; i <= n; ++i) {\n      const j = i / n;\n      xa = fromX + (cpX - fromX) * j;\n      ya = fromY + (cpY - fromY) * j;\n      points.push(xa + (cpX + (toX - cpX) * j - xa) * j, ya + (cpY + (toY - cpY) * j - ya) * j);\n    }\n  }\n}\nexport { QuadraticUtils };","map":{"version":3,"mappings":";AAMO,MAAMA,cACb;EAcI,OAAOC,WACHA,QAAeC,OACfC,GAAa,OACbC,KAAaC,GACjB;IACU,WAAKC,KAAS,OAAMH,GAAO;IAC3B,WAAKD,KAAS,OAAMK,GAAO;IAC3B,WAAM,CAAM,SAAQ,CAAM;IAC1B,WAAM,CAAM,SAAQ,CAAM;IAChC,MAAMC,CAAI,QAAaC,UAAOC,EAAK;IACnC,MAAMC,CAAI,QAAaF,UAAOC,EAAK;IAC7B,UAAKE,EAAK,QAAOC,EAAK;IAE5B,MAAMC,IAAI,CAAM,QAAKC,IAAK,KAAIJ,IAAIK,CAAC;IAC7B,WAAKC,IAAK,MAAKT,CAAC;IAChB,YAAM,IAAMA,CAAI;IACtB,MAAMU,EAAK,OAAMD,IAAK,MAAKD,CAAC;IAC5B,MAAMG,KAAKR,CAAI;IAGV,cAAMG,IACAM,EAAK,YAASF,EAEX,SAAMF,IAAIR,CAAM,OAAIG,KACrBM,IAAK,KAAM,KAAMG,EAAM,QAAKN,MAAWK,QAAG,MAE5C;EAAA;EAaf,OAAOE,OAAQA,MAAad,GAAa,OAAaF,KAAaiB,MACnE;IACU,cAAQA,MAAO,QAAOC,MAAS;IAC/B,cAAQD,MAAO,QAAOC,MAAS;IAE/B,UAAIC,MAAO,gBACbxB,cAAe,aAAYM,KAAO,SAAOH,GAAK,OAAKC,GAAK,KAAG,CAC/D;IAEA,IAAIqB,EAAK;IACT,IAAIC,EAAK;IAET,SAASC,CAAI,MAAGA,CAAK,OAAG,EAAEA,CAC1B;MACI,MAAMC,IAAID,CAAI;MAETF,aAAU,OAAMnB,KAAS;MACzBoB,aAAU,OAAMxB,KAAS;MAE9BoB,OAAOO,IAAK,MAAQ,CAAQ1B,aAAMA,OAAOyB,CAAM,SAAMA,CACjD,OAAQ,CAAQrB,aAAMA,GAAO,QAAMmB,MAAME,CAAE;IAAA;EACnD;AAER","names":["QuadraticUtils","curveLength","fromY","cpX","toX","toY","fromX","cpY","a","ax","ay","b","bx","by","s","sqrt","c","Math","c2","ba","a2","curveTo","points","length","curves","xa","ya","i","j","push"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/graphics/src/utils/QuadraticUtils.ts"],"sourcesContent":["import { curves } from '../const';\n\n/**\n * Utilities for quadratic curves.\n * @private\n */\nexport class QuadraticUtils\n{\n    /**\n     * Calculate length of quadratic curve\n     * @see {@link http://www.malczak.linuxpl.com/blog/quadratic-bezier-curve-length/}\n     * for the detailed explanation of math behind this.\n     * @private\n     * @param fromX - x-coordinate of curve start point\n     * @param fromY - y-coordinate of curve start point\n     * @param cpX - x-coordinate of curve control point\n     * @param cpY - y-coordinate of curve control point\n     * @param toX - x-coordinate of curve end point\n     * @param toY - y-coordinate of curve end point\n     * @returns - Length of quadratic curve\n     */\n    static curveLength(\n        fromX: number, fromY: number,\n        cpX: number, cpY: number,\n        toX: number, toY: number): number\n    {\n        const ax = fromX - (2.0 * cpX) + toX;\n        const ay = fromY - (2.0 * cpY) + toY;\n        const bx = (2.0 * cpX) - (2.0 * fromX);\n        const by = (2.0 * cpY) - (2.0 * fromY);\n        const a = 4.0 * ((ax * ax) + (ay * ay));\n        const b = 4.0 * ((ax * bx) + (ay * by));\n        const c = (bx * bx) + (by * by);\n\n        const s = 2.0 * Math.sqrt(a + b + c);\n        const a2 = Math.sqrt(a);\n        const a32 = 2.0 * a * a2;\n        const c2 = 2.0 * Math.sqrt(c);\n        const ba = b / a2;\n\n        return (\n            (a32 * s)\n                + (a2 * b * (s - c2))\n                + (\n                    ((4.0 * c * a) - (b * b))\n                   * Math.log(((2.0 * a2) + ba + s) / (ba + c2))\n                )\n        ) / (4.0 * a32);\n    }\n\n    /**\n     * Calculate the points for a quadratic bezier curve and then draws it.\n     * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c\n     * @private\n     * @param cpX - Control point x\n     * @param cpY - Control point y\n     * @param toX - Destination point x\n     * @param toY - Destination point y\n     * @param points - Points to add segments to.\n     */\n    static curveTo(cpX: number, cpY: number, toX: number, toY: number, points: Array<number>): void\n    {\n        const fromX = points[points.length - 2];\n        const fromY = points[points.length - 1];\n\n        const n = curves._segmentsCount(\n            QuadraticUtils.curveLength(fromX, fromY, cpX, cpY, toX, toY)\n        );\n\n        let xa = 0;\n        let ya = 0;\n\n        for (let i = 1; i <= n; ++i)\n        {\n            const j = i / n;\n\n            xa = fromX + ((cpX - fromX) * j);\n            ya = fromY + ((cpY - fromY) * j);\n\n            points.push(xa + (((cpX + ((toX - cpX) * j)) - xa) * j),\n                ya + (((cpY + ((toY - cpY) * j)) - ya) * j));\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}