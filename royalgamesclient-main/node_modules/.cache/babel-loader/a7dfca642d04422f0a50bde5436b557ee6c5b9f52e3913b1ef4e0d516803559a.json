{"ast":null,"code":"import { ExtensionType, extensions } from '@pixi/core';\nclass ResizePlugin {\n  static init(options) {\n    Object.defineProperty(this, \"resizeTo\", {\n      set(dom) {\n        globalThis.removeEventListener(\"resize\", this.queueResize);\n        this._resizeTo = dom;\n        if (dom) {\n          globalThis.addEventListener(\"resize\", this.queueResize);\n          this.resize();\n        }\n      },\n      get() {\n        return this._resizeTo;\n      }\n    });\n    this.queueResize = () => {\n      if (!this._resizeTo) {\n        return;\n      }\n      this.cancelResize();\n      this._resizeId = requestAnimationFrame(() => this.resize());\n    };\n    this.cancelResize = () => {\n      if (this._resizeId) {\n        cancelAnimationFrame(this._resizeId);\n        this._resizeId = null;\n      }\n    };\n    this.resize = () => {\n      if (!this._resizeTo) {\n        return;\n      }\n      this.cancelResize();\n      let width;\n      let height;\n      if (this._resizeTo === globalThis.window) {\n        width = globalThis.innerWidth;\n        height = globalThis.innerHeight;\n      } else {\n        const {\n          clientWidth,\n          clientHeight\n        } = this._resizeTo;\n        width = clientWidth;\n        height = clientHeight;\n      }\n      this.renderer.resize(width, height);\n      this.render();\n    };\n    this._resizeId = null;\n    this._resizeTo = null;\n    this.resizeTo = options.resizeTo || null;\n  }\n  static destroy() {\n    globalThis.removeEventListener(\"resize\", this.queueResize);\n    this.cancelResize();\n    this.cancelResize = null;\n    this.queueResize = null;\n    this.resizeTo = null;\n    this.resize = null;\n  }\n}\nResizePlugin.extension = ExtensionType.Application;\nextensions.add(ResizePlugin);\nexport { ResizePlugin };","map":{"version":3,"mappings":";AAYO,MAAMA,YACb;EAmBI,OAAOC,KAAKC,OACZ;IACWC,sBAAe,MAAM,UAQxB;MACIC,IAAIC,GACJ;QACeC,+BAAoB,QAAU,OAAKC,WAAW;QACzD,KAAKC,SAAY;QACjB,IAAIH,GACJ;UACeC,4BAAiB,QAAU,OAAKC,WAAW;UACtD,KAAKE,MAAO;QAAA;MAChB,CACJ;MACAC,GACAA;QACI,OAAO,IAAK;MAAA;IAChB,CACH;IASL,KAAKH,cAAc,MACnB;MACQ,KAAC,KAAKC,SACV;QACI;MAAA;MAGJ,KAAKG,YAAa;MAGlB,KAAKC,SAAY,yBAAsB,MAAM,KAAKH,QAAQ;IAAA,CAC9D;IAQA,KAAKE,eAAe,MACpB;MACI,IAAI,KAAKC,SACT;QACIC,qBAAqB,KAAKD,SAAS;QACnC,KAAKA,SAAY;MAAA;IACrB,CACJ;IASA,KAAKH,SAAS,MACd;MACQ,KAAC,KAAKD,SACV;QACI;MAAA;MAIJ,KAAKG,YAAa;MAEd;MACA;MAGA,SAAKH,SAAc,gBAAWM,MAClC;QACIC,QAAQT,UAAW;QACnBU,SAASV,UAAW;MAAA,CAIxB;QACU;UAAEW,WAAa;UAAAC;QAAA,IAAiB,IAAK;QAEnCH;QACCC;MAAA;MAGR,cAASP,MAAO,QAAOO,MAAM;MAClC,KAAKG,MAAO;IAAA,CAChB;IAGA,KAAKP,SAAY;IACjB,KAAKJ,SAAY;IACZ,gBAAWN,QAAQkB,QAAY;EAAA;EAQxC,OAAOC,OACPA;IACef,+BAAoB,QAAU,OAAKC,WAAW;IACzD,KAAKI,YAAa;IAClB,KAAKA,YAAe;IACpB,KAAKJ,WAAc;IACnB,KAAKa,QAAW;IAChB,KAAKX,MAAS;EAAA;AAEtB;AA1IIT,YAHS,CAGFsB,YAA+BC,aAAc;AA4IxDC,WAAWC,IAAIzB,YAAY","names":["ResizePlugin","init","options","Object","set","dom","globalThis","queueResize","_resizeTo","resize","get","cancelResize","_resizeId","cancelAnimationFrame","window","width","height","clientWidth","clientHeight","render","resizeTo","destroy","extension","ExtensionType","extensions","add"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/app/src/ResizePlugin.ts"],"sourcesContent":["import { extensions, ExtensionType } from '@pixi/core';\n\nimport type { ExtensionMetadata, Renderer } from '@pixi/core';\nimport type { IApplicationOptions } from './Application';\n\ntype ResizeableRenderer = Pick<Renderer, 'resize'>;\n\n/**\n * Middleware for for Application's resize functionality\n * @private\n * @class\n */\nexport class ResizePlugin\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = ExtensionType.Application;\n\n    public static resizeTo: Window | HTMLElement;\n    public static resize: () => void;\n    public static renderer: ResizeableRenderer;\n    public static queueResize: () => void;\n    public static render: () => void;\n    private static _resizeId: number;\n    private static _resizeTo: Window | HTMLElement;\n    private static cancelResize: () => void;\n\n    /**\n     * Initialize the plugin with scope of application instance\n     * @static\n     * @private\n     * @param {object} [options] - See application options\n     */\n    static init(options?: IApplicationOptions): void\n    {\n        Object.defineProperty(this, 'resizeTo',\n            /**\n             * The HTML element or window to automatically resize the\n             * renderer's view element to match width and height.\n             * @member {Window|HTMLElement}\n             * @name resizeTo\n             * @memberof PIXI.Application#\n             */\n            {\n                set(dom: Window | HTMLElement)\n                {\n                    globalThis.removeEventListener('resize', this.queueResize);\n                    this._resizeTo = dom;\n                    if (dom)\n                    {\n                        globalThis.addEventListener('resize', this.queueResize);\n                        this.resize();\n                    }\n                },\n                get()\n                {\n                    return this._resizeTo;\n                },\n            });\n\n        /**\n         * Resize is throttled, so it's safe to call this multiple times per frame and it'll\n         * only be called once.\n         * @memberof PIXI.Application#\n         * @method queueResize\n         * @private\n         */\n        this.queueResize = (): void =>\n        {\n            if (!this._resizeTo)\n            {\n                return;\n            }\n\n            this.cancelResize();\n\n            // // Throttle resize events per raf\n            this._resizeId = requestAnimationFrame(() => this.resize());\n        };\n\n        /**\n         * Cancel the resize queue.\n         * @memberof PIXI.Application#\n         * @method cancelResize\n         * @private\n         */\n        this.cancelResize = (): void =>\n        {\n            if (this._resizeId)\n            {\n                cancelAnimationFrame(this._resizeId);\n                this._resizeId = null;\n            }\n        };\n\n        /**\n         * Execute an immediate resize on the renderer, this is not\n         * throttled and can be expensive to call many times in a row.\n         * Will resize only if `resizeTo` property is set.\n         * @memberof PIXI.Application#\n         * @method resize\n         */\n        this.resize = (): void =>\n        {\n            if (!this._resizeTo)\n            {\n                return;\n            }\n\n            // clear queue resize\n            this.cancelResize();\n\n            let width: number;\n            let height: number;\n\n            // Resize to the window\n            if (this._resizeTo === globalThis.window)\n            {\n                width = globalThis.innerWidth;\n                height = globalThis.innerHeight;\n            }\n            // Resize to other HTML entities\n            else\n            {\n                const { clientWidth, clientHeight } = this._resizeTo as HTMLElement;\n\n                width = clientWidth;\n                height = clientHeight;\n            }\n\n            this.renderer.resize(width, height);\n            this.render();\n        };\n\n        // On resize\n        this._resizeId = null;\n        this._resizeTo = null;\n        this.resizeTo = options.resizeTo || null;\n    }\n\n    /**\n     * Clean up the ticker, scoped to application\n     * @static\n     * @private\n     */\n    static destroy(): void\n    {\n        globalThis.removeEventListener('resize', this.queueResize);\n        this.cancelResize();\n        this.cancelResize = null;\n        this.queueResize = null;\n        this.resizeTo = null;\n        this.resize = null;\n    }\n}\n\nextensions.add(ResizePlugin);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}