{"ast":null,"code":"import { ExtensionType, extensions } from '@pixi/extensions';\nimport { deprecation } from '@pixi/utils';\nclass PluginSystem {\n  constructor(renderer) {\n    this.renderer = renderer;\n    this.plugins = {};\n    Object.defineProperties(this.plugins, {\n      extract: {\n        enumerable: false,\n        get() {\n          deprecation(\"7.0.0\", \"renderer.plugins.extract has moved to renderer.extract\");\n          return renderer.extract;\n        }\n      },\n      prepare: {\n        enumerable: false,\n        get() {\n          deprecation(\"7.0.0\", \"renderer.plugins.prepare has moved to renderer.prepare\");\n          return renderer.prepare;\n        }\n      },\n      interaction: {\n        enumerable: false,\n        get() {\n          deprecation(\"7.0.0\", \"renderer.plugins.interaction has been deprecated, use renderer.events\");\n          return renderer.events;\n        }\n      }\n    });\n  }\n  init(staticMap) {\n    for (const o in staticMap) {\n      this.plugins[o] = new staticMap[o](this.renderer);\n    }\n  }\n  destroy() {\n    for (const o in this.plugins) {\n      this.plugins[o].destroy();\n      this.plugins[o] = null;\n    }\n  }\n}\nPluginSystem.extension = {\n  type: [ExtensionType.RendererSystem, ExtensionType.CanvasRendererSystem],\n  name: \"_plugin\"\n};\nextensions.add(PluginSystem);\nexport { PluginSystem };","map":{"version":3,"mappings":";;AAgBO,MAAMA,YACb;EAkBIC,YAAYC,QACZ;IACI,KAAKA,QAAW;IAOhB,KAAKC,UAAU,EAAC;IAGTC,wBAAiB,KAAKD,OAAS;MAClCE,OAAS;QACLC,UAAY;QACZC,GACAA;UACIC,YAAY,SAAS,wDAAwD;UAE7E,OAAQN,QAAiB;QAAA;MAC7B,CACJ;MACAO,OAAS;QACLH,UAAY;QACZC,GACAA;UACIC,YAAY,SAAS,wDAAwD;UAE7E,OAAQN,QAAiB;QAAA;MAC7B,CACJ;MACAQ,WAAa;QACTJ,UAAY;QACZC,GACAA;UACIC,YAAY,SAAS,uEAAuE;UAE5F,OAAQN,QAAiB;QAAA;MAC7B;IACJ,CACH;EAAA;EASLS,KAAKC,SACL;IACI,WAAWC,KAAKD,SAChB;MACI,KAAKT,QAAQU,CAAK,QAAKD,SAAU,IAAI,KAAKV,QAAQ;IAAA;EACtD;EAGJY,OACAA;IACe,gBAAK,KAAKX,OACrB;MACS,aAAQU,GAAGC,OAAQ;MACxB,KAAKX,QAAQU,CAAK;IAAA;EACtB;AAER;AApFab,aAGFe,SAA+B;EAClCC,IAAM,GACFC,aAAc,iBACdA,aAAc,sBAClB;EACAC,IAAM;AACV;AA6EJC,WAAWC,IAAIpB,YAAY","names":["PluginSystem","constructor","renderer","plugins","Object","extract","enumerable","get","deprecation","prepare","interaction","init","staticMap","o","destroy","extension","type","ExtensionType","name","extensions","add"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/core/src/plugin/PluginSystem.ts"],"sourcesContent":["import { extensions, ExtensionType } from '@pixi/extensions';\nimport { deprecation } from '@pixi/utils';\n\nimport type { ExtensionMetadata } from '@pixi/extensions';\nimport type { IRenderer } from '../IRenderer';\nimport type { ISystem } from '../system/ISystem';\n\nexport interface IRendererPlugins extends GlobalMixins.IRendererPlugins\n{\n    [key: string]: any;\n}\n\n/**\n * Manages the functionality that allows users to extend pixi functionality via additional plugins.\n * @memberof PIXI\n */\nexport class PluginSystem implements ISystem<IRendererPlugins>\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        type: [\n            ExtensionType.RendererSystem,\n            ExtensionType.CanvasRendererSystem\n        ],\n        name: '_plugin',\n    };\n\n    /**\n     * Collection of plugins.\n     * @readonly\n     * @member {object}\n     */\n    public readonly plugins: IRendererPlugins;\n    private renderer: IRenderer;\n\n    constructor(renderer: IRenderer)\n    {\n        this.renderer = renderer;\n\n        /**\n         * Collection of plugins.\n         * @readonly\n         * @member {object}\n         */\n        this.plugins = {};\n\n        // #if _DEBUG\n        Object.defineProperties(this.plugins, {\n            extract: {\n                enumerable: false,\n                get()\n                {\n                    deprecation('7.0.0', 'renderer.plugins.extract has moved to renderer.extract');\n\n                    return (renderer as any).extract;\n                },\n            },\n            prepare: {\n                enumerable: false,\n                get()\n                {\n                    deprecation('7.0.0', 'renderer.plugins.prepare has moved to renderer.prepare');\n\n                    return (renderer as any).prepare;\n                },\n            },\n            interaction: {\n                enumerable: false,\n                get()\n                {\n                    deprecation('7.0.0', 'renderer.plugins.interaction has been deprecated, use renderer.events');\n\n                    return (renderer as any).events;\n                },\n            },\n        });\n        // #endif\n    }\n\n    /**\n     * Initialize the plugins.\n     * @protected\n     * @param {object} staticMap - The dictionary of statically saved plugins.\n     */\n    init(staticMap: IRendererPlugins): void\n    {\n        for (const o in staticMap)\n        {\n            this.plugins[o] = new (staticMap[o])(this.renderer);\n        }\n    }\n\n    destroy(): void\n    {\n        for (const o in this.plugins)\n        {\n            this.plugins[o].destroy();\n            this.plugins[o] = null;\n        }\n    }\n}\n\nextensions.add(PluginSystem);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}