{"ast":null,"code":"function createIndicesForQuads(size) {\n  let outBuffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  const totalIndices = size * 6;\n  outBuffer = outBuffer || new Uint16Array(totalIndices);\n  if (outBuffer.length !== totalIndices) {\n    throw new Error(\"Out buffer length is incorrect, got \".concat(outBuffer.length, \" and expected \").concat(totalIndices));\n  }\n  for (let i = 0, j = 0; i < totalIndices; i += 6, j += 4) {\n    outBuffer[i + 0] = j + 0;\n    outBuffer[i + 1] = j + 1;\n    outBuffer[i + 2] = j + 2;\n    outBuffer[i + 3] = j + 0;\n    outBuffer[i + 4] = j + 2;\n    outBuffer[i + 5] = j + 3;\n  }\n  return outBuffer;\n}\nexport { createIndicesForQuads };","map":{"version":3,"mappings":"AASI,qCAGJ;EAAA,IAFIA,gFAA8C,IAElD;EAEI,MAAMC,eAAeC,IAAO;EAEhBF,yBAAa,IAAIG,YAAYF,YAAY;EAEjD,cAAUG,WAAWH,YACzB;IACI,MAAM,IAAII,oDAA6CL,UAAUI,iCAAuBH,YAAc;EAAA;EAIjG,aAAI,GAAGK,CAAI,MAAGC,IAAIN,YAAc,OAAK,CAAG,OAAK,CACtD;IACcD,cAAI,KAAKM,CAAI;IACbN,cAAI,KAAKM,CAAI;IACbN,cAAI,KAAKM,CAAI;IACbN,cAAI,KAAKM,CAAI;IACbN,cAAI,KAAKM,CAAI;IACbN,cAAI,KAAKM,CAAI;EAAA;EAGpB;AACX","names":["outBuffer","totalIndices","size","Uint16Array","length","Error","j","i"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/utils/src/data/createIndicesForQuads.ts"],"sourcesContent":["/**\n * Generic Mask Stack data structure\n * @memberof PIXI.utils\n * @function createIndicesForQuads\n * @param {number} size - Number of quads\n * @param {Uint16Array|Uint32Array} [outBuffer] - Buffer for output, length has to be `6 * size`\n * @returns {Uint16Array|Uint32Array} - Resulting index buffer\n */\nexport function createIndicesForQuads(\n    size: number,\n    outBuffer: Uint16Array | Uint32Array | null = null\n): Uint16Array | Uint32Array\n{\n    // the total number of indices in our array, there are 6 points per quad.\n    const totalIndices = size * 6;\n\n    outBuffer = outBuffer || new Uint16Array(totalIndices);\n\n    if (outBuffer.length !== totalIndices)\n    {\n        throw new Error(`Out buffer length is incorrect, got ${outBuffer.length} and expected ${totalIndices}`);\n    }\n\n    // fill the indices with the quads to draw\n    for (let i = 0, j = 0; i < totalIndices; i += 6, j += 4)\n    {\n        outBuffer[i + 0] = j + 0;\n        outBuffer[i + 1] = j + 1;\n        outBuffer[i + 2] = j + 2;\n        outBuffer[i + 3] = j + 0;\n        outBuffer[i + 4] = j + 2;\n        outBuffer[i + 5] = j + 3;\n    }\n\n    return outBuffer;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}