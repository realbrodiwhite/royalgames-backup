{"ast":null,"code":"import { Matrix, utils, MASK_TYPES } from '@pixi/core';\nimport { DisplayObject } from './DisplayObject.mjs';\nconst tempMatrix = new Matrix();\nfunction sortChildren(a, b) {\n  if (a.zIndex === b.zIndex) {\n    return a._lastSortedIndex - b._lastSortedIndex;\n  }\n  return a.zIndex - b.zIndex;\n}\nconst _Container = class extends DisplayObject {\n  constructor() {\n    super();\n    this.children = [];\n    this.sortableChildren = _Container.defaultSortableChildren;\n    this.sortDirty = false;\n  }\n  onChildrenChange(_length) {}\n  addChild() {\n    if (arguments.length > 1) {\n      for (let i = 0; i < arguments.length; i++) {\n        this.addChild(i < 0 || arguments.length <= i ? undefined : arguments[i]);\n      }\n    } else {\n      const child = arguments.length <= 0 ? undefined : arguments[0];\n      if (child.parent) {\n        child.parent.removeChild(child);\n      }\n      child.parent = this;\n      this.sortDirty = true;\n      child.transform._parentID = -1;\n      this.children.push(child);\n      this._boundsID++;\n      this.onChildrenChange(this.children.length - 1);\n      this.emit(\"childAdded\", child, this, this.children.length - 1);\n      child.emit(\"added\", this);\n    }\n    return arguments.length <= 0 ? undefined : arguments[0];\n  }\n  addChildAt(child, index) {\n    if (index < 0 || index > this.children.length) {\n      throw new Error(\"\".concat(child, \"addChildAt: The index \").concat(index, \" supplied is out of bounds \").concat(this.children.length));\n    }\n    if (child.parent) {\n      child.parent.removeChild(child);\n    }\n    child.parent = this;\n    this.sortDirty = true;\n    child.transform._parentID = -1;\n    this.children.splice(index, 0, child);\n    this._boundsID++;\n    this.onChildrenChange(index);\n    child.emit(\"added\", this);\n    this.emit(\"childAdded\", child, this, index);\n    return child;\n  }\n  swapChildren(child, child2) {\n    if (child === child2) {\n      return;\n    }\n    const index1 = this.getChildIndex(child);\n    const index2 = this.getChildIndex(child2);\n    this.children[index1] = child2;\n    this.children[index2] = child;\n    this.onChildrenChange(index1 < index2 ? index1 : index2);\n  }\n  getChildIndex(child) {\n    const index = this.children.indexOf(child);\n    if (index === -1) {\n      throw new Error(\"The supplied DisplayObject must be a child of the caller\");\n    }\n    return index;\n  }\n  setChildIndex(child, index) {\n    if (index < 0 || index >= this.children.length) {\n      throw new Error(\"The index \".concat(index, \" supplied is out of bounds \").concat(this.children.length));\n    }\n    const currentIndex = this.getChildIndex(child);\n    utils.removeItems(this.children, currentIndex, 1);\n    this.children.splice(index, 0, child);\n    this.onChildrenChange(index);\n  }\n  getChildAt(index) {\n    if (index < 0 || index >= this.children.length) {\n      throw new Error(\"getChildAt: Index (\".concat(index, \") does not exist.\"));\n    }\n    return this.children[index];\n  }\n  removeChild() {\n    if (arguments.length > 1) {\n      for (let i = 0; i < arguments.length; i++) {\n        this.removeChild(i < 0 || arguments.length <= i ? undefined : arguments[i]);\n      }\n    } else {\n      const child = arguments.length <= 0 ? undefined : arguments[0];\n      const index = this.children.indexOf(child);\n      if (index === -1) return null;\n      child.parent = null;\n      child.transform._parentID = -1;\n      utils.removeItems(this.children, index, 1);\n      this._boundsID++;\n      this.onChildrenChange(index);\n      child.emit(\"removed\", this);\n      this.emit(\"childRemoved\", child, this, index);\n    }\n    return arguments.length <= 0 ? undefined : arguments[0];\n  }\n  removeChildAt(index) {\n    const child = this.getChildAt(index);\n    child.parent = null;\n    child.transform._parentID = -1;\n    utils.removeItems(this.children, index, 1);\n    this._boundsID++;\n    this.onChildrenChange(index);\n    child.emit(\"removed\", this);\n    this.emit(\"childRemoved\", child, this, index);\n    return child;\n  }\n  removeChildren() {\n    let beginIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let endIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.children.length;\n    const begin = beginIndex;\n    const end = endIndex;\n    const range = end - begin;\n    let removed;\n    if (range > 0 && range <= end) {\n      removed = this.children.splice(begin, range);\n      for (let i = 0; i < removed.length; ++i) {\n        removed[i].parent = null;\n        if (removed[i].transform) {\n          removed[i].transform._parentID = -1;\n        }\n      }\n      this._boundsID++;\n      this.onChildrenChange(beginIndex);\n      for (let i = 0; i < removed.length; ++i) {\n        removed[i].emit(\"removed\", this);\n        this.emit(\"childRemoved\", removed[i], this, i);\n      }\n      return removed;\n    } else if (range === 0 && this.children.length === 0) {\n      return [];\n    }\n    throw new RangeError(\"removeChildren: numeric values are outside the acceptable range.\");\n  }\n  sortChildren() {\n    let sortRequired = false;\n    for (let i = 0, j = this.children.length; i < j; ++i) {\n      const child = this.children[i];\n      child._lastSortedIndex = i;\n      if (!sortRequired && child.zIndex !== 0) {\n        sortRequired = true;\n      }\n    }\n    if (sortRequired && this.children.length > 1) {\n      this.children.sort(sortChildren);\n    }\n    this.sortDirty = false;\n  }\n  updateTransform() {\n    if (this.sortableChildren && this.sortDirty) {\n      this.sortChildren();\n    }\n    this._boundsID++;\n    this.transform.updateTransform(this.parent.transform);\n    this.worldAlpha = this.alpha * this.parent.worldAlpha;\n    for (let i = 0, j = this.children.length; i < j; ++i) {\n      const child = this.children[i];\n      if (child.visible) {\n        child.updateTransform();\n      }\n    }\n  }\n  calculateBounds() {\n    this._bounds.clear();\n    this._calculateBounds();\n    for (let i = 0; i < this.children.length; i++) {\n      const child = this.children[i];\n      if (!child.visible || !child.renderable) {\n        continue;\n      }\n      child.calculateBounds();\n      if (child._mask) {\n        const maskObject = child._mask.isMaskData ? child._mask.maskObject : child._mask;\n        if (maskObject) {\n          maskObject.calculateBounds();\n          this._bounds.addBoundsMask(child._bounds, maskObject._bounds);\n        } else {\n          this._bounds.addBounds(child._bounds);\n        }\n      } else if (child.filterArea) {\n        this._bounds.addBoundsArea(child._bounds, child.filterArea);\n      } else {\n        this._bounds.addBounds(child._bounds);\n      }\n    }\n    this._bounds.updateID = this._boundsID;\n  }\n  getLocalBounds(rect) {\n    let skipChildrenUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const result = super.getLocalBounds(rect);\n    if (!skipChildrenUpdate) {\n      for (let i = 0, j = this.children.length; i < j; ++i) {\n        const child = this.children[i];\n        if (child.visible) {\n          child.updateTransform();\n        }\n      }\n    }\n    return result;\n  }\n  _calculateBounds() {}\n  _renderWithCulling(renderer) {\n    const sourceFrame = renderer.renderTexture.sourceFrame;\n    if (!(sourceFrame.width > 0 && sourceFrame.height > 0)) {\n      return;\n    }\n    let bounds;\n    let transform;\n    if (this.cullArea) {\n      bounds = this.cullArea;\n      transform = this.worldTransform;\n    } else if (this._render !== _Container.prototype._render) {\n      bounds = this.getBounds(true);\n    }\n    const projectionTransform = renderer.projection.transform;\n    if (projectionTransform) {\n      if (transform) {\n        transform = tempMatrix.copyFrom(transform);\n        transform.prepend(projectionTransform);\n      } else {\n        transform = projectionTransform;\n      }\n    }\n    if (bounds && sourceFrame.intersects(bounds, transform)) {\n      this._render(renderer);\n    } else if (this.cullArea) {\n      return;\n    }\n    for (let i = 0, j = this.children.length; i < j; ++i) {\n      const child = this.children[i];\n      const childCullable = child.cullable;\n      child.cullable = childCullable || !this.cullArea;\n      child.render(renderer);\n      child.cullable = childCullable;\n    }\n  }\n  render(renderer) {\n    var _this$filters;\n    if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {\n      return;\n    }\n    if (this._mask || (_this$filters = this.filters) !== null && _this$filters !== void 0 && _this$filters.length) {\n      this.renderAdvanced(renderer);\n    } else if (this.cullable) {\n      this._renderWithCulling(renderer);\n    } else {\n      this._render(renderer);\n      for (let i = 0, j = this.children.length; i < j; ++i) {\n        this.children[i].render(renderer);\n      }\n    }\n  }\n  renderAdvanced(renderer) {\n    var _this$_enabledFilters, _this$_enabledFilters2, _this$_enabledFilters3;\n    const filters = this.filters;\n    const mask = this._mask;\n    if (filters) {\n      if (!this._enabledFilters) {\n        this._enabledFilters = [];\n      }\n      this._enabledFilters.length = 0;\n      for (let i = 0; i < filters.length; i++) {\n        if (filters[i].enabled) {\n          this._enabledFilters.push(filters[i]);\n        }\n      }\n    }\n    const flush = filters && ((_this$_enabledFilters = this._enabledFilters) === null || _this$_enabledFilters === void 0 ? void 0 : _this$_enabledFilters.length) || mask && (!mask.isMaskData || mask.enabled && (mask.autoDetect || mask.type !== MASK_TYPES.NONE));\n    if (flush) {\n      renderer.batch.flush();\n    }\n    if (filters && (_this$_enabledFilters2 = this._enabledFilters) !== null && _this$_enabledFilters2 !== void 0 && _this$_enabledFilters2.length) {\n      renderer.filter.push(this, this._enabledFilters);\n    }\n    if (mask) {\n      renderer.mask.push(this, this._mask);\n    }\n    if (this.cullable) {\n      this._renderWithCulling(renderer);\n    } else {\n      this._render(renderer);\n      for (let i = 0, j = this.children.length; i < j; ++i) {\n        this.children[i].render(renderer);\n      }\n    }\n    if (flush) {\n      renderer.batch.flush();\n    }\n    if (mask) {\n      renderer.mask.pop(this);\n    }\n    if (filters && (_this$_enabledFilters3 = this._enabledFilters) !== null && _this$_enabledFilters3 !== void 0 && _this$_enabledFilters3.length) {\n      renderer.filter.pop();\n    }\n  }\n  _render(_renderer) {}\n  destroy(options) {\n    super.destroy();\n    this.sortDirty = false;\n    const destroyChildren = typeof options === \"boolean\" ? options : options === null || options === void 0 ? void 0 : options.children;\n    const oldChildren = this.removeChildren(0, this.children.length);\n    if (destroyChildren) {\n      for (let i = 0; i < oldChildren.length; ++i) {\n        oldChildren[i].destroy(options);\n      }\n    }\n  }\n  get width() {\n    return this.scale.x * this.getLocalBounds().width;\n  }\n  set width(value) {\n    const width = this.getLocalBounds().width;\n    if (width !== 0) {\n      this.scale.x = value / width;\n    } else {\n      this.scale.x = 1;\n    }\n    this._width = value;\n  }\n  get height() {\n    return this.scale.y * this.getLocalBounds().height;\n  }\n  set height(value) {\n    const height = this.getLocalBounds().height;\n    if (height !== 0) {\n      this.scale.y = value / height;\n    } else {\n      this.scale.y = 1;\n    }\n    this._height = value;\n  }\n};\nlet Container = _Container;\nContainer.defaultSortableChildren = false;\nContainer.prototype.containerUpdateTransform = Container.prototype.updateTransform;\nexport { Container };","map":{"version":3,"mappings":"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","names":["tempMatrix","Matrix","a","b","zIndex","_lastSortedIndex","_Container","DisplayObject","constructor","children","sortableChildren","sortDirty","onChildrenChange","_length","addChild","length","i","child","parent","removeChild","transform","_parentID","push","emit","addChildAt","index","Error","swapChildren","child2","index1","index2","getChildIndex","setChildIndex","utils","removeItems","getChildAt","removeChildAt","removeChildren","beginIndex","endIndex","begin","end","range","removed","splice","RangeError","sortChildren","sortRequired","j","sort","updateTransform","worldAlpha","alpha","visible","calculateBounds","_bounds","clear","_calculateBounds","renderable","_mask","maskObject","isMaskData","addBounds","filterArea","updateID","getLocalBounds","rect","skipChildrenUpdate","_renderWithCulling","renderer","renderTexture","sourceFrame","height","cullArea","bounds","_render","prototype","getBounds","projection","projectionTransform","copyFrom","prepend","intersects","childCullable","render","cullable","_this$filters","renderAdvanced","filters","mask","_enabledFilters","enabled","flush","_this$_enabledFilters","autoDetect","type","MASK_TYPES","batch","_this$_enabledFilters2","filter","pop","_this$_enabledFilters3","_renderer","destroy","options","destroyChildren","oldChildren","width","x","value","scale","_width","y","_height","Container","defaultSortableChildren","containerUpdateTransform"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/display/src/Container.ts"],"sourcesContent":["import { MASK_TYPES, Matrix, utils } from '@pixi/core';\nimport { DisplayObject } from './DisplayObject';\n\nimport type { MaskData, Rectangle, Renderer } from '@pixi/core';\nimport type { IDestroyOptions } from './DisplayObject';\n\nconst tempMatrix = new Matrix();\n\nfunction sortChildren(a: DisplayObject, b: DisplayObject): number\n{\n    if (a.zIndex === b.zIndex)\n    {\n        return a._lastSortedIndex - b._lastSortedIndex;\n    }\n\n    return a.zIndex - b.zIndex;\n}\n\nexport interface Container extends GlobalMixins.Container, DisplayObject {}\n\n/**\n * Container is a general-purpose display object that holds children. It also adds built-in support for advanced\n * rendering features like masking and filtering.\n *\n * It is the base class of all display objects that act as a container for other objects, including Graphics\n * and Sprite.\n * @example\n * import { BlurFilter, Container, Graphics, Sprite } from 'pixi.js';\n *\n * const container = new Container();\n * const sprite = Sprite.from('https://s3-us-west-2.amazonaws.com/s.cdpn.io/693612/IaUrttj.png');\n *\n * sprite.width = 512;\n * sprite.height = 512;\n *\n * // Adds a sprite as a child to this container. As a result, the sprite will be rendered whenever the container\n * // is rendered.\n * container.addChild(sprite);\n *\n * // Blurs whatever is rendered by the container\n * container.filters = [new BlurFilter()];\n *\n * // Only the contents within a circle at the center should be rendered onto the screen.\n * container.mask = new Graphics()\n *     .beginFill(0xffffff)\n *     .drawCircle(sprite.width / 2, sprite.height / 2, Math.min(sprite.width, sprite.height) / 2)\n *     .endFill();\n * @memberof PIXI\n */\nexport class Container<T extends DisplayObject = DisplayObject> extends DisplayObject\n{\n    /**\n     * Sets the default value for the container property `sortableChildren`.\n     * If set to true, the container will sort its children by zIndex value\n     * when `updateTransform()` is called, or manually if `sortChildren()` is called.\n     *\n     * This actually changes the order of elements in the array, so should be treated\n     * as a basic solution that is not performant compared to other solutions,\n     * such as {@link https://github.com/pixijs/layers PixiJS Layers}.\n     *\n     * Also be aware of that this may not work nicely with the `addChildAt()` function,\n     * as the `zIndex` sorting may cause the child to automatically sorted to another position.\n     * @static\n     */\n    public static defaultSortableChildren = false;\n\n    /**\n     * The array of children of this container.\n     * @readonly\n     */\n    public readonly children: T[];\n\n    /**\n     * If set to true, the container will sort its children by `zIndex` value\n     * when `updateTransform()` is called, or manually if `sortChildren()` is called.\n     *\n     * This actually changes the order of elements in the array, so should be treated\n     * as a basic solution that is not performant compared to other solutions,\n     * such as {@link https://github.com/pixijs/layers PixiJS Layers}\n     *\n     * Also be aware of that this may not work nicely with the `addChildAt()` function,\n     * as the `zIndex` sorting may cause the child to automatically sorted to another position.\n     * @see PIXI.Container.defaultSortableChildren\n     */\n    public sortableChildren: boolean;\n\n    /**\n     * Should children be sorted by zIndex at the next updateTransform call.\n     *\n     * Will get automatically set to true if a new child is added, or if a child's zIndex changes.\n     */\n    public sortDirty: boolean;\n    public parent: Container;\n    public containerUpdateTransform: () => void;\n\n    protected _width: number;\n    protected _height: number;\n\n    constructor()\n    {\n        super();\n\n        this.children = [];\n        this.sortableChildren = Container.defaultSortableChildren;\n        this.sortDirty = false;\n\n        /**\n         * Fired when a DisplayObject is added to this Container.\n         * @event PIXI.Container#childAdded\n         * @param {PIXI.DisplayObject} child - The child added to the Container.\n         * @param {PIXI.Container} container - The container that added the child.\n         * @param {number} index - The children's index of the added child.\n         */\n\n        /**\n         * Fired when a DisplayObject is removed from this Container.\n         * @event PIXI.Container#childRemoved\n         * @param {PIXI.DisplayObject} child - The child removed from the Container.\n         * @param {PIXI.Container} container - The container that removed the child.\n         * @param {number} index - The former children's index of the removed child.\n         */\n    }\n\n    /**\n     * Overridable method that can be used by Container subclasses whenever the children array is modified.\n     * @param _length\n     */\n    protected onChildrenChange(_length?: number): void\n    {\n        /* empty */\n    }\n\n    /**\n     * Adds one or more children to the container.\n     *\n     * Multiple items can be added like so: `myContainer.addChild(thingOne, thingTwo, thingThree)`\n     * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to add to the container\n     * @returns {PIXI.DisplayObject} - The first child that was added.\n     */\n    addChild<U extends T[]>(...children: U): U[0]\n    {\n        // if there is only one argument we can bypass looping through the them\n        if (children.length > 1)\n        {\n            // loop through the array and add all children\n            for (let i = 0; i < children.length; i++)\n            {\n                // eslint-disable-next-line prefer-rest-params\n                this.addChild(children[i]);\n            }\n        }\n        else\n        {\n            const child = children[0];\n            // if the child has a parent then lets remove it as PixiJS objects can only exist in one place\n\n            if (child.parent)\n            {\n                child.parent.removeChild(child);\n            }\n\n            child.parent = this;\n            this.sortDirty = true;\n\n            // ensure child transform will be recalculated\n            child.transform._parentID = -1;\n\n            this.children.push(child);\n\n            // ensure bounds will be recalculated\n            this._boundsID++;\n\n            // TODO - lets either do all callbacks or all events.. not both!\n            this.onChildrenChange(this.children.length - 1);\n            this.emit('childAdded', child, this, this.children.length - 1);\n            child.emit('added', this);\n        }\n\n        return children[0];\n    }\n\n    /**\n     * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown\n     * @param {PIXI.DisplayObject} child - The child to add\n     * @param {number} index - The index to place the child in\n     * @returns {PIXI.DisplayObject} The child that was added.\n     */\n    addChildAt<U extends T>(child: U, index: number): U\n    {\n        if (index < 0 || index > this.children.length)\n        {\n            throw new Error(`${child}addChildAt: The index ${index} supplied is out of bounds ${this.children.length}`);\n        }\n\n        if (child.parent)\n        {\n            child.parent.removeChild(child);\n        }\n\n        child.parent = this;\n        this.sortDirty = true;\n\n        // ensure child transform will be recalculated\n        child.transform._parentID = -1;\n\n        this.children.splice(index, 0, child);\n\n        // ensure bounds will be recalculated\n        this._boundsID++;\n\n        // TODO - lets either do all callbacks or all events.. not both!\n        this.onChildrenChange(index);\n        child.emit('added', this);\n        this.emit('childAdded', child, this, index);\n\n        return child;\n    }\n\n    /**\n     * Swaps the position of 2 Display Objects within this container.\n     * @param child - First display object to swap\n     * @param child2 - Second display object to swap\n     */\n    swapChildren(child: T, child2: T): void\n    {\n        if (child === child2)\n        {\n            return;\n        }\n\n        const index1 = this.getChildIndex(child);\n        const index2 = this.getChildIndex(child2);\n\n        this.children[index1] = child2;\n        this.children[index2] = child;\n        this.onChildrenChange(index1 < index2 ? index1 : index2);\n    }\n\n    /**\n     * Returns the index position of a child DisplayObject instance\n     * @param child - The DisplayObject instance to identify\n     * @returns - The index position of the child display object to identify\n     */\n    getChildIndex(child: T): number\n    {\n        const index = this.children.indexOf(child);\n\n        if (index === -1)\n        {\n            throw new Error('The supplied DisplayObject must be a child of the caller');\n        }\n\n        return index;\n    }\n\n    /**\n     * Changes the position of an existing child in the display object container\n     * @param child - The child DisplayObject instance for which you want to change the index number\n     * @param index - The resulting index number for the child display object\n     */\n    setChildIndex(child: T, index: number): void\n    {\n        if (index < 0 || index >= this.children.length)\n        {\n            throw new Error(`The index ${index} supplied is out of bounds ${this.children.length}`);\n        }\n\n        const currentIndex = this.getChildIndex(child);\n\n        utils.removeItems(this.children, currentIndex, 1); // remove from old position\n        this.children.splice(index, 0, child); // add at new position\n\n        this.onChildrenChange(index);\n    }\n\n    /**\n     * Returns the child at the specified index\n     * @param index - The index to get the child at\n     * @returns - The child at the given index, if any.\n     */\n    getChildAt(index: number): T\n    {\n        if (index < 0 || index >= this.children.length)\n        {\n            throw new Error(`getChildAt: Index (${index}) does not exist.`);\n        }\n\n        return this.children[index];\n    }\n\n    /**\n     * Removes one or more children from the container.\n     * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to remove\n     * @returns {PIXI.DisplayObject} The first child that was removed.\n     */\n    removeChild<U extends T[]>(...children: U): U[0]\n    {\n        // if there is only one argument we can bypass looping through the them\n        if (children.length > 1)\n        {\n            // loop through the arguments property and remove all children\n            for (let i = 0; i < children.length; i++)\n            {\n                this.removeChild(children[i]);\n            }\n        }\n        else\n        {\n            const child = children[0];\n            const index = this.children.indexOf(child);\n\n            if (index === -1) return null;\n\n            child.parent = null;\n            // ensure child transform will be recalculated\n            child.transform._parentID = -1;\n            utils.removeItems(this.children, index, 1);\n\n            // ensure bounds will be recalculated\n            this._boundsID++;\n\n            // TODO - lets either do all callbacks or all events.. not both!\n            this.onChildrenChange(index);\n            child.emit('removed', this);\n            this.emit('childRemoved', child, this, index);\n        }\n\n        return children[0];\n    }\n\n    /**\n     * Removes a child from the specified index position.\n     * @param index - The index to get the child from\n     * @returns The child that was removed.\n     */\n    removeChildAt(index: number): T\n    {\n        const child = this.getChildAt(index);\n\n        // ensure child transform will be recalculated..\n        child.parent = null;\n        child.transform._parentID = -1;\n        utils.removeItems(this.children, index, 1);\n\n        // ensure bounds will be recalculated\n        this._boundsID++;\n\n        // TODO - lets either do all callbacks or all events.. not both!\n        this.onChildrenChange(index);\n        child.emit('removed', this);\n        this.emit('childRemoved', child, this, index);\n\n        return child;\n    }\n\n    /**\n     * Removes all children from this container that are within the begin and end indexes.\n     * @param beginIndex - The beginning position.\n     * @param endIndex - The ending position. Default value is size of the container.\n     * @returns - List of removed children\n     */\n    removeChildren(beginIndex = 0, endIndex = this.children.length): T[]\n    {\n        const begin = beginIndex;\n        const end = endIndex;\n        const range = end - begin;\n        let removed;\n\n        if (range > 0 && range <= end)\n        {\n            removed = this.children.splice(begin, range);\n\n            for (let i = 0; i < removed.length; ++i)\n            {\n                removed[i].parent = null;\n                if (removed[i].transform)\n                {\n                    removed[i].transform._parentID = -1;\n                }\n            }\n\n            this._boundsID++;\n\n            this.onChildrenChange(beginIndex);\n\n            for (let i = 0; i < removed.length; ++i)\n            {\n                removed[i].emit('removed', this);\n                this.emit('childRemoved', removed[i], this, i);\n            }\n\n            return removed;\n        }\n        else if (range === 0 && this.children.length === 0)\n        {\n            return [];\n        }\n\n        throw new RangeError('removeChildren: numeric values are outside the acceptable range.');\n    }\n\n    /** Sorts children by zIndex. Previous order is maintained for 2 children with the same zIndex. */\n    sortChildren(): void\n    {\n        let sortRequired = false;\n\n        for (let i = 0, j = this.children.length; i < j; ++i)\n        {\n            const child = this.children[i];\n\n            child._lastSortedIndex = i;\n\n            if (!sortRequired && child.zIndex !== 0)\n            {\n                sortRequired = true;\n            }\n        }\n\n        if (sortRequired && this.children.length > 1)\n        {\n            this.children.sort(sortChildren);\n        }\n\n        this.sortDirty = false;\n    }\n\n    /** Updates the transform on all children of this container for rendering. */\n    updateTransform(): void\n    {\n        if (this.sortableChildren && this.sortDirty)\n        {\n            this.sortChildren();\n        }\n\n        this._boundsID++;\n\n        this.transform.updateTransform(this.parent.transform);\n\n        // TODO: check render flags, how to process stuff here\n        this.worldAlpha = this.alpha * this.parent.worldAlpha;\n\n        for (let i = 0, j = this.children.length; i < j; ++i)\n        {\n            const child = this.children[i];\n\n            if (child.visible)\n            {\n                child.updateTransform();\n            }\n        }\n    }\n\n    /**\n     * Recalculates the bounds of the container.\n     *\n     * This implementation will automatically fit the children's bounds into the calculation. Each child's bounds\n     * is limited to its mask's bounds or filterArea, if any is applied.\n     */\n    calculateBounds(): void\n    {\n        this._bounds.clear();\n\n        this._calculateBounds();\n\n        for (let i = 0; i < this.children.length; i++)\n        {\n            const child = this.children[i];\n\n            if (!child.visible || !child.renderable)\n            {\n                continue;\n            }\n\n            child.calculateBounds();\n\n            // TODO: filter+mask, need to mask both somehow\n            if (child._mask)\n            {\n                const maskObject = ((child._mask as MaskData).isMaskData\n                    ? (child._mask as MaskData).maskObject : child._mask) as Container;\n\n                if (maskObject)\n                {\n                    maskObject.calculateBounds();\n                    this._bounds.addBoundsMask(child._bounds, maskObject._bounds);\n                }\n                else\n                {\n                    this._bounds.addBounds(child._bounds);\n                }\n            }\n            else if (child.filterArea)\n            {\n                this._bounds.addBoundsArea(child._bounds, child.filterArea);\n            }\n            else\n            {\n                this._bounds.addBounds(child._bounds);\n            }\n        }\n\n        this._bounds.updateID = this._boundsID;\n    }\n\n    /**\n     * Retrieves the local bounds of the displayObject as a rectangle object.\n     *\n     * Calling `getLocalBounds` may invalidate the `_bounds` of the whole subtree below. If using it inside a render()\n     * call, it is advised to call `getBounds()` immediately after to recalculate the world bounds of the subtree.\n     * @param rect - Optional rectangle to store the result of the bounds calculation.\n     * @param skipChildrenUpdate - Setting to `true` will stop re-calculation of children transforms,\n     *  it was default behaviour of pixi 4.0-5.2 and caused many problems to users.\n     * @returns - The rectangular bounding area.\n     */\n    public getLocalBounds(rect?: Rectangle, skipChildrenUpdate = false): Rectangle\n    {\n        const result = super.getLocalBounds(rect);\n\n        if (!skipChildrenUpdate)\n        {\n            for (let i = 0, j = this.children.length; i < j; ++i)\n            {\n                const child = this.children[i];\n\n                if (child.visible)\n                {\n                    child.updateTransform();\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Recalculates the content bounds of this object. This should be overriden to\n     * calculate the bounds of this specific object (not including children).\n     * @protected\n     */\n    protected _calculateBounds(): void\n    {\n        // FILL IN//\n    }\n\n    /**\n     * Renders this object and its children with culling.\n     * @protected\n     * @param {PIXI.Renderer} renderer - The renderer\n     */\n    protected _renderWithCulling(renderer: Renderer): void\n    {\n        const sourceFrame = renderer.renderTexture.sourceFrame;\n\n        // If the source frame is empty, stop rendering.\n        if (!(sourceFrame.width > 0 && sourceFrame.height > 0))\n        {\n            return;\n        }\n\n        // Render the content of the container only if its bounds intersect with the source frame.\n        // All filters are on the stack at this point, and the filter source frame is bound:\n        // therefore, even if the bounds to non intersect the filter frame, the filter\n        // is still applied and any filter padding that is in the frame is rendered correctly.\n\n        let bounds: Rectangle;\n        let transform: Matrix;\n\n        // If cullArea is set, we use this rectangle instead of the bounds of the object. The cullArea\n        // rectangle must completely contain the container and its children including filter padding.\n        if (this.cullArea)\n        {\n            bounds = this.cullArea;\n            transform = this.worldTransform;\n        }\n        // If the container doesn't override _render, we can skip the bounds calculation and intersection test.\n        else if (this._render !== Container.prototype._render)\n        {\n            bounds = this.getBounds(true);\n        }\n\n        // Prepend the transform that is appended to the projection matrix.\n        const projectionTransform = renderer.projection.transform;\n\n        if (projectionTransform)\n        {\n            if (transform)\n            {\n                transform = tempMatrix.copyFrom(transform);\n                transform.prepend(projectionTransform);\n            }\n            else\n            {\n                transform = projectionTransform;\n            }\n        }\n\n        // Render the container if the source frame intersects the bounds.\n        if (bounds && sourceFrame.intersects(bounds, transform))\n        {\n            this._render(renderer);\n        }\n        // If the bounds are defined by cullArea and do not intersect with the source frame, stop rendering.\n        else if (this.cullArea)\n        {\n            return;\n        }\n\n        // Unless cullArea is set, we cannot skip the children if the bounds of the container do not intersect\n        // the source frame, because the children might have filters with nonzero padding, which may intersect\n        // with the source frame while the bounds do not: filter padding is not included in the bounds.\n\n        // If cullArea is not set, render the children with culling temporarily enabled so that they are not rendered\n        // if they are out of frame; otherwise, render the children normally.\n        for (let i = 0, j = this.children.length; i < j; ++i)\n        {\n            const child = this.children[i];\n            const childCullable = child.cullable;\n\n            child.cullable = childCullable || !this.cullArea;\n            child.render(renderer);\n            child.cullable = childCullable;\n        }\n    }\n\n    /**\n     * Renders the object using the WebGL renderer.\n     *\n     * The [_render]{@link PIXI.Container#_render} method is be overriden for rendering the contents of the\n     * container itself. This `render` method will invoke it, and also invoke the `render` methods of all\n     * children afterward.\n     *\n     * If `renderable` or `visible` is false or if `worldAlpha` is not positive or if `cullable` is true and\n     * the bounds of this object are out of frame, this implementation will entirely skip rendering.\n     * See {@link PIXI.DisplayObject} for choosing between `renderable` or `visible`. Generally,\n     * setting alpha to zero is not recommended for purely skipping rendering.\n     *\n     * When your scene becomes large (especially when it is larger than can be viewed in a single screen), it is\n     * advised to employ **culling** to automatically skip rendering objects outside of the current screen.\n     * See [cullable]{@link PIXI.DisplayObject#cullable} and [cullArea]{@link PIXI.DisplayObject#cullArea}.\n     * Other culling methods might be better suited for a large number static objects; see\n     * [@pixi-essentials/cull]{@link https://www.npmjs.com/package/@pixi-essentials/cull} and\n     * [pixi-cull]{@link https://www.npmjs.com/package/pixi-cull}.\n     *\n     * The [renderAdvanced]{@link PIXI.Container#renderAdvanced} method is internally used when when masking or\n     * filtering is applied on a container. This does, however, break batching and can affect performance when\n     * masking and filtering is applied extensively throughout the scene graph.\n     * @param renderer - The renderer\n     */\n    render(renderer: Renderer): void\n    {\n        // if the object is not visible or the alpha is 0 then no need to render this element\n        if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n        {\n            return;\n        }\n\n        // do a quick check to see if this element has a mask or a filter.\n        if (this._mask || this.filters?.length)\n        {\n            this.renderAdvanced(renderer);\n        }\n        else if (this.cullable)\n        {\n            this._renderWithCulling(renderer);\n        }\n        else\n        {\n            this._render(renderer);\n\n            for (let i = 0, j = this.children.length; i < j; ++i)\n            {\n                this.children[i].render(renderer);\n            }\n        }\n    }\n\n    /**\n     * Render the object using the WebGL renderer and advanced features.\n     * @param renderer - The renderer\n     */\n    protected renderAdvanced(renderer: Renderer): void\n    {\n        const filters = this.filters;\n        const mask = this._mask as MaskData;\n\n        // push filter first as we need to ensure the stencil buffer is correct for any masking\n        if (filters)\n        {\n            if (!this._enabledFilters)\n            {\n                this._enabledFilters = [];\n            }\n\n            this._enabledFilters.length = 0;\n\n            for (let i = 0; i < filters.length; i++)\n            {\n                if (filters[i].enabled)\n                {\n                    this._enabledFilters.push(filters[i]);\n                }\n            }\n        }\n\n        const flush = (filters && this._enabledFilters?.length)\n            || (mask && (!mask.isMaskData\n                || (mask.enabled && (mask.autoDetect || mask.type !== MASK_TYPES.NONE))));\n\n        if (flush)\n        {\n            renderer.batch.flush();\n        }\n\n        if (filters && this._enabledFilters?.length)\n        {\n            renderer.filter.push(this, this._enabledFilters);\n        }\n\n        if (mask)\n        {\n            renderer.mask.push(this, this._mask);\n        }\n\n        if (this.cullable)\n        {\n            this._renderWithCulling(renderer);\n        }\n        else\n        {\n            this._render(renderer);\n\n            for (let i = 0, j = this.children.length; i < j; ++i)\n            {\n                this.children[i].render(renderer);\n            }\n        }\n\n        if (flush)\n        {\n            renderer.batch.flush();\n        }\n\n        if (mask)\n        {\n            renderer.mask.pop(this);\n        }\n\n        if (filters && this._enabledFilters?.length)\n        {\n            renderer.filter.pop();\n        }\n    }\n\n    /**\n     * To be overridden by the subclasses.\n     * @param _renderer - The renderer\n     */\n    protected _render(_renderer: Renderer): void // eslint-disable-line no-unused-vars\n    {\n        // this is where content itself gets rendered...\n    }\n\n    /**\n     * Removes all internal references and listeners as well as removes children from the display list.\n     * Do not use a Container after calling `destroy`.\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy\n     *  method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the texture of the child sprite\n     * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the base texture of the child sprite\n     */\n    destroy(options?: IDestroyOptions | boolean): void\n    {\n        super.destroy();\n\n        this.sortDirty = false;\n\n        const destroyChildren = typeof options === 'boolean' ? options : options?.children;\n\n        const oldChildren = this.removeChildren(0, this.children.length);\n\n        if (destroyChildren)\n        {\n            for (let i = 0; i < oldChildren.length; ++i)\n            {\n                oldChildren[i].destroy(options);\n            }\n        }\n    }\n\n    /** The width of the Container, setting this will actually modify the scale to achieve the value set. */\n    get width(): number\n    {\n        return this.scale.x * this.getLocalBounds().width;\n    }\n\n    set width(value: number)\n    {\n        const width = this.getLocalBounds().width;\n\n        if (width !== 0)\n        {\n            this.scale.x = value / width;\n        }\n        else\n        {\n            this.scale.x = 1;\n        }\n\n        this._width = value;\n    }\n\n    /** The height of the Container, setting this will actually modify the scale to achieve the value set. */\n    get height(): number\n    {\n        return this.scale.y * this.getLocalBounds().height;\n    }\n\n    set height(value: number)\n    {\n        const height = this.getLocalBounds().height;\n\n        if (height !== 0)\n        {\n            this.scale.y = value / height;\n        }\n        else\n        {\n            this.scale.y = 1;\n        }\n\n        this._height = value;\n    }\n}\n\n/**\n * Container default updateTransform, does update children of container.\n * Will crash if there's no parent element.\n * @memberof PIXI.Container#\n * @method containerUpdateTransform\n */\nContainer.prototype.containerUpdateTransform = Container.prototype.updateTransform;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}