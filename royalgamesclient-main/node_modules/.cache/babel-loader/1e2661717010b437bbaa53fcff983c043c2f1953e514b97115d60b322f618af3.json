{"ast":null,"code":"import { ExtensionType, extensions } from '@pixi/extensions';\nclass ObjectRendererSystem {\n  constructor(renderer) {\n    this.renderer = renderer;\n  }\n  render(displayObject, options) {\n    var _clear;\n    const renderer = this.renderer;\n    let renderTexture;\n    let clear;\n    let transform;\n    let skipUpdateTransform;\n    if (options) {\n      renderTexture = options.renderTexture;\n      clear = options.clear;\n      transform = options.transform;\n      skipUpdateTransform = options.skipUpdateTransform;\n    }\n    this.renderingToScreen = !renderTexture;\n    renderer.runners.prerender.emit();\n    renderer.emit(\"prerender\");\n    renderer.projection.transform = transform;\n    if (renderer.context.isLost) {\n      return;\n    }\n    if (!renderTexture) {\n      this.lastObjectRendered = displayObject;\n    }\n    if (!skipUpdateTransform) {\n      const cacheParent = displayObject.enableTempParent();\n      displayObject.updateTransform();\n      displayObject.disableTempParent(cacheParent);\n    }\n    renderer.renderTexture.bind(renderTexture);\n    renderer.batch.currentRenderer.start();\n    if ((_clear = clear) !== null && _clear !== void 0 ? _clear : renderer.background.clearBeforeRender) {\n      renderer.renderTexture.clear();\n    }\n    displayObject.render(renderer);\n    renderer.batch.currentRenderer.flush();\n    if (renderTexture) {\n      if (options.blit) {\n        renderer.framebuffer.blit();\n      }\n      renderTexture.baseTexture.update();\n    }\n    renderer.runners.postrender.emit();\n    renderer.projection.transform = null;\n    renderer.emit(\"postrender\");\n  }\n  destroy() {\n    this.renderer = null;\n    this.lastObjectRendered = null;\n  }\n}\nObjectRendererSystem.extension = {\n  type: ExtensionType.RendererSystem,\n  name: \"objectRenderer\"\n};\nextensions.add(ObjectRendererSystem);\nexport { ObjectRendererSystem };","map":{"version":3,"mappings":";AAcO,MAAMA,oBACb;EAuBIC,YAAYC,QACZ;IACI,KAAKA,QAAW;EAAA;EAQpBC,OAAOC,eAAkCC,OACzC;IAAA;IACI,MAAMH,WAAW,IAAK;IAElB;IACA;IACA;IACA;IAEJ,IAAIG,OACJ;MACIC,gBAAgBD,OAAQ;MACxBE,QAAQF,OAAQ;MAChBG,YAAYH,OAAQ;MACpBI,sBAAsBJ,OAAQ;IAAA;IAIlC,KAAKK,oBAAoB,CAACJ;IAEjBJ,iBAAQS,UAAUC,IAAK;IAChCV,SAASU,KAAK,WAAW;IAGzBV,SAASW,WAAWL,SAAY;IAG5B,aAASM,QAAQC,MACrB;MACI;IAAA;IAGJ,IAAI,CAACT,aACL;MACI,KAAKU,kBAAqB;IAAA;IAG9B,IAAI,CAACP,mBACL;MAEU,oBAAcL,cAAca,gBAAiB;MAEnDb,cAAcc,eAAgB;MAC9Bd,cAAce,kBAAkBC,WAAW;IAAA;IAItClB,uBAAcmB,KAAKf,aAAa;IAChCJ,eAAMoB,gBAAgBC,KAAM;IAEjC,8DAASrB,QAAS,YAAWsB,iBACjC;MACItB,SAASI,cAAcC,KAAM;IAAA;IAGjCH,cAAcD,OAAOD,QAAQ;IAGpBA,eAAMoB,gBAAgBG,KAAM;IAErC,IAAInB,aACJ;MACI,IAAID,QAAQqB,IACZ;QACIxB,SAASyB,YAAYD,IAAK;MAAA;MAG9BpB,cAAcsB,YAAYC,MAAO;IAAA;IAG5B3B,iBAAQ4B,WAAWlB,IAAK;IAGjCV,SAASW,WAAWL,SAAY;IAEhCN,SAASU,KAAK,YAAY;EAAA;EAG9BmB,OACAA;IAEI,KAAK7B,QAAW;IAChB,KAAKc,kBAAqB;EAAA;AAElC;AAtHahB,qBAGFgC,SAA+B;EAClCC,MAAMC,aAAc;EACpBC,IAAM;AACV;AAkHJC,WAAWC,IAAIrC,oBAAoB","names":["ObjectRendererSystem","constructor","renderer","render","displayObject","options","renderTexture","clear","transform","skipUpdateTransform","renderingToScreen","prerender","emit","projection","context","isLost","lastObjectRendered","enableTempParent","updateTransform","disableTempParent","cacheParent","bind","currentRenderer","start","clearBeforeRender","flush","blit","framebuffer","baseTexture","update","postrender","destroy","extension","type","ExtensionType","name","extensions","add"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/core/src/render/ObjectRendererSystem.ts"],"sourcesContent":["import { extensions, ExtensionType } from '@pixi/extensions';\n\nimport type { ExtensionMetadata } from '@pixi/extensions';\nimport type { Matrix } from '@pixi/math';\nimport type { IRenderableObject, IRendererRenderOptions } from '../IRenderer';\nimport type { Renderer } from '../Renderer';\nimport type { RenderTexture } from '../renderTexture/RenderTexture';\nimport type { ISystem } from '../system/ISystem';\n\n/**\n * system that provides a render function that focussing on rendering Pixi Scene Graph objects\n * to either the main view or to a renderTexture.  Used for Canvas `WebGL` contexts\n * @memberof PIXI\n */\nexport class ObjectRendererSystem implements ISystem\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        type: ExtensionType.RendererSystem,\n        name: 'objectRenderer',\n    };\n\n    renderer: Renderer;\n\n    /**\n     * Flag if we are rendering to the screen vs renderTexture\n     * @readonly\n     * @default true\n     */\n    renderingToScreen: boolean;\n\n    /**\n     * the last object rendered by the renderer. Useful for other plugins like interaction managers\n     * @readonly\n     */\n    lastObjectRendered: IRenderableObject;\n\n    // renderers scene graph!\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * Renders the object to its WebGL view.\n     * @param displayObject - The object to be rendered.\n     * @param options - the options to be passed to the renderer\n     */\n    render(displayObject: IRenderableObject, options?: IRendererRenderOptions): void\n    {\n        const renderer = this.renderer;\n\n        let renderTexture: RenderTexture;\n        let clear: boolean;\n        let transform: Matrix;\n        let skipUpdateTransform: boolean;\n\n        if (options)\n        {\n            renderTexture = options.renderTexture;\n            clear = options.clear;\n            transform = options.transform;\n            skipUpdateTransform = options.skipUpdateTransform;\n        }\n\n        // can be handy to know!\n        this.renderingToScreen = !renderTexture;\n\n        renderer.runners.prerender.emit();\n        renderer.emit('prerender');\n\n        // apply a transform at a GPU level\n        renderer.projection.transform = transform;\n\n        // no point rendering if our context has been blown up!\n        if (renderer.context.isLost)\n        {\n            return;\n        }\n\n        if (!renderTexture)\n        {\n            this.lastObjectRendered = displayObject;\n        }\n\n        if (!skipUpdateTransform)\n        {\n            // update the scene graph\n            const cacheParent = displayObject.enableTempParent();\n\n            displayObject.updateTransform();\n            displayObject.disableTempParent(cacheParent);\n            // displayObject.hitArea = //TODO add a temp hit area\n        }\n\n        renderer.renderTexture.bind(renderTexture);\n        renderer.batch.currentRenderer.start();\n\n        if (clear ?? renderer.background.clearBeforeRender)\n        {\n            renderer.renderTexture.clear();\n        }\n\n        displayObject.render(renderer);\n\n        // apply transform..\n        renderer.batch.currentRenderer.flush();\n\n        if (renderTexture)\n        {\n            if (options.blit)\n            {\n                renderer.framebuffer.blit();\n            }\n\n            renderTexture.baseTexture.update();\n        }\n\n        renderer.runners.postrender.emit();\n\n        // reset transform after render\n        renderer.projection.transform = null;\n\n        renderer.emit('postrender');\n    }\n\n    destroy(): void\n    {\n        // ka pow!\n        this.renderer = null;\n        this.lastObjectRendered = null;\n    }\n}\n\nextensions.add(ObjectRendererSystem);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}