{"ast":null,"code":"import { ENV, BUFFER_BITS, MSAA_QUALITY } from '@pixi/constants';\nimport { ExtensionType, extensions } from '@pixi/extensions';\nimport { Rectangle } from '@pixi/math';\nimport { settings } from '@pixi/settings';\nimport { Framebuffer } from './Framebuffer.mjs';\nimport { GLFramebuffer } from './GLFramebuffer.mjs';\nconst tempRectangle = new Rectangle();\nclass FramebufferSystem {\n  constructor(renderer) {\n    this.renderer = renderer;\n    this.managedFramebuffers = [];\n    this.unknownFramebuffer = new Framebuffer(10, 10);\n    this.msaaSamples = null;\n  }\n  contextChange() {\n    this.disposeAll(true);\n    const gl = this.gl = this.renderer.gl;\n    this.CONTEXT_UID = this.renderer.CONTEXT_UID;\n    this.current = this.unknownFramebuffer;\n    this.viewport = new Rectangle();\n    this.hasMRT = true;\n    this.writeDepthTexture = true;\n    if (this.renderer.context.webGLVersion === 1) {\n      let nativeDrawBuffersExtension = this.renderer.context.extensions.drawBuffers;\n      let nativeDepthTextureExtension = this.renderer.context.extensions.depthTexture;\n      if (settings.PREFER_ENV === ENV.WEBGL_LEGACY) {\n        nativeDrawBuffersExtension = null;\n        nativeDepthTextureExtension = null;\n      }\n      if (nativeDrawBuffersExtension) {\n        gl.drawBuffers = activeTextures => nativeDrawBuffersExtension.drawBuffersWEBGL(activeTextures);\n      } else {\n        this.hasMRT = false;\n        gl.drawBuffers = () => {};\n      }\n      if (!nativeDepthTextureExtension) {\n        this.writeDepthTexture = false;\n      }\n    } else {\n      this.msaaSamples = gl.getInternalformatParameter(gl.RENDERBUFFER, gl.RGBA8, gl.SAMPLES);\n    }\n  }\n  bind(framebuffer, frame) {\n    let mipLevel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    const {\n      gl\n    } = this;\n    if (framebuffer) {\n      const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID] || this.initFramebuffer(framebuffer);\n      if (this.current !== framebuffer) {\n        this.current = framebuffer;\n        gl.bindFramebuffer(gl.FRAMEBUFFER, fbo.framebuffer);\n      }\n      if (fbo.mipLevel !== mipLevel) {\n        framebuffer.dirtyId++;\n        framebuffer.dirtyFormat++;\n        fbo.mipLevel = mipLevel;\n      }\n      if (fbo.dirtyId !== framebuffer.dirtyId) {\n        fbo.dirtyId = framebuffer.dirtyId;\n        if (fbo.dirtyFormat !== framebuffer.dirtyFormat) {\n          fbo.dirtyFormat = framebuffer.dirtyFormat;\n          fbo.dirtySize = framebuffer.dirtySize;\n          this.updateFramebuffer(framebuffer, mipLevel);\n        } else if (fbo.dirtySize !== framebuffer.dirtySize) {\n          fbo.dirtySize = framebuffer.dirtySize;\n          this.resizeFramebuffer(framebuffer);\n        }\n      }\n      for (let i = 0; i < framebuffer.colorTextures.length; i++) {\n        const tex = framebuffer.colorTextures[i];\n        this.renderer.texture.unbind(tex.parentTextureArray || tex);\n      }\n      if (framebuffer.depthTexture) {\n        this.renderer.texture.unbind(framebuffer.depthTexture);\n      }\n      if (frame) {\n        const mipWidth = frame.width >> mipLevel;\n        const mipHeight = frame.height >> mipLevel;\n        const scale = mipWidth / frame.width;\n        this.setViewport(frame.x * scale, frame.y * scale, mipWidth, mipHeight);\n      } else {\n        const mipWidth = framebuffer.width >> mipLevel;\n        const mipHeight = framebuffer.height >> mipLevel;\n        this.setViewport(0, 0, mipWidth, mipHeight);\n      }\n    } else {\n      if (this.current) {\n        this.current = null;\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n      }\n      if (frame) {\n        this.setViewport(frame.x, frame.y, frame.width, frame.height);\n      } else {\n        this.setViewport(0, 0, this.renderer.width, this.renderer.height);\n      }\n    }\n  }\n  setViewport(x, y, width, height) {\n    const v = this.viewport;\n    x = Math.round(x);\n    y = Math.round(y);\n    width = Math.round(width);\n    height = Math.round(height);\n    if (v.width !== width || v.height !== height || v.x !== x || v.y !== y) {\n      v.x = x;\n      v.y = y;\n      v.width = width;\n      v.height = height;\n      this.gl.viewport(x, y, width, height);\n    }\n  }\n  get size() {\n    if (this.current) {\n      return {\n        x: 0,\n        y: 0,\n        width: this.current.width,\n        height: this.current.height\n      };\n    }\n    return {\n      x: 0,\n      y: 0,\n      width: this.renderer.width,\n      height: this.renderer.height\n    };\n  }\n  clear(r, g, b, a) {\n    let mask = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : BUFFER_BITS.COLOR | BUFFER_BITS.DEPTH;\n    const {\n      gl\n    } = this;\n    gl.clearColor(r, g, b, a);\n    gl.clear(mask);\n  }\n  initFramebuffer(framebuffer) {\n    const {\n      gl\n    } = this;\n    const fbo = new GLFramebuffer(gl.createFramebuffer());\n    fbo.multisample = this.detectSamples(framebuffer.multisample);\n    framebuffer.glFramebuffers[this.CONTEXT_UID] = fbo;\n    this.managedFramebuffers.push(framebuffer);\n    framebuffer.disposeRunner.add(this);\n    return fbo;\n  }\n  resizeFramebuffer(framebuffer) {\n    const {\n      gl\n    } = this;\n    const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n    if (fbo.stencil) {\n      gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.stencil);\n      if (fbo.msaaBuffer) {\n        gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample, gl.DEPTH24_STENCIL8, framebuffer.width, framebuffer.height);\n      } else {\n        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, framebuffer.width, framebuffer.height);\n      }\n    }\n    const colorTextures = framebuffer.colorTextures;\n    let count = colorTextures.length;\n    if (!gl.drawBuffers) {\n      count = Math.min(count, 1);\n    }\n    for (let i = 0; i < count; i++) {\n      const texture = colorTextures[i];\n      const parentTexture = texture.parentTextureArray || texture;\n      this.renderer.texture.bind(parentTexture, 0);\n      if (i === 0 && fbo.msaaBuffer) {\n        gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.msaaBuffer);\n        gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample, parentTexture._glTextures[this.CONTEXT_UID].internalFormat, framebuffer.width, framebuffer.height);\n      }\n    }\n    if (framebuffer.depthTexture && this.writeDepthTexture) {\n      this.renderer.texture.bind(framebuffer.depthTexture, 0);\n    }\n  }\n  updateFramebuffer(framebuffer, mipLevel) {\n    const {\n      gl\n    } = this;\n    const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n    const colorTextures = framebuffer.colorTextures;\n    let count = colorTextures.length;\n    if (!gl.drawBuffers) {\n      count = Math.min(count, 1);\n    }\n    if (fbo.multisample > 1 && this.canMultisampleFramebuffer(framebuffer)) {\n      fbo.msaaBuffer = fbo.msaaBuffer || gl.createRenderbuffer();\n    } else if (fbo.msaaBuffer) {\n      gl.deleteRenderbuffer(fbo.msaaBuffer);\n      fbo.msaaBuffer = null;\n      if (fbo.blitFramebuffer) {\n        fbo.blitFramebuffer.dispose();\n        fbo.blitFramebuffer = null;\n      }\n    }\n    const activeTextures = [];\n    for (let i = 0; i < count; i++) {\n      const texture = colorTextures[i];\n      const parentTexture = texture.parentTextureArray || texture;\n      this.renderer.texture.bind(parentTexture, 0);\n      if (i === 0 && fbo.msaaBuffer) {\n        gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.msaaBuffer);\n        gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample, parentTexture._glTextures[this.CONTEXT_UID].internalFormat, framebuffer.width, framebuffer.height);\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, fbo.msaaBuffer);\n      } else {\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i, texture.target, parentTexture._glTextures[this.CONTEXT_UID].texture, mipLevel);\n        activeTextures.push(gl.COLOR_ATTACHMENT0 + i);\n      }\n    }\n    if (activeTextures.length > 1) {\n      gl.drawBuffers(activeTextures);\n    }\n    if (framebuffer.depthTexture) {\n      const writeDepthTexture = this.writeDepthTexture;\n      if (writeDepthTexture) {\n        const depthTexture = framebuffer.depthTexture;\n        this.renderer.texture.bind(depthTexture, 0);\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, depthTexture._glTextures[this.CONTEXT_UID].texture, mipLevel);\n      }\n    }\n    if ((framebuffer.stencil || framebuffer.depth) && !(framebuffer.depthTexture && this.writeDepthTexture)) {\n      fbo.stencil = fbo.stencil || gl.createRenderbuffer();\n      gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.stencil);\n      if (fbo.msaaBuffer) {\n        gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample, gl.DEPTH24_STENCIL8, framebuffer.width, framebuffer.height);\n      } else {\n        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, framebuffer.width, framebuffer.height);\n      }\n      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, fbo.stencil);\n    } else if (fbo.stencil) {\n      gl.deleteRenderbuffer(fbo.stencil);\n      fbo.stencil = null;\n    }\n  }\n  canMultisampleFramebuffer(framebuffer) {\n    return this.renderer.context.webGLVersion !== 1 && framebuffer.colorTextures.length <= 1 && !framebuffer.depthTexture;\n  }\n  detectSamples(samples) {\n    const {\n      msaaSamples\n    } = this;\n    let res = MSAA_QUALITY.NONE;\n    if (samples <= 1 || msaaSamples === null) {\n      return res;\n    }\n    for (let i = 0; i < msaaSamples.length; i++) {\n      if (msaaSamples[i] <= samples) {\n        res = msaaSamples[i];\n        break;\n      }\n    }\n    if (res === 1) {\n      res = MSAA_QUALITY.NONE;\n    }\n    return res;\n  }\n  blit(framebuffer, sourcePixels, destPixels) {\n    const {\n      current,\n      renderer,\n      gl,\n      CONTEXT_UID\n    } = this;\n    if (renderer.context.webGLVersion !== 2) {\n      return;\n    }\n    if (!current) {\n      return;\n    }\n    const fbo = current.glFramebuffers[CONTEXT_UID];\n    if (!fbo) {\n      return;\n    }\n    if (!framebuffer) {\n      if (!fbo.msaaBuffer) {\n        return;\n      }\n      const colorTexture = current.colorTextures[0];\n      if (!colorTexture) {\n        return;\n      }\n      if (!fbo.blitFramebuffer) {\n        fbo.blitFramebuffer = new Framebuffer(current.width, current.height);\n        fbo.blitFramebuffer.addColorTexture(0, colorTexture);\n      }\n      framebuffer = fbo.blitFramebuffer;\n      if (framebuffer.colorTextures[0] !== colorTexture) {\n        framebuffer.colorTextures[0] = colorTexture;\n        framebuffer.dirtyId++;\n        framebuffer.dirtyFormat++;\n      }\n      if (framebuffer.width !== current.width || framebuffer.height !== current.height) {\n        framebuffer.width = current.width;\n        framebuffer.height = current.height;\n        framebuffer.dirtyId++;\n        framebuffer.dirtySize++;\n      }\n    }\n    if (!sourcePixels) {\n      sourcePixels = tempRectangle;\n      sourcePixels.width = current.width;\n      sourcePixels.height = current.height;\n    }\n    if (!destPixels) {\n      destPixels = sourcePixels;\n    }\n    const sameSize = sourcePixels.width === destPixels.width && sourcePixels.height === destPixels.height;\n    this.bind(framebuffer);\n    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fbo.framebuffer);\n    gl.blitFramebuffer(sourcePixels.left, sourcePixels.top, sourcePixels.right, sourcePixels.bottom, destPixels.left, destPixels.top, destPixels.right, destPixels.bottom, gl.COLOR_BUFFER_BIT, sameSize ? gl.NEAREST : gl.LINEAR);\n  }\n  disposeFramebuffer(framebuffer, contextLost) {\n    const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n    const gl = this.gl;\n    if (!fbo) {\n      return;\n    }\n    delete framebuffer.glFramebuffers[this.CONTEXT_UID];\n    const index = this.managedFramebuffers.indexOf(framebuffer);\n    if (index >= 0) {\n      this.managedFramebuffers.splice(index, 1);\n    }\n    framebuffer.disposeRunner.remove(this);\n    if (!contextLost) {\n      gl.deleteFramebuffer(fbo.framebuffer);\n      if (fbo.msaaBuffer) {\n        gl.deleteRenderbuffer(fbo.msaaBuffer);\n      }\n      if (fbo.stencil) {\n        gl.deleteRenderbuffer(fbo.stencil);\n      }\n    }\n    if (fbo.blitFramebuffer) {\n      fbo.blitFramebuffer.dispose();\n    }\n  }\n  disposeAll(contextLost) {\n    const list = this.managedFramebuffers;\n    this.managedFramebuffers = [];\n    for (let i = 0; i < list.length; i++) {\n      this.disposeFramebuffer(list[i], contextLost);\n    }\n  }\n  forceStencil() {\n    const framebuffer = this.current;\n    if (!framebuffer) {\n      return;\n    }\n    const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n    if (!fbo || fbo.stencil) {\n      return;\n    }\n    framebuffer.stencil = true;\n    const w = framebuffer.width;\n    const h = framebuffer.height;\n    const gl = this.gl;\n    const stencil = gl.createRenderbuffer();\n    gl.bindRenderbuffer(gl.RENDERBUFFER, stencil);\n    if (fbo.msaaBuffer) {\n      gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample, gl.DEPTH24_STENCIL8, w, h);\n    } else {\n      gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, w, h);\n    }\n    fbo.stencil = stencil;\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, stencil);\n  }\n  reset() {\n    this.current = this.unknownFramebuffer;\n    this.viewport = new Rectangle();\n  }\n  destroy() {\n    this.renderer = null;\n  }\n}\nFramebufferSystem.extension = {\n  type: ExtensionType.RendererSystem,\n  name: \"framebuffer\"\n};\nextensions.add(FramebufferSystem);\nexport { FramebufferSystem };","map":{"version":3,"mappings":"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","names":["tempRectangle","Rectangle","FramebufferSystem","constructor","renderer","managedFramebuffers","unknownFramebuffer","Framebuffer","msaaSamples","contextChange","disposeAll","gl","current","hasMRT","writeDepthTexture","context","nativeDrawBuffersExtension","extensions","nativeDepthTextureExtension","PREFER_ENV","WEBGL_LEGACY","drawBuffers","activeTextures","drawBuffersWEBGL","getInternalformatParameter","RENDERBUFFER","SAMPLES","bind","frame","mipLevel","framebuffer","fbo","CONTEXT_UID","initFramebuffer","bindFramebuffer","FRAMEBUFFER","dirtyId","dirtyFormat","dirtySize","resizeFramebuffer","i","length","colorTextures","unbind","parentTextureArray","tex","depthTexture","width","height","mipWidth","x","y","mipHeight","setViewport","v","round","size","clear","r","g","a","mask","COLOR","DEPTH","clearColor","GLFramebuffer","createFramebuffer","multisample","detectSamples","push","add","stencil","bindRenderbuffer","msaaBuffer","DEPTH24_STENCIL8","DEPTH_STENCIL","count","min","texture","renderbufferStorageMultisample","_glTextures","updateFramebuffer","createRenderbuffer","blitFramebuffer","dispose","COLOR_ATTACHMENT0","framebufferTexture2D","parentTexture","DEPTH_ATTACHMENT","TEXTURE_2D","DEPTH_STENCIL_ATTACHMENT","canMultisampleFramebuffer","webGLVersion","samples","res","MSAA_QUALITY","blit","destPixels","glFramebuffers","colorTexture","addColorTexture","sourcePixels","sameSize","READ_FRAMEBUFFER","left","top","right","bottom","COLOR_BUFFER_BIT","NEAREST","LINEAR","disposeFramebuffer","contextLost","index","splice","remove","list","forceStencil","w","h","renderbufferStorage","framebufferRenderbuffer","reset","destroy","extension","type","ExtensionType","name"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/core/src/framebuffer/FramebufferSystem.ts"],"sourcesContent":["import { BUFFER_BITS, ENV, MSAA_QUALITY } from '@pixi/constants';\nimport { extensions, ExtensionType } from '@pixi/extensions';\nimport { Rectangle } from '@pixi/math';\nimport { settings } from '@pixi/settings';\nimport { Framebuffer } from './Framebuffer';\nimport { GLFramebuffer } from './GLFramebuffer';\n\nimport type { ExtensionMetadata } from '@pixi/extensions';\nimport type { IRenderingContext } from '../IRenderer';\nimport type { Renderer } from '../Renderer';\nimport type { ISystem } from '../system/ISystem';\n\nconst tempRectangle = new Rectangle();\n\n/**\n * System plugin to the renderer to manage framebuffers.\n * @memberof PIXI\n */\nexport class FramebufferSystem implements ISystem\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        type: ExtensionType.RendererSystem,\n        name: 'framebuffer',\n    };\n\n    /** A list of managed framebuffers. */\n    public readonly managedFramebuffers: Array<Framebuffer>;\n    public current: Framebuffer;\n    public viewport: Rectangle;\n    public hasMRT: boolean;\n    public writeDepthTexture: boolean;\n    protected CONTEXT_UID: number;\n    protected gl: IRenderingContext;\n\n    /** Framebuffer value that shows that we don't know what is bound. */\n    protected unknownFramebuffer: Framebuffer;\n    protected msaaSamples: Array<number>;\n    public renderer: Renderer;\n\n    /**\n     * @param renderer - The renderer this System works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n        this.managedFramebuffers = [];\n        this.unknownFramebuffer = new Framebuffer(10, 10);\n\n        this.msaaSamples = null;\n    }\n\n    /** Sets up the renderer context and necessary buffers. */\n    protected contextChange(): void\n    {\n        this.disposeAll(true);\n\n        const gl = this.gl = this.renderer.gl;\n\n        this.CONTEXT_UID = this.renderer.CONTEXT_UID;\n        this.current = this.unknownFramebuffer;\n        this.viewport = new Rectangle();\n        this.hasMRT = true;\n        this.writeDepthTexture = true;\n\n        // webgl2\n        if (this.renderer.context.webGLVersion === 1)\n        {\n            // webgl 1!\n            let nativeDrawBuffersExtension = this.renderer.context.extensions.drawBuffers;\n            let nativeDepthTextureExtension = this.renderer.context.extensions.depthTexture;\n\n            if (settings.PREFER_ENV === ENV.WEBGL_LEGACY)\n            {\n                nativeDrawBuffersExtension = null;\n                nativeDepthTextureExtension = null;\n            }\n\n            if (nativeDrawBuffersExtension)\n            {\n                gl.drawBuffers = (activeTextures: number[]): void =>\n                    nativeDrawBuffersExtension.drawBuffersWEBGL(activeTextures);\n            }\n            else\n            {\n                this.hasMRT = false;\n                gl.drawBuffers = (): void =>\n                {\n                    // empty\n                };\n            }\n\n            if (!nativeDepthTextureExtension)\n            {\n                this.writeDepthTexture = false;\n            }\n        }\n        else\n        {\n            // WebGL2\n            // cache possible MSAA samples\n            this.msaaSamples = gl.getInternalformatParameter(gl.RENDERBUFFER, gl.RGBA8, gl.SAMPLES);\n        }\n    }\n\n    /**\n     * Bind a framebuffer.\n     * @param framebuffer\n     * @param frame - frame, default is framebuffer size\n     * @param mipLevel - optional mip level to set on the framebuffer - defaults to 0\n     */\n    bind(framebuffer?: Framebuffer, frame?: Rectangle, mipLevel = 0): void\n    {\n        const { gl } = this;\n\n        if (framebuffer)\n        {\n            // TODO caching layer!\n\n            const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID] || this.initFramebuffer(framebuffer);\n\n            if (this.current !== framebuffer)\n            {\n                this.current = framebuffer;\n                gl.bindFramebuffer(gl.FRAMEBUFFER, fbo.framebuffer);\n            }\n            // make sure all textures are unbound..\n\n            if (fbo.mipLevel !== mipLevel)\n            {\n                framebuffer.dirtyId++;\n                framebuffer.dirtyFormat++;\n                fbo.mipLevel = mipLevel;\n            }\n\n            // now check for updates...\n            if (fbo.dirtyId !== framebuffer.dirtyId)\n            {\n                fbo.dirtyId = framebuffer.dirtyId;\n\n                if (fbo.dirtyFormat !== framebuffer.dirtyFormat)\n                {\n                    fbo.dirtyFormat = framebuffer.dirtyFormat;\n                    fbo.dirtySize = framebuffer.dirtySize;\n                    this.updateFramebuffer(framebuffer, mipLevel);\n                }\n                else if (fbo.dirtySize !== framebuffer.dirtySize)\n                {\n                    fbo.dirtySize = framebuffer.dirtySize;\n                    this.resizeFramebuffer(framebuffer);\n                }\n            }\n\n            for (let i = 0; i < framebuffer.colorTextures.length; i++)\n            {\n                const tex = framebuffer.colorTextures[i];\n\n                this.renderer.texture.unbind(tex.parentTextureArray || tex);\n            }\n\n            if (framebuffer.depthTexture)\n            {\n                this.renderer.texture.unbind(framebuffer.depthTexture);\n            }\n\n            if (frame)\n            {\n                const mipWidth = (frame.width >> mipLevel);\n                const mipHeight = (frame.height >> mipLevel);\n\n                const scale = mipWidth / frame.width;\n\n                this.setViewport(\n                    frame.x * scale,\n                    frame.y * scale,\n                    mipWidth,\n                    mipHeight\n                );\n            }\n            else\n            {\n                const mipWidth = (framebuffer.width >> mipLevel);\n                const mipHeight = (framebuffer.height >> mipLevel);\n\n                this.setViewport(0, 0, mipWidth, mipHeight);\n            }\n        }\n        else\n        {\n            if (this.current)\n            {\n                this.current = null;\n                gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n            }\n\n            if (frame)\n            {\n                this.setViewport(frame.x, frame.y, frame.width, frame.height);\n            }\n            else\n            {\n                this.setViewport(0, 0, this.renderer.width, this.renderer.height);\n            }\n        }\n    }\n\n    /**\n     * Set the WebGLRenderingContext's viewport.\n     * @param x - X position of viewport\n     * @param y - Y position of viewport\n     * @param width - Width of viewport\n     * @param height - Height of viewport\n     */\n    setViewport(x: number, y: number, width: number, height: number): void\n    {\n        const v = this.viewport;\n\n        x = Math.round(x);\n        y = Math.round(y);\n        width = Math.round(width);\n        height = Math.round(height);\n\n        if (v.width !== width || v.height !== height || v.x !== x || v.y !== y)\n        {\n            v.x = x;\n            v.y = y;\n            v.width = width;\n            v.height = height;\n\n            this.gl.viewport(x, y, width, height);\n        }\n    }\n\n    /**\n     * Get the size of the current width and height. Returns object with `width` and `height` values.\n     * @readonly\n     */\n    get size(): { x: number; y: number; width: number; height: number }\n    {\n        if (this.current)\n        {\n            // TODO store temp\n            return { x: 0, y: 0, width: this.current.width, height: this.current.height };\n        }\n\n        return { x: 0, y: 0, width: this.renderer.width, height: this.renderer.height };\n    }\n\n    /**\n     * Clear the color of the context\n     * @param r - Red value from 0 to 1\n     * @param g - Green value from 0 to 1\n     * @param b - Blue value from 0 to 1\n     * @param a - Alpha value from 0 to 1\n     * @param {PIXI.BUFFER_BITS} [mask=BUFFER_BITS.COLOR | BUFFER_BITS.DEPTH] - Bitwise OR of masks\n     *  that indicate the buffers to be cleared, by default COLOR and DEPTH buffers.\n     */\n    clear(r: number, g: number, b: number, a: number, mask: BUFFER_BITS = BUFFER_BITS.COLOR | BUFFER_BITS.DEPTH): void\n    {\n        const { gl } = this;\n\n        // TODO clear color can be set only one right?\n        gl.clearColor(r, g, b, a);\n        gl.clear(mask);\n    }\n\n    /**\n     * Initialize framebuffer for this context\n     * @protected\n     * @param framebuffer\n     * @returns - created GLFramebuffer\n     */\n    initFramebuffer(framebuffer: Framebuffer): GLFramebuffer\n    {\n        const { gl } = this;\n        const fbo = new GLFramebuffer(gl.createFramebuffer());\n\n        fbo.multisample = this.detectSamples(framebuffer.multisample);\n        framebuffer.glFramebuffers[this.CONTEXT_UID] = fbo;\n\n        this.managedFramebuffers.push(framebuffer);\n        framebuffer.disposeRunner.add(this);\n\n        return fbo;\n    }\n\n    /**\n     * Resize the framebuffer\n     * @param framebuffer\n     * @protected\n     */\n    resizeFramebuffer(framebuffer: Framebuffer): void\n    {\n        const { gl } = this;\n\n        const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n\n        if (fbo.stencil)\n        {\n            gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.stencil);\n\n            if (fbo.msaaBuffer)\n            {\n                gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample,\n                    gl.DEPTH24_STENCIL8, framebuffer.width, framebuffer.height);\n            }\n            else\n            {\n                gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, framebuffer.width, framebuffer.height);\n            }\n        }\n\n        const colorTextures = framebuffer.colorTextures;\n\n        let count = colorTextures.length;\n\n        if (!gl.drawBuffers)\n        {\n            count = Math.min(count, 1);\n        }\n\n        for (let i = 0; i < count; i++)\n        {\n            const texture = colorTextures[i];\n            const parentTexture = texture.parentTextureArray || texture;\n\n            this.renderer.texture.bind(parentTexture, 0);\n\n            if (i === 0 && fbo.msaaBuffer)\n            {\n                gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.msaaBuffer);\n                gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample,\n                    parentTexture._glTextures[this.CONTEXT_UID].internalFormat, framebuffer.width, framebuffer.height);\n            }\n        }\n\n        if (framebuffer.depthTexture && this.writeDepthTexture)\n        {\n            this.renderer.texture.bind(framebuffer.depthTexture, 0);\n        }\n    }\n\n    /**\n     * Update the framebuffer\n     * @param framebuffer\n     * @param mipLevel\n     * @protected\n     */\n    updateFramebuffer(framebuffer: Framebuffer, mipLevel: number): void\n    {\n        const { gl } = this;\n\n        const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n\n        // bind the color texture\n        const colorTextures = framebuffer.colorTextures;\n\n        let count = colorTextures.length;\n\n        if (!gl.drawBuffers)\n        {\n            count = Math.min(count, 1);\n        }\n\n        if (fbo.multisample > 1 && this.canMultisampleFramebuffer(framebuffer))\n        {\n            fbo.msaaBuffer = fbo.msaaBuffer || gl.createRenderbuffer();\n        }\n        else if (fbo.msaaBuffer)\n        {\n            gl.deleteRenderbuffer(fbo.msaaBuffer);\n            fbo.msaaBuffer = null;\n\n            if (fbo.blitFramebuffer)\n            {\n                fbo.blitFramebuffer.dispose();\n                fbo.blitFramebuffer = null;\n            }\n        }\n\n        const activeTextures = [];\n\n        for (let i = 0; i < count; i++)\n        {\n            const texture = colorTextures[i];\n            const parentTexture = texture.parentTextureArray || texture;\n\n            this.renderer.texture.bind(parentTexture, 0);\n\n            if (i === 0 && fbo.msaaBuffer)\n            {\n                gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.msaaBuffer);\n                gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample,\n                    parentTexture._glTextures[this.CONTEXT_UID].internalFormat, framebuffer.width, framebuffer.height);\n                gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, fbo.msaaBuffer);\n            }\n            else\n            {\n                gl.framebufferTexture2D(gl.FRAMEBUFFER,\n                    gl.COLOR_ATTACHMENT0 + i,\n                    texture.target,\n                    parentTexture._glTextures[this.CONTEXT_UID].texture,\n                    mipLevel);\n\n                activeTextures.push(gl.COLOR_ATTACHMENT0 + i);\n            }\n        }\n\n        if (activeTextures.length > 1)\n        {\n            gl.drawBuffers(activeTextures);\n        }\n\n        if (framebuffer.depthTexture)\n        {\n            const writeDepthTexture = this.writeDepthTexture;\n\n            if (writeDepthTexture)\n            {\n                const depthTexture = framebuffer.depthTexture;\n\n                this.renderer.texture.bind(depthTexture, 0);\n\n                gl.framebufferTexture2D(gl.FRAMEBUFFER,\n                    gl.DEPTH_ATTACHMENT,\n                    gl.TEXTURE_2D,\n                    depthTexture._glTextures[this.CONTEXT_UID].texture,\n                    mipLevel);\n            }\n        }\n\n        if ((framebuffer.stencil || framebuffer.depth) && !(framebuffer.depthTexture && this.writeDepthTexture))\n        {\n            fbo.stencil = fbo.stencil || gl.createRenderbuffer();\n\n            gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.stencil);\n\n            if (fbo.msaaBuffer)\n            {\n                gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample,\n                    gl.DEPTH24_STENCIL8, framebuffer.width, framebuffer.height);\n            }\n            else\n            {\n                gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, framebuffer.width, framebuffer.height);\n            }\n\n            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, fbo.stencil);\n        }\n        else if (fbo.stencil)\n        {\n            gl.deleteRenderbuffer(fbo.stencil);\n            fbo.stencil = null;\n        }\n    }\n\n    /**\n     * Returns true if the frame buffer can be multisampled.\n     * @param framebuffer\n     */\n    protected canMultisampleFramebuffer(framebuffer: Framebuffer): boolean\n    {\n        return this.renderer.context.webGLVersion !== 1\n            && framebuffer.colorTextures.length <= 1 && !framebuffer.depthTexture;\n    }\n\n    /**\n     * Detects number of samples that is not more than a param but as close to it as possible\n     * @param samples - number of samples\n     * @returns - recommended number of samples\n     */\n    protected detectSamples(samples: MSAA_QUALITY): MSAA_QUALITY\n    {\n        const { msaaSamples } = this;\n        let res: number = MSAA_QUALITY.NONE;\n\n        if (samples <= 1 || msaaSamples === null)\n        {\n            return res;\n        }\n        for (let i = 0; i < msaaSamples.length; i++)\n        {\n            if (msaaSamples[i] <= samples)\n            {\n                res = msaaSamples[i];\n                break;\n            }\n        }\n\n        if (res === 1)\n        {\n            res = MSAA_QUALITY.NONE;\n        }\n\n        return res;\n    }\n\n    /**\n     * Only works with WebGL2\n     *\n     * blits framebuffer to another of the same or bigger size\n     * after that target framebuffer is bound\n     *\n     * Fails with WebGL warning if blits multisample framebuffer to different size\n     * @param framebuffer - by default it blits \"into itself\", from renderBuffer to texture.\n     * @param sourcePixels - source rectangle in pixels\n     * @param destPixels - dest rectangle in pixels, assumed to be the same as sourcePixels\n     */\n    public blit(framebuffer?: Framebuffer, sourcePixels?: Rectangle, destPixels?: Rectangle): void\n    {\n        const { current, renderer, gl, CONTEXT_UID } = this;\n\n        if (renderer.context.webGLVersion !== 2)\n        {\n            return;\n        }\n\n        if (!current)\n        {\n            return;\n        }\n        const fbo = current.glFramebuffers[CONTEXT_UID];\n\n        if (!fbo)\n        {\n            return;\n        }\n        if (!framebuffer)\n        {\n            if (!fbo.msaaBuffer)\n            {\n                return;\n            }\n\n            const colorTexture = current.colorTextures[0];\n\n            if (!colorTexture)\n            {\n                return;\n            }\n\n            if (!fbo.blitFramebuffer)\n            {\n                fbo.blitFramebuffer = new Framebuffer(current.width, current.height);\n                fbo.blitFramebuffer.addColorTexture(0, colorTexture);\n            }\n\n            framebuffer = fbo.blitFramebuffer;\n\n            if (framebuffer.colorTextures[0] !== colorTexture)\n            {\n                framebuffer.colorTextures[0] = colorTexture;\n                framebuffer.dirtyId++;\n                framebuffer.dirtyFormat++;\n            }\n\n            if (framebuffer.width !== current.width || framebuffer.height !== current.height)\n            {\n                framebuffer.width = current.width;\n                framebuffer.height = current.height;\n                framebuffer.dirtyId++;\n                framebuffer.dirtySize++;\n            }\n        }\n\n        if (!sourcePixels)\n        {\n            sourcePixels = tempRectangle;\n            sourcePixels.width = current.width;\n            sourcePixels.height = current.height;\n        }\n        if (!destPixels)\n        {\n            destPixels = sourcePixels;\n        }\n\n        const sameSize = sourcePixels.width === destPixels.width && sourcePixels.height === destPixels.height;\n\n        this.bind(framebuffer);\n        gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fbo.framebuffer);\n        gl.blitFramebuffer(\n            sourcePixels.left, sourcePixels.top, sourcePixels.right, sourcePixels.bottom,\n            destPixels.left, destPixels.top, destPixels.right, destPixels.bottom,\n            gl.COLOR_BUFFER_BIT, sameSize ? gl.NEAREST : gl.LINEAR\n        );\n    }\n\n    /**\n     * Disposes framebuffer.\n     * @param framebuffer - framebuffer that has to be disposed of\n     * @param contextLost - If context was lost, we suppress all delete function calls\n     */\n    disposeFramebuffer(framebuffer: Framebuffer, contextLost?: boolean): void\n    {\n        const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n        const gl = this.gl;\n\n        if (!fbo)\n        {\n            return;\n        }\n\n        delete framebuffer.glFramebuffers[this.CONTEXT_UID];\n\n        const index = this.managedFramebuffers.indexOf(framebuffer);\n\n        if (index >= 0)\n        {\n            this.managedFramebuffers.splice(index, 1);\n        }\n\n        framebuffer.disposeRunner.remove(this);\n\n        if (!contextLost)\n        {\n            gl.deleteFramebuffer(fbo.framebuffer);\n\n            if (fbo.msaaBuffer)\n            {\n                gl.deleteRenderbuffer(fbo.msaaBuffer);\n            }\n\n            if (fbo.stencil)\n            {\n                gl.deleteRenderbuffer(fbo.stencil);\n            }\n        }\n\n        if (fbo.blitFramebuffer)\n        {\n            fbo.blitFramebuffer.dispose();\n        }\n    }\n\n    /**\n     * Disposes all framebuffers, but not textures bound to them.\n     * @param [contextLost=false] - If context was lost, we suppress all delete function calls\n     */\n    disposeAll(contextLost?: boolean): void\n    {\n        const list = this.managedFramebuffers;\n\n        (this.managedFramebuffers as any) = [];\n\n        for (let i = 0; i < list.length; i++)\n        {\n            this.disposeFramebuffer(list[i], contextLost);\n        }\n    }\n\n    /**\n     * Forcing creation of stencil buffer for current framebuffer, if it wasn't done before.\n     * Used by MaskSystem, when its time to use stencil mask for Graphics element.\n     *\n     * Its an alternative for public lazy `framebuffer.enableStencil`, in case we need stencil without rebind.\n     * @private\n     */\n    forceStencil(): void\n    {\n        const framebuffer = this.current;\n\n        if (!framebuffer)\n        {\n            return;\n        }\n\n        const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n\n        if (!fbo || fbo.stencil)\n        {\n            return;\n        }\n\n        framebuffer.stencil = true;\n\n        const w = framebuffer.width;\n        const h = framebuffer.height;\n        const gl = this.gl;\n        const stencil = gl.createRenderbuffer();\n\n        gl.bindRenderbuffer(gl.RENDERBUFFER, stencil);\n\n        if (fbo.msaaBuffer)\n        {\n            gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample, gl.DEPTH24_STENCIL8, w, h);\n        }\n        else\n        {\n            gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, w, h);\n        }\n\n        fbo.stencil = stencil;\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, stencil);\n    }\n\n    /** Resets framebuffer stored state, binds screen framebuffer. Should be called before renderTexture reset(). */\n    reset(): void\n    {\n        this.current = this.unknownFramebuffer;\n        this.viewport = new Rectangle();\n    }\n\n    destroy(): void\n    {\n        this.renderer = null;\n    }\n}\n\nextensions.add(FramebufferSystem);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}