{"ast":null,"code":"import { Geometry, TYPES, Buffer, utils } from '@pixi/core';\nclass ParticleBuffer {\n  constructor(properties, dynamicPropertyFlags, size) {\n    this.geometry = new Geometry();\n    this.indexBuffer = null;\n    this.size = size;\n    this.dynamicProperties = [];\n    this.staticProperties = [];\n    for (let i = 0; i < properties.length; ++i) {\n      let property = properties[i];\n      property = {\n        attributeName: property.attributeName,\n        size: property.size,\n        uploadFunction: property.uploadFunction,\n        type: property.type || TYPES.FLOAT,\n        offset: property.offset\n      };\n      if (dynamicPropertyFlags[i]) {\n        this.dynamicProperties.push(property);\n      } else {\n        this.staticProperties.push(property);\n      }\n    }\n    this.staticStride = 0;\n    this.staticBuffer = null;\n    this.staticData = null;\n    this.staticDataUint32 = null;\n    this.dynamicStride = 0;\n    this.dynamicBuffer = null;\n    this.dynamicData = null;\n    this.dynamicDataUint32 = null;\n    this._updateID = 0;\n    this.initBuffers();\n  }\n  initBuffers() {\n    const geometry = this.geometry;\n    let dynamicOffset = 0;\n    this.indexBuffer = new Buffer(utils.createIndicesForQuads(this.size), true, true);\n    geometry.addIndex(this.indexBuffer);\n    this.dynamicStride = 0;\n    for (let i = 0; i < this.dynamicProperties.length; ++i) {\n      const property = this.dynamicProperties[i];\n      property.offset = dynamicOffset;\n      dynamicOffset += property.size;\n      this.dynamicStride += property.size;\n    }\n    const dynBuffer = new ArrayBuffer(this.size * this.dynamicStride * 4 * 4);\n    this.dynamicData = new Float32Array(dynBuffer);\n    this.dynamicDataUint32 = new Uint32Array(dynBuffer);\n    this.dynamicBuffer = new Buffer(this.dynamicData, false, false);\n    let staticOffset = 0;\n    this.staticStride = 0;\n    for (let i = 0; i < this.staticProperties.length; ++i) {\n      const property = this.staticProperties[i];\n      property.offset = staticOffset;\n      staticOffset += property.size;\n      this.staticStride += property.size;\n    }\n    const statBuffer = new ArrayBuffer(this.size * this.staticStride * 4 * 4);\n    this.staticData = new Float32Array(statBuffer);\n    this.staticDataUint32 = new Uint32Array(statBuffer);\n    this.staticBuffer = new Buffer(this.staticData, true, false);\n    for (let i = 0; i < this.dynamicProperties.length; ++i) {\n      const property = this.dynamicProperties[i];\n      geometry.addAttribute(property.attributeName, this.dynamicBuffer, 0, property.type === TYPES.UNSIGNED_BYTE, property.type, this.dynamicStride * 4, property.offset * 4);\n    }\n    for (let i = 0; i < this.staticProperties.length; ++i) {\n      const property = this.staticProperties[i];\n      geometry.addAttribute(property.attributeName, this.staticBuffer, 0, property.type === TYPES.UNSIGNED_BYTE, property.type, this.staticStride * 4, property.offset * 4);\n    }\n  }\n  uploadDynamic(children, startIndex, amount) {\n    for (let i = 0; i < this.dynamicProperties.length; i++) {\n      const property = this.dynamicProperties[i];\n      property.uploadFunction(children, startIndex, amount, property.type === TYPES.UNSIGNED_BYTE ? this.dynamicDataUint32 : this.dynamicData, this.dynamicStride, property.offset);\n    }\n    this.dynamicBuffer._updateID++;\n  }\n  uploadStatic(children, startIndex, amount) {\n    for (let i = 0; i < this.staticProperties.length; i++) {\n      const property = this.staticProperties[i];\n      property.uploadFunction(children, startIndex, amount, property.type === TYPES.UNSIGNED_BYTE ? this.staticDataUint32 : this.staticData, this.staticStride, property.offset);\n    }\n    this.staticBuffer._updateID++;\n  }\n  destroy() {\n    this.indexBuffer = null;\n    this.dynamicProperties = null;\n    this.dynamicBuffer = null;\n    this.dynamicData = null;\n    this.dynamicDataUint32 = null;\n    this.staticProperties = null;\n    this.staticBuffer = null;\n    this.staticData = null;\n    this.staticDataUint32 = null;\n    this.geometry.destroy();\n  }\n}\nexport { ParticleBuffer };","map":{"version":3,"mappings":"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","names":["ParticleBuffer","constructor","properties","size","Geometry","indexBuffer","dynamicProperties","staticProperties","i","property","attributeName","uploadFunction","type","TYPES","offset","dynamicPropertyFlags","push","staticStride","staticBuffer","staticData","staticDataUint32","dynamicStride","dynamicBuffer","dynamicData","dynamicDataUint32","_updateID","initBuffers","geometry","dynamicOffset","Buffer","createIndicesForQuads","ArrayBuffer","Float32Array","dynBuffer","Uint32Array","staticOffset","statBuffer","addAttribute","uploadDynamic","children","amount","length","startIndex","UNSIGNED_BYTE","uploadStatic","destroy"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/particle-container/src/ParticleBuffer.ts"],"sourcesContent":["import { Buffer, Geometry, TYPES, utils } from '@pixi/core';\n\nimport type { Sprite } from '@pixi/sprite';\nimport type { IParticleRendererProperty } from './ParticleRenderer';\n\n/*\n * @author Mat Groves\n *\n * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/\n * for creating the original PixiJS version!\n * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that\n * they now share 4 bytes on the vertex buffer\n *\n * Heavily inspired by LibGDX's ParticleBuffer:\n * https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/ParticleBuffer.java\n */\n\n/**\n * The particle buffer manages the static and dynamic buffers for a particle container.\n * @private\n * @memberof PIXI\n */\nexport class ParticleBuffer\n{\n    public geometry: Geometry;\n    public staticStride: number;\n    public staticBuffer: Buffer;\n    public staticData: Float32Array;\n    public staticDataUint32: Uint32Array;\n    public dynamicStride: number;\n    public dynamicBuffer: Buffer;\n    public dynamicData: Float32Array;\n    public dynamicDataUint32: Uint32Array;\n    public _updateID: number;\n\n    /** Holds the indices of the geometry (quads) to draw. */\n    indexBuffer: Buffer;\n\n    /** The number of particles the buffer can hold. */\n    private size: number;\n\n    /** A list of the properties that are dynamic. */\n    private dynamicProperties: IParticleRendererProperty[];\n\n    /** A list of the properties that are static. */\n    private staticProperties: IParticleRendererProperty[];\n\n    /**\n     * @param {object} properties - The properties to upload.\n     * @param {boolean[]} dynamicPropertyFlags - Flags for which properties are dynamic.\n     * @param {number} size - The size of the batch.\n     */\n    constructor(properties: IParticleRendererProperty[], dynamicPropertyFlags: boolean[], size: number)\n    {\n        this.geometry = new Geometry();\n\n        this.indexBuffer = null;\n\n        this.size = size;\n        this.dynamicProperties = [];\n        this.staticProperties = [];\n\n        for (let i = 0; i < properties.length; ++i)\n        {\n            let property = properties[i];\n\n            // Make copy of properties object so that when we edit the offset it doesn't\n            // change all other instances of the object literal\n            property = {\n                attributeName: property.attributeName,\n                size: property.size,\n                uploadFunction: property.uploadFunction,\n                type: property.type || TYPES.FLOAT,\n                offset: property.offset,\n            };\n\n            if (dynamicPropertyFlags[i])\n            {\n                this.dynamicProperties.push(property);\n            }\n            else\n            {\n                this.staticProperties.push(property);\n            }\n        }\n\n        this.staticStride = 0;\n        this.staticBuffer = null;\n        this.staticData = null;\n        this.staticDataUint32 = null;\n\n        this.dynamicStride = 0;\n        this.dynamicBuffer = null;\n        this.dynamicData = null;\n        this.dynamicDataUint32 = null;\n\n        this._updateID = 0;\n\n        this.initBuffers();\n    }\n\n    /** Sets up the renderer context and necessary buffers. */\n    private initBuffers(): void\n    {\n        const geometry = this.geometry;\n\n        let dynamicOffset = 0;\n\n        this.indexBuffer = new Buffer(utils.createIndicesForQuads(this.size), true, true);\n        geometry.addIndex(this.indexBuffer);\n\n        this.dynamicStride = 0;\n\n        for (let i = 0; i < this.dynamicProperties.length; ++i)\n        {\n            const property = this.dynamicProperties[i];\n\n            property.offset = dynamicOffset;\n            dynamicOffset += property.size;\n            this.dynamicStride += property.size;\n        }\n\n        const dynBuffer = new ArrayBuffer(this.size * this.dynamicStride * 4 * 4);\n\n        this.dynamicData = new Float32Array(dynBuffer);\n        this.dynamicDataUint32 = new Uint32Array(dynBuffer);\n        this.dynamicBuffer = new Buffer(this.dynamicData, false, false);\n\n        // static //\n        let staticOffset = 0;\n\n        this.staticStride = 0;\n\n        for (let i = 0; i < this.staticProperties.length; ++i)\n        {\n            const property = this.staticProperties[i];\n\n            property.offset = staticOffset;\n            staticOffset += property.size;\n            this.staticStride += property.size;\n        }\n\n        const statBuffer = new ArrayBuffer(this.size * this.staticStride * 4 * 4);\n\n        this.staticData = new Float32Array(statBuffer);\n        this.staticDataUint32 = new Uint32Array(statBuffer);\n        this.staticBuffer = new Buffer(this.staticData, true, false);\n\n        for (let i = 0; i < this.dynamicProperties.length; ++i)\n        {\n            const property = this.dynamicProperties[i];\n\n            geometry.addAttribute(\n                property.attributeName,\n                this.dynamicBuffer,\n                0,\n                property.type === TYPES.UNSIGNED_BYTE,\n                property.type,\n                this.dynamicStride * 4,\n                property.offset * 4\n            );\n        }\n\n        for (let i = 0; i < this.staticProperties.length; ++i)\n        {\n            const property = this.staticProperties[i];\n\n            geometry.addAttribute(\n                property.attributeName,\n                this.staticBuffer,\n                0,\n                property.type === TYPES.UNSIGNED_BYTE,\n                property.type,\n                this.staticStride * 4,\n                property.offset * 4\n            );\n        }\n    }\n\n    /**\n     * Uploads the dynamic properties.\n     * @param children - The children to upload.\n     * @param startIndex - The index to start at.\n     * @param amount - The number to upload.\n     */\n    uploadDynamic(children: Sprite[], startIndex: number, amount: number): void\n    {\n        for (let i = 0; i < this.dynamicProperties.length; i++)\n        {\n            const property = this.dynamicProperties[i];\n\n            property.uploadFunction(children, startIndex, amount,\n                property.type === TYPES.UNSIGNED_BYTE ? this.dynamicDataUint32 : this.dynamicData,\n                this.dynamicStride, property.offset);\n        }\n\n        this.dynamicBuffer._updateID++;\n    }\n\n    /**\n     * Uploads the static properties.\n     * @param children - The children to upload.\n     * @param startIndex - The index to start at.\n     * @param amount - The number to upload.\n     */\n    uploadStatic(children: Sprite[], startIndex: number, amount: number): void\n    {\n        for (let i = 0; i < this.staticProperties.length; i++)\n        {\n            const property = this.staticProperties[i];\n\n            property.uploadFunction(children, startIndex, amount,\n                property.type === TYPES.UNSIGNED_BYTE ? this.staticDataUint32 : this.staticData,\n                this.staticStride, property.offset);\n        }\n\n        this.staticBuffer._updateID++;\n    }\n\n    /** Destroys the ParticleBuffer. */\n    destroy(): void\n    {\n        this.indexBuffer = null;\n\n        this.dynamicProperties = null;\n        this.dynamicBuffer = null;\n        this.dynamicData = null;\n        this.dynamicDataUint32 = null;\n\n        this.staticProperties = null;\n        this.staticBuffer = null;\n        this.staticData = null;\n        this.staticDataUint32 = null;\n        // all buffers are destroyed inside geometry\n        this.geometry.destroy();\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}