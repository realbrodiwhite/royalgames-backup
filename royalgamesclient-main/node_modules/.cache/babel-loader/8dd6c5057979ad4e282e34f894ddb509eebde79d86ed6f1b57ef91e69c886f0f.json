{"ast":null,"code":"import { BLEND_MODES, utils } from '@pixi/core';\nimport { Container } from '@pixi/display';\nclass ParticleContainer extends Container {\n  constructor() {\n    let maxSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1500;\n    let properties = arguments.length > 1 ? arguments[1] : undefined;\n    let batchSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 16384;\n    let autoResize = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    super();\n    const maxBatchSize = 16384;\n    if (batchSize > maxBatchSize) {\n      batchSize = maxBatchSize;\n    }\n    this._properties = [false, true, false, false, false];\n    this._maxSize = maxSize;\n    this._batchSize = batchSize;\n    this._buffers = null;\n    this._bufferUpdateIDs = [];\n    this._updateID = 0;\n    this.interactiveChildren = false;\n    this.blendMode = BLEND_MODES.NORMAL;\n    this.autoResize = autoResize;\n    this.roundPixels = true;\n    this.baseTexture = null;\n    this.setProperties(properties);\n    this._tint = 0;\n    this.tintRgb = new Float32Array(4);\n    this.tint = 16777215;\n  }\n  setProperties(properties) {\n    if (properties) {\n      this._properties[0] = \"vertices\" in properties || \"scale\" in properties ? !!properties.vertices || !!properties.scale : this._properties[0];\n      this._properties[1] = \"position\" in properties ? !!properties.position : this._properties[1];\n      this._properties[2] = \"rotation\" in properties ? !!properties.rotation : this._properties[2];\n      this._properties[3] = \"uvs\" in properties ? !!properties.uvs : this._properties[3];\n      this._properties[4] = \"tint\" in properties || \"alpha\" in properties ? !!properties.tint || !!properties.alpha : this._properties[4];\n    }\n  }\n  updateTransform() {\n    this.displayObjectUpdateTransform();\n  }\n  get tint() {\n    return this._tint;\n  }\n  set tint(value) {\n    this._tint = value;\n    utils.hex2rgb(value, this.tintRgb);\n  }\n  render(renderer) {\n    if (!this.visible || this.worldAlpha <= 0 || !this.children.length || !this.renderable) {\n      return;\n    }\n    if (!this.baseTexture) {\n      this.baseTexture = this.children[0]._texture.baseTexture;\n      if (!this.baseTexture.valid) {\n        this.baseTexture.once(\"update\", () => this.onChildrenChange(0));\n      }\n    }\n    renderer.batch.setObjectRenderer(renderer.plugins.particle);\n    renderer.plugins.particle.render(this);\n  }\n  onChildrenChange(smallestChildIndex) {\n    const bufferIndex = Math.floor(smallestChildIndex / this._batchSize);\n    while (this._bufferUpdateIDs.length < bufferIndex) {\n      this._bufferUpdateIDs.push(0);\n    }\n    this._bufferUpdateIDs[bufferIndex] = ++this._updateID;\n  }\n  dispose() {\n    if (this._buffers) {\n      for (let i = 0; i < this._buffers.length; ++i) {\n        this._buffers[i].destroy();\n      }\n      this._buffers = null;\n    }\n  }\n  destroy(options) {\n    super.destroy(options);\n    this.dispose();\n    this._properties = null;\n    this._buffers = null;\n    this._bufferUpdateIDs = null;\n  }\n}\nexport { ParticleContainer };","map":{"version":3,"mappings":";;AA0CO,MAAMA,0BAA0BC,SACvC;EA8EIC,cACA;IAAA,IADYC,OAAU;IAAA,IAAMC;IAAA,IAAkCC,SAAY;IAAA,IAAOC,iFAAa,KAC9F;IACU;IAKN,MAAMC,YAAe;IAErB,IAAIF,YAAYE,YAChB;MACgBF;IAAA;IAGhB,KAAKG,cAAc,CAAC,OAAO,IAAM,SAAO,OAAO,KAAK;IACpD,KAAKC,QAAW;IAChB,KAAKC,UAAa;IAClB,KAAKC,QAAW;IAChB,KAAKC,mBAAmB,EAAC;IACzB,KAAKC,SAAY;IAEjB,KAAKC,mBAAsB;IAC3B,KAAKC,YAAYC,WAAY;IAC7B,KAAKV,UAAa;IAClB,KAAKW,WAAc;IACnB,KAAKC,WAAc;IAEnB,KAAKC,cAAcf,UAAU;IAE7B,KAAKgB,KAAQ;IACR,eAAU,IAAIC,aAAa,CAAC;IACjC,KAAKC,IAAO;EAAA;EAOTH,cAAcf,UACrB;IACI,IAAIA,UACJ;MACI,KAAKI,WAAY,MAAK,UAAc,kBAAc,WAAWJ,UACvD,IAAC,CAACA,WAAWmB,YAAY,CAAC,CAACnB,UAAW,SAAQ,KAAKI,WAAY;MAChE,iBAAY,KAAK,UAAc,iBAAa,CAAC,CAACJ,WAAWoB,QAAW,QAAKhB,WAAY;MACrF,iBAAY,KAAK,UAAc,iBAAa,CAAC,CAACJ,WAAWqB,QAAW,QAAKjB,WAAY;MACrF,iBAAY,KAAK,KAAS,iBAAa,CAAC,CAACJ,WAAWsB,GAAM,QAAKlB,WAAY;MAChF,KAAKA,WAAY,MAAK,MAAU,kBAAc,WAAWJ,UACnD,IAAC,CAACA,WAAWkB,QAAQ,CAAC,CAAClB,UAAW,SAAQ,KAAKI,WAAY;IAAA;EACrE;EAGJmB,eACAA;IAEI,KAAKC,4BAA6B;EAAA;EAStC,IAAIN,IACJA;IACI,OAAO,IAAK;EAAA;EAGhB,IAAIA,KAAKO,KACT;IACI,KAAKT,KAAQ;IACPU,cAAQD,KAAO,OAAKE,OAAO;EAAA;EAO9BC,OAAOC,QACd;IACI,IAAI,CAAC,KAAKC,OAAW,SAAKC,UAAc,SAAK,CAAC,KAAKC,QAAS,WAAU,CAAC,KAAKC,UAC5E;MACI;IAAA;IAGA,KAAC,KAAKnB,WACV;MACI,KAAKA,WAAc,QAAKkB,QAAS,IAAGE,QAAS;MACzC,KAAC,IAAK,aAAYC,KACtB;QACI,KAAKrB,YAAYsB,IAAK,WAAU,MAAM,IAAK,kBAAiB,CAAC,CAAC;MAAA;IAClE;IAGJP,SAASQ,KAAM,mBAAkBR,QAAS,SAAQS,QAAQ;IACjDT,iBAAQS,QAAS,QAAO,IAAI;EAAA;EAO/BC,iBAAiBC,kBAC3B;IACI,MAAMC,WAAc,QAAKC,KAAM,sBAAqB,KAAKpC,UAAU;IAE5D,YAAKE,gBAAiB,UAASiC,WACtC;MACS,sBAAiBE,KAAK,CAAC;IAAA;IAE3B,sBAAiBF,WAAe,MAAE,IAAK;EAAA;EAGhDG,OACAA;IACI,IAAI,KAAKrC,QACT;MACI,SAASsC,IAAI,CAAG,MAAI,KAAKtC,QAAS,SAAQ,EAAEsC,CAC5C;QACS,cAASA,GAAGC,OAAQ;MAAA;MAG7B,KAAKvC,QAAW;IAAA;EACpB;EAcGuC,QAAQC,OACf;IACI,MAAMD,QAAQC,OAAO;IAErB,KAAKH,OAAQ;IAEb,KAAKxC,WAAc;IACnB,KAAKG,QAAW;IAChB,KAAKC,gBAAmB;EAAA;AAEhC","names":["ParticleContainer","Container","constructor","maxSize","properties","batchSize","autoResize","maxBatchSize","_properties","_maxSize","_batchSize","_buffers","_bufferUpdateIDs","_updateID","interactiveChildren","blendMode","BLEND_MODES","roundPixels","baseTexture","setProperties","_tint","Float32Array","tint","vertices","position","rotation","uvs","updateTransform","displayObjectUpdateTransform","value","utils","tintRgb","render","renderer","visible","worldAlpha","children","renderable","_texture","valid","once","batch","particle","onChildrenChange","smallestChildIndex","bufferIndex","floor","push","dispose","i","destroy","options"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/particle-container/src/ParticleContainer.ts"],"sourcesContent":["import { BLEND_MODES, utils } from '@pixi/core';\nimport { Container } from '@pixi/display';\n\nimport type { BaseTexture, Renderer } from '@pixi/core';\nimport type { IDestroyOptions } from '@pixi/display';\nimport type { Sprite } from '@pixi/sprite';\nimport type { ParticleBuffer } from './ParticleBuffer';\n\nexport interface IParticleProperties\n{\n    vertices?: boolean;\n    position?: boolean;\n    rotation?: boolean;\n    uvs?: boolean;\n    tint?: boolean;\n    alpha?: boolean;\n    scale?: boolean;\n}\n\n/**\n * The ParticleContainer class is a really fast version of the Container built solely for speed,\n * so use when you need a lot of sprites or particles.\n *\n * The tradeoff of the ParticleContainer is that most advanced functionality will not work.\n * ParticleContainer implements the basic object transform (position, scale, rotation)\n * and some advanced functionality like tint (as of v4.5.6).\n *\n * Other more advanced functionality like masking, children, filters, etc will not work on sprites in this batch.\n *\n * It's extremely easy to use. And here you have a hundred sprites that will be rendered at the speed of light.\n * @example\n * import { ParticleContainer, Sprite } from 'pixi.js';\n *\n * const container = new ParticleContainer();\n *\n * for (let i = 0; i < 100; ++i)\n * {\n *     let sprite = Sprite.from('myImage.png');\n *     container.addChild(sprite);\n * }\n * @memberof PIXI\n */\nexport class ParticleContainer extends Container<Sprite>\n{\n    /**\n     * The blend mode to be applied to the sprite. Apply a value of `PIXI.BLEND_MODES.NORMAL`\n     * to reset the blend mode.\n     * @default PIXI.BLEND_MODES.NORMAL\n     */\n    public blendMode: BLEND_MODES;\n\n    /**\n     * If true, container allocates more batches in case there are more than `maxSize` particles.\n     * @default false\n     */\n    public autoResize: boolean;\n\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n     * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n     * The main disadvantage is movement of objects may appear less smooth.\n     * Default to true here as performance is usually the priority for particles.\n     * @default true\n     */\n    public roundPixels: boolean;\n\n    /**\n     * The texture used to render the children.\n     * @readonly\n     */\n    public baseTexture: BaseTexture;\n    public tintRgb: Float32Array;\n\n    /** @private */\n    _maxSize: number;\n\n    /** @private */\n    _buffers: ParticleBuffer[];\n\n    /** @private */\n    _batchSize: number;\n\n    /**\n     * Set properties to be dynamic (true) / static (false).\n     * @private\n     */\n    _properties: boolean[];\n\n    /**\n     * For every batch, stores _updateID corresponding to the last change in that batch.\n     * @private\n     */\n    _bufferUpdateIDs: number[];\n\n    /**\n     * When child inserted, removed or changes position this number goes up.\n     * @private\n     */\n    _updateID: number;\n\n    /**\n     * The tint applied to the container.\n     * This is a hex value. A value of 0xFFFFFF will remove any tint effect.\n     * @default 0xFFFFFF\n     */\n    private _tint: number;\n\n    /**\n     * @param maxSize - The maximum number of particles that can be rendered by the container.\n     *  Affects size of allocated buffers.\n     * @param properties - The properties of children that should be uploaded to the gpu and applied.\n     * @param {boolean} [properties.vertices=false] - When true, vertices be uploaded and applied.\n     *                  if sprite's ` scale/anchor/trim/frame/orig` is dynamic, please set `true`.\n     * @param {boolean} [properties.position=true] - When true, position be uploaded and applied.\n     * @param {boolean} [properties.rotation=false] - When true, rotation be uploaded and applied.\n     * @param {boolean} [properties.uvs=false] - When true, uvs be uploaded and applied.\n     * @param {boolean} [properties.tint=false] - When true, alpha and tint be uploaded and applied.\n     * @param {number} [batchSize=16384] - Number of particles per batch. If less than maxSize, it uses maxSize instead.\n     * @param {boolean} [autoResize=false] - If true, container allocates more batches in case\n     *  there are more than `maxSize` particles.\n     */\n    constructor(maxSize = 1500, properties?: IParticleProperties, batchSize = 16384, autoResize = false)\n    {\n        super();\n\n        // Making sure the batch size is valid\n        // 65535 is max vertex index in the index buffer (see ParticleRenderer)\n        // so max number of particles is 65536 / 4 = 16384\n        const maxBatchSize = 16384;\n\n        if (batchSize > maxBatchSize)\n        {\n            batchSize = maxBatchSize;\n        }\n\n        this._properties = [false, true, false, false, false];\n        this._maxSize = maxSize;\n        this._batchSize = batchSize;\n        this._buffers = null;\n        this._bufferUpdateIDs = [];\n        this._updateID = 0;\n\n        this.interactiveChildren = false;\n        this.blendMode = BLEND_MODES.NORMAL;\n        this.autoResize = autoResize;\n        this.roundPixels = true;\n        this.baseTexture = null;\n\n        this.setProperties(properties);\n\n        this._tint = 0;\n        this.tintRgb = new Float32Array(4);\n        this.tint = 0xFFFFFF;\n    }\n\n    /**\n     * Sets the private properties array to dynamic / static based on the passed properties object\n     * @param properties - The properties to be uploaded\n     */\n    public setProperties(properties: IParticleProperties): void\n    {\n        if (properties)\n        {\n            this._properties[0] = 'vertices' in properties || 'scale' in properties\n                ? !!properties.vertices || !!properties.scale : this._properties[0];\n            this._properties[1] = 'position' in properties ? !!properties.position : this._properties[1];\n            this._properties[2] = 'rotation' in properties ? !!properties.rotation : this._properties[2];\n            this._properties[3] = 'uvs' in properties ? !!properties.uvs : this._properties[3];\n            this._properties[4] = 'tint' in properties || 'alpha' in properties\n                ? !!properties.tint || !!properties.alpha : this._properties[4];\n        }\n    }\n\n    updateTransform(): void\n    {\n        // TODO don't need to!\n        this.displayObjectUpdateTransform();\n    }\n\n    /**\n     * The tint applied to the container. This is a hex value.\n     * A value of 0xFFFFFF will remove any tint effect.\n     * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\n     * @default 0xFFFFFF\n     */\n    get tint(): number\n    {\n        return this._tint;\n    }\n\n    set tint(value: number)\n    {\n        this._tint = value;\n        utils.hex2rgb(value, this.tintRgb);\n    }\n\n    /**\n     * Renders the container using the WebGL renderer.\n     * @param renderer - The WebGL renderer.\n     */\n    public render(renderer: Renderer): void\n    {\n        if (!this.visible || this.worldAlpha <= 0 || !this.children.length || !this.renderable)\n        {\n            return;\n        }\n\n        if (!this.baseTexture)\n        {\n            this.baseTexture = this.children[0]._texture.baseTexture;\n            if (!this.baseTexture.valid)\n            {\n                this.baseTexture.once('update', () => this.onChildrenChange(0));\n            }\n        }\n\n        renderer.batch.setObjectRenderer(renderer.plugins.particle);\n        renderer.plugins.particle.render(this);\n    }\n\n    /**\n     * Set the flag that static data should be updated to true\n     * @param smallestChildIndex - The smallest child index.\n     */\n    protected onChildrenChange(smallestChildIndex: number): void\n    {\n        const bufferIndex = Math.floor(smallestChildIndex / this._batchSize);\n\n        while (this._bufferUpdateIDs.length < bufferIndex)\n        {\n            this._bufferUpdateIDs.push(0);\n        }\n        this._bufferUpdateIDs[bufferIndex] = ++this._updateID;\n    }\n\n    public dispose(): void\n    {\n        if (this._buffers)\n        {\n            for (let i = 0; i < this._buffers.length; ++i)\n            {\n                this._buffers[i].destroy();\n            }\n\n            this._buffers = null;\n        }\n    }\n\n    /**\n     * Destroys the container\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their\n     *  destroy method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the texture of the child sprite\n     * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the base texture of the child sprite\n     */\n    public destroy(options?: IDestroyOptions | boolean): void\n    {\n        super.destroy(options);\n\n        this.dispose();\n\n        this._properties = null;\n        this._buffers = null;\n        this._bufferUpdateIDs = null;\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}