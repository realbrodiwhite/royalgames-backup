{"ast":null,"code":"import { settings } from '@pixi/settings';\nclass CanvasRenderTarget {\n  constructor(width, height, resolution) {\n    this._canvas = settings.ADAPTER.createCanvas();\n    this._context = this._canvas.getContext(\"2d\");\n    this.resolution = resolution || settings.RESOLUTION;\n    this.resize(width, height);\n  }\n  clear() {\n    this._checkDestroyed();\n    this._context.setTransform(1, 0, 0, 1, 0, 0);\n    this._context.clearRect(0, 0, this._canvas.width, this._canvas.height);\n  }\n  resize(desiredWidth, desiredHeight) {\n    this._checkDestroyed();\n    this._canvas.width = Math.round(desiredWidth * this.resolution);\n    this._canvas.height = Math.round(desiredHeight * this.resolution);\n  }\n  destroy() {\n    this._context = null;\n    this._canvas = null;\n  }\n  get width() {\n    this._checkDestroyed();\n    return this._canvas.width;\n  }\n  set width(val) {\n    this._checkDestroyed();\n    this._canvas.width = Math.round(val);\n  }\n  get height() {\n    this._checkDestroyed();\n    return this._canvas.height;\n  }\n  set height(val) {\n    this._checkDestroyed();\n    this._canvas.height = Math.round(val);\n  }\n  get canvas() {\n    this._checkDestroyed();\n    return this._canvas;\n  }\n  get context() {\n    this._checkDestroyed();\n    return this._context;\n  }\n  _checkDestroyed() {\n    if (this._canvas === null) {\n      throw new TypeError(\"The CanvasRenderTarget has already been destroyed\");\n    }\n  }\n}\nexport { CanvasRenderTarget };","map":{"version":3,"mappings":";AASO,MAAMA,kBACb;EAgBIC,YAAYC,KAAe,UAAgBC,UAC3C;IACS,eAAUC,QAAS,SAAQC,YAAa;IAE7C,KAAKC,QAAW,QAAKC,OAAQ,YAAW,IAAI;IAEvC,kBAAaJ,cAAcC,QAAS;IAEpC,YAAOF,OAAOM,MAAM;EAAA;EAO7BC,KACAA;IAEI,KAAKC,eAAgB;IAGrB,KAAKJ,SAASK,YAAa,IAAG,GAAG,CAAG,KAAG,GAAG,CAAC;IACtC,cAASC,UAAU,CAAG,KAAG,KAAKL,OAAQ,QAAO,IAAK,SAAQC,MAAM;EAAA;EAQzEK,OAAOC,cAAsBC,aAC7B;IAEI,KAAKL,eAAgB;IAGrB,KAAKH,QAAQL,KAAQ,QAAKc,KAAM,gBAAe,KAAKb,UAAU;IAC9D,KAAKI,QAAQC,MAAS,QAAKQ,KAAM,iBAAgB,KAAKb,UAAU;EAAA;EAIpEc,OACAA;IACI,KAAKX,QAAW;IAChB,KAAKC,OAAU;EAAA;EAOnB,IAAIL,KACJA;IAEI,KAAKQ,eAAgB;IAGrB,OAAO,KAAKH,OAAQ;EAAA;EAGxB,IAAIL,MAAMgB,GACV;IAEI,KAAKR,eAAgB;IAGrB,KAAKH,OAAQ,SAAQY,IAAK,OAAMD,GAAG;EAAA;EAOvC,IAAIV,MACJA;IAEI,KAAKE,eAAgB;IAGrB,OAAO,KAAKH,OAAQ;EAAA;EAGxB,IAAIC,OAAOU,GACX;IAEI,KAAKR,eAAgB;IAGrB,KAAKH,OAAQ,UAASY,IAAK,OAAMD,GAAG;EAAA;EAIxC,IAAWE,MACXA;IAEI,KAAKV,eAAgB;IAGrB,OAAO,IAAK;EAAA;EAIhB,IAAWW,OACXA;IAEI,KAAKX,eAAgB;IAGrB,OAAO,IAAK;EAAA;EAIhBA,eACAA;IACQ,SAAKH,YAAY,IACrB;MACU,UAAIe,UAAU,mDAAmD;IAAA;EAC3E;AAGR","names":["CanvasRenderTarget","constructor","width","resolution","settings","createCanvas","_context","_canvas","height","clear","_checkDestroyed","setTransform","clearRect","resize","desiredWidth","desiredHeight","round","destroy","val","Math","canvas","context","TypeError"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/utils/src/media/CanvasRenderTarget.ts"],"sourcesContent":["import { settings } from '@pixi/settings';\n\nimport type { ICanvas, ICanvasRenderingContext2D } from '@pixi/settings';\n\n/**\n * Creates a Canvas element of the given size to be used as a target for rendering to.\n * @class\n * @memberof PIXI.utils\n */\nexport class CanvasRenderTarget\n{\n    protected _canvas: ICanvas | null;\n\n    protected _context: ICanvasRenderingContext2D | null;\n\n    /**\n     * The resolution / device pixel ratio of the canvas\n     * @default 1\n     */\n    public resolution: number;\n\n    /**\n     * @param width - the width for the newly created canvas\n     * @param height - the height for the newly created canvas\n     * @param {number} [resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio of the canvas\n     */\n    constructor(width: number, height: number, resolution?: number)\n    {\n        this._canvas = settings.ADAPTER.createCanvas();\n\n        this._context = this._canvas.getContext('2d');\n\n        this.resolution = resolution || settings.RESOLUTION;\n\n        this.resize(width, height);\n    }\n\n    /**\n     * Clears the canvas that was created by the CanvasRenderTarget class.\n     * @private\n     */\n    clear(): void\n    {\n        // #if _DEBUG\n        this._checkDestroyed();\n        // #endif\n\n        this._context.setTransform(1, 0, 0, 1, 0, 0);\n        this._context.clearRect(0, 0, this._canvas.width, this._canvas.height);\n    }\n\n    /**\n     * Resizes the canvas to the specified width and height.\n     * @param desiredWidth - the desired width of the canvas\n     * @param desiredHeight - the desired height of the canvas\n     */\n    resize(desiredWidth: number, desiredHeight: number): void\n    {\n        // #if _DEBUG\n        this._checkDestroyed();\n        // #endif\n\n        this._canvas.width = Math.round(desiredWidth * this.resolution);\n        this._canvas.height = Math.round(desiredHeight * this.resolution);\n    }\n\n    /** Destroys this canvas. */\n    destroy(): void\n    {\n        this._context = null;\n        this._canvas = null;\n    }\n\n    /**\n     * The width of the canvas buffer in pixels.\n     * @member {number}\n     */\n    get width(): number\n    {\n        // #if _DEBUG\n        this._checkDestroyed();\n        // #endif\n\n        return this._canvas.width;\n    }\n\n    set width(val: number)\n    {\n        // #if _DEBUG\n        this._checkDestroyed();\n        // #endif\n\n        this._canvas.width = Math.round(val);\n    }\n\n    /**\n     * The height of the canvas buffer in pixels.\n     * @member {number}\n     */\n    get height(): number\n    {\n        // #if _DEBUG\n        this._checkDestroyed();\n        // #endif\n\n        return this._canvas.height;\n    }\n\n    set height(val: number)\n    {\n        // #if _DEBUG\n        this._checkDestroyed();\n        // #endif\n\n        this._canvas.height = Math.round(val);\n    }\n\n    /** The Canvas object that belongs to this CanvasRenderTarget. */\n    public get canvas(): ICanvas\n    {\n        // #if _DEBUG\n        this._checkDestroyed();\n        // #endif\n\n        return this._canvas;\n    }\n\n    /** A CanvasRenderingContext2D object representing a two-dimensional rendering context. */\n    public get context(): ICanvasRenderingContext2D\n    {\n        // #if _DEBUG\n        this._checkDestroyed();\n        // #endif\n\n        return this._context;\n    }\n\n    // #if _DEBUG\n    private _checkDestroyed(): asserts this is this & { _canvas: ICanvas; _context: ICanvasRenderingContext2D }\n    {\n        if (this._canvas === null)\n        {\n            throw new TypeError('The CanvasRenderTarget has already been destroyed');\n        }\n    }\n    // #endif\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}