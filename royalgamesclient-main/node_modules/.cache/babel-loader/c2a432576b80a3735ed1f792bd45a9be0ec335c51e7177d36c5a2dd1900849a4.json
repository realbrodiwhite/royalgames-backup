{"ast":null,"code":"import { TextFormat } from './TextFormat.mjs';\nexport { TextFormat } from './TextFormat.mjs';\nimport { XMLFormat } from './XMLFormat.mjs';\nexport { XMLFormat } from './XMLFormat.mjs';\nimport { XMLStringFormat } from './XMLStringFormat.mjs';\nexport { XMLStringFormat } from './XMLStringFormat.mjs';\nconst formats = [TextFormat, XMLFormat, XMLStringFormat];\nfunction autoDetectFormat(data) {\n  for (let i = 0; i < formats.length; i++) {\n    if (formats[i].test(data)) {\n      return formats[i];\n    }\n  }\n  return null;\n}\nexport { autoDetectFormat };","map":{"version":3,"mappings":";;;;;;AAKA,MAAMA,OAAU,IACZC,YACAC,WACAC,gBACJ;AAQO,0BAA0BC,IACjC;EACI,SAASC,CAAI,MAAGA,CAAI,WAAQC,QAAQD,CACpC;IACI,IAAIL,OAAQ,IAAGO,IAAK,KAAI,CACxB;MACI,OAAOP,OAAQ;IAAA;EACnB;EAGG;AACX","names":["formats","TextFormat","XMLFormat","XMLStringFormat","data","i","length","test"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/text-bitmap/src/formats/index.ts"],"sourcesContent":["import { TextFormat } from './TextFormat';\nimport { XMLFormat } from './XMLFormat';\nimport { XMLStringFormat } from './XMLStringFormat';\n\n// Registered formats, maybe make this extensible in the future?\nconst formats = [\n    TextFormat,\n    XMLFormat,\n    XMLStringFormat,\n] as const;\n\n/**\n * Auto-detect BitmapFont parsing format based on data.\n * @private\n * @param {any} data - Data to detect format\n * @returns {any} Format or null\n */\nexport function autoDetectFormat(data: unknown): typeof formats[number] | null\n{\n    for (let i = 0; i < formats.length; i++)\n    {\n        if (formats[i].test(data))\n        {\n            return formats[i];\n        }\n    }\n\n    return null;\n}\n\nexport type { IBitmapFontRawData } from './TextFormat';\nexport { TextFormat, XMLFormat, XMLStringFormat };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}