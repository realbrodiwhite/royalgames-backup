{"ast":null,"code":"import { ExtensionType, extensions } from '@pixi/extensions';\nimport { ObjectRenderer } from './ObjectRenderer.mjs';\nclass BatchSystem {\n  constructor(renderer) {\n    this.renderer = renderer;\n    this.emptyRenderer = new ObjectRenderer(renderer);\n    this.currentRenderer = this.emptyRenderer;\n  }\n  setObjectRenderer(objectRenderer) {\n    if (this.currentRenderer === objectRenderer) {\n      return;\n    }\n    this.currentRenderer.stop();\n    this.currentRenderer = objectRenderer;\n    this.currentRenderer.start();\n  }\n  flush() {\n    this.setObjectRenderer(this.emptyRenderer);\n  }\n  reset() {\n    this.setObjectRenderer(this.emptyRenderer);\n  }\n  copyBoundTextures(arr, maxTextures) {\n    const {\n      boundTextures\n    } = this.renderer.texture;\n    for (let i = maxTextures - 1; i >= 0; --i) {\n      arr[i] = boundTextures[i] || null;\n      if (arr[i]) {\n        arr[i]._batchLocation = i;\n      }\n    }\n  }\n  boundArray(texArray, boundTextures, batchId, maxTextures) {\n    const {\n      elements,\n      ids,\n      count\n    } = texArray;\n    let j = 0;\n    for (let i = 0; i < count; i++) {\n      const tex = elements[i];\n      const loc = tex._batchLocation;\n      if (loc >= 0 && loc < maxTextures && boundTextures[loc] === tex) {\n        ids[i] = loc;\n        continue;\n      }\n      while (j < maxTextures) {\n        const bound = boundTextures[j];\n        if (bound && bound._batchEnabled === batchId && bound._batchLocation === j) {\n          j++;\n          continue;\n        }\n        ids[i] = j;\n        tex._batchLocation = j;\n        boundTextures[j] = tex;\n        break;\n      }\n    }\n  }\n  destroy() {\n    this.renderer = null;\n  }\n}\nBatchSystem.extension = {\n  type: ExtensionType.RendererSystem,\n  name: \"batch\"\n};\nextensions.add(BatchSystem);\nexport { BatchSystem };","map":{"version":3,"mappings":";;AAaO,MAAMA,WACb;EAiBIC,YAAYC,QACZ;IACI,KAAKA,QAAW;IACX,qBAAgB,IAAIC,eAAeD,QAAQ;IAChD,KAAKE,kBAAkB,IAAK;EAAA;EAOhCC,kBAAkBC,cAClB;IACQ,SAAKF,oBAAoBE,cAC7B;MACI;IAAA;IAGJ,KAAKF,gBAAgBG,IAAK;IAC1B,KAAKH,eAAkB;IAEvB,KAAKA,gBAAgBI,KAAM;EAAA;EAO/BC,KACAA;IACS,uBAAkB,KAAKC,aAAa;EAAA;EAI7CC,KACAA;IACS,uBAAkB,KAAKD,aAAa;EAAA;EAS7CE,kBAAkBC,KAAoBC,WACtC;IACU;MAAEC;IAAkB,SAAKb,QAAS;IAExC,SAASc,IAAIF,WAAc,MAAGE,CAAK,OAAG,EAAEA,CACxC;MACQH,SAAKE,cAAcC,CAAM;MAC7B,IAAIH,IAAIG,CACR;QACIH,IAAIG,GAAGC,cAAiB;MAAA;IAC5B;EACJ;EAYJC,UAAWA,WAA6BH,aACpC,WAAiBD,WACrB;IACU;MAAEK,QAAU;MAAAC;MAAKC;IAAU;IACjC,IAAIC,CAAI;IAER,SAASN,CAAI,MAAGA,CAAI,UAAOA,CAC3B;MACI,MAAMO,MAAMJ,QAAS;MACrB,MAAMK,MAAMD,GAAI;MAEhB,IAAIC,OAAO,CAAK,UAAMV,WACf,kBAAcU,SAASD,GAC9B;QACIH,IAAIJ,CAAK;QACT;MAAA;MAGJ,OAAOM,IAAIR,WACX;QACI,MAAMW,QAAQV,aAAc;QAE5B,IAAIU,SAASA,KAAM,mBAAkBC,OAC9B,UAAMT,mBAAmBK,CAChC;UACIA;UACA;QAAA;QAGJF,IAAIJ,CAAK;QACTO,IAAIN,cAAiB;QACrBF,cAAcO,CAAK;QACnB;MAAA;IACJ;EACJ;EAMJK,OACAA;IACI,KAAKzB,QAAW;EAAA;AAExB;AAlIaF,YAGF4B,SAA+B;EAClCC,MAAMC,aAAc;EACpBC,IAAM;AACV;AA8HJC,WAAWC,IAAIjC,WAAW","names":["BatchSystem","constructor","renderer","ObjectRenderer","currentRenderer","setObjectRenderer","objectRenderer","stop","start","flush","emptyRenderer","reset","copyBoundTextures","arr","maxTextures","boundTextures","i","_batchLocation","boundArray","elements","ids","count","j","tex","loc","bound","batchId","destroy","extension","type","ExtensionType","name","extensions","add"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/core/src/batch/BatchSystem.ts"],"sourcesContent":["import { extensions, ExtensionType } from '@pixi/extensions';\nimport { ObjectRenderer } from './ObjectRenderer';\n\nimport type { ExtensionMetadata } from '@pixi/extensions';\nimport type { Renderer } from '../Renderer';\nimport type { ISystem } from '../system/ISystem';\nimport type { BaseTexture } from '../textures/BaseTexture';\nimport type { BatchTextureArray } from './BatchTextureArray';\n\n/**\n * System plugin to the renderer to manage batching.\n * @memberof PIXI\n */\nexport class BatchSystem implements ISystem\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        type: ExtensionType.RendererSystem,\n        name: 'batch',\n    };\n\n    /** An empty renderer. */\n    public readonly emptyRenderer: ObjectRenderer;\n\n    /** The currently active ObjectRenderer. */\n    public currentRenderer: ObjectRenderer;\n    private renderer: Renderer;\n\n    /**\n     * @param renderer - The renderer this System works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n        this.emptyRenderer = new ObjectRenderer(renderer);\n        this.currentRenderer = this.emptyRenderer;\n    }\n\n    /**\n     * Changes the current renderer to the one given in parameter\n     * @param objectRenderer - The object renderer to use.\n     */\n    setObjectRenderer(objectRenderer: ObjectRenderer): void\n    {\n        if (this.currentRenderer === objectRenderer)\n        {\n            return;\n        }\n\n        this.currentRenderer.stop();\n        this.currentRenderer = objectRenderer;\n\n        this.currentRenderer.start();\n    }\n\n    /**\n     * This should be called if you wish to do some custom rendering\n     * It will basically render anything that may be batched up such as sprites\n     */\n    flush(): void\n    {\n        this.setObjectRenderer(this.emptyRenderer);\n    }\n\n    /** Reset the system to an empty renderer */\n    reset(): void\n    {\n        this.setObjectRenderer(this.emptyRenderer);\n    }\n\n    /**\n     * Handy function for batch renderers: copies bound textures in first maxTextures locations to array\n     * sets actual _batchLocation for them\n     * @param arr - arr copy destination\n     * @param maxTextures - number of copied elements\n     */\n    copyBoundTextures(arr: BaseTexture[], maxTextures: number): void\n    {\n        const { boundTextures } = this.renderer.texture;\n\n        for (let i = maxTextures - 1; i >= 0; --i)\n        {\n            arr[i] = boundTextures[i] || null;\n            if (arr[i])\n            {\n                arr[i]._batchLocation = i;\n            }\n        }\n    }\n\n    /**\n     * Assigns batch locations to textures in array based on boundTextures state.\n     * All textures in texArray should have `_batchEnabled = _batchId`,\n     * and their count should be less than `maxTextures`.\n     * @param texArray - textures to bound\n     * @param boundTextures - current state of bound textures\n     * @param batchId - marker for _batchEnabled param of textures in texArray\n     * @param maxTextures - number of texture locations to manipulate\n     */\n    boundArray(texArray: BatchTextureArray, boundTextures: Array<BaseTexture>,\n        batchId: number, maxTextures: number): void\n    {\n        const { elements, ids, count } = texArray;\n        let j = 0;\n\n        for (let i = 0; i < count; i++)\n        {\n            const tex = elements[i];\n            const loc = tex._batchLocation;\n\n            if (loc >= 0 && loc < maxTextures\n                && boundTextures[loc] === tex)\n            {\n                ids[i] = loc;\n                continue;\n            }\n\n            while (j < maxTextures)\n            {\n                const bound = boundTextures[j];\n\n                if (bound && bound._batchEnabled === batchId\n                    && bound._batchLocation === j)\n                {\n                    j++;\n                    continue;\n                }\n\n                ids[i] = j;\n                tex._batchLocation = j;\n                boundTextures[j] = tex;\n                break;\n            }\n        }\n    }\n\n    /**\n     * @ignore\n     */\n    destroy(): void\n    {\n        this.renderer = null;\n    }\n}\n\nextensions.add(BatchSystem);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}