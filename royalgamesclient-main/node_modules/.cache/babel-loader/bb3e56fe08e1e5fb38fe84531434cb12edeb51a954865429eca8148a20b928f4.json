{"ast":null,"code":"import { GC_MODES } from '@pixi/constants';\nimport { ExtensionType, extensions } from '@pixi/extensions';\nconst _TextureGCSystem = class {\n  constructor(renderer) {\n    this.renderer = renderer;\n    this.count = 0;\n    this.checkCount = 0;\n    this.maxIdle = _TextureGCSystem.defaultMaxIdle;\n    this.checkCountMax = _TextureGCSystem.defaultCheckCountMax;\n    this.mode = _TextureGCSystem.defaultMode;\n  }\n  postrender() {\n    if (!this.renderer.objectRenderer.renderingToScreen) {\n      return;\n    }\n    this.count++;\n    if (this.mode === GC_MODES.MANUAL) {\n      return;\n    }\n    this.checkCount++;\n    if (this.checkCount > this.checkCountMax) {\n      this.checkCount = 0;\n      this.run();\n    }\n  }\n  run() {\n    const tm = this.renderer.texture;\n    const managedTextures = tm.managedTextures;\n    let wasRemoved = false;\n    for (let i = 0; i < managedTextures.length; i++) {\n      const texture = managedTextures[i];\n      if (!texture.framebuffer && this.count - texture.touched > this.maxIdle) {\n        tm.destroyTexture(texture, true);\n        managedTextures[i] = null;\n        wasRemoved = true;\n      }\n    }\n    if (wasRemoved) {\n      let j = 0;\n      for (let i = 0; i < managedTextures.length; i++) {\n        if (managedTextures[i] !== null) {\n          managedTextures[j++] = managedTextures[i];\n        }\n      }\n      managedTextures.length = j;\n    }\n  }\n  unload(displayObject) {\n    const tm = this.renderer.texture;\n    const texture = displayObject._texture;\n    if (texture && !texture.framebuffer) {\n      tm.destroyTexture(texture);\n    }\n    for (let i = displayObject.children.length - 1; i >= 0; i--) {\n      this.unload(displayObject.children[i]);\n    }\n  }\n  destroy() {\n    this.renderer = null;\n  }\n};\nlet TextureGCSystem = _TextureGCSystem;\nTextureGCSystem.defaultMode = GC_MODES.AUTO;\nTextureGCSystem.defaultMaxIdle = 60 * 60;\nTextureGCSystem.defaultCheckCountMax = 60 * 10;\nTextureGCSystem.extension = {\n  type: ExtensionType.RendererSystem,\n  name: \"textureGC\"\n};\nextensions.add(TextureGCSystem);\nexport { TextureGCSystem };","map":{"version":3,"mappings":";;AAoBO,MAAMA,mBAAN,MACP;EAgEIC,YAAYC,QACZ;IACI,KAAKA,QAAW;IAEhB,KAAKC,KAAQ;IACb,KAAKC,UAAa;IAClB,KAAKC,UAAUL,gBAAgB;IAC/B,KAAKM,gBAAgBN,gBAAgB;IACrC,KAAKO,OAAOP,gBAAgB;EAAA;EAOhCQ,UACAA;IACI,IAAI,CAAC,KAAKN,QAAS,gBAAeO,iBAClC;MACI;IAAA;IAGC;IAED,SAAKF,IAAS,cAASG,MAC3B;MACI;IAAA;IAGC;IAED,SAAKN,UAAa,QAAKE,aAC3B;MACI,KAAKF,UAAa;MAElB,KAAKO,GAAI;IAAA;EACb;EAOJA,GACAA;IACU,WAAK,KAAKT,QAAS;IACzB,MAAMU,kBAAkBC,EAAG;IAC3B,IAAIC,UAAa;IAEjB,SAASC,CAAI,MAAGA,CAAI,mBAAgBC,QAAQD,CAC5C;MACI,MAAME,UAAUL,eAAgB;MAG5B,KAAEK,QAAgBC,WAAe,SAAKf,QAAQc,OAAQ,WAAU,KAAKZ,OACzE;QACOQ,kBAAeI,SAAS,IAAI;QAC/BL,gBAAgBG,CAAK;QACRD;MAAA;IACjB;IAGJ,IAAIA,UACJ;MACI,IAAIK,CAAI;MAER,SAASJ,CAAI,MAAGA,CAAI,mBAAgBC,QAAQD,CAC5C;QACQ,oBAAgBA,OAAO,IAC3B;UACIH,gBAAgBO,OAAOP,eAAgB;QAAA;MAC3C;MAGJA,gBAAgBI,MAAS;IAAA;EAC7B;EAOJI,OAAOC,aACP;IACU,WAAK,KAAKnB,QAAS;IACzB,MAAMe,UAAUI,aAAc;IAG1B,eAAW,CAACJ,QAAQC,WACxB;MACIL,GAAGS,eAAeL,OAAO;IAAA;IAG7B,SAASF,IAAIM,aAAc,UAASL,SAAS,CAAG,OAAK,GAAGD,CACxD;MACS,YAAOM,aAAc,UAASN,CAAE;IAAA;EACzC;EAGJQ,OACAA;IACI,KAAKrB,QAAW;EAAA;AAExB;AAxKO,IAAMsB,eAAN;AASHA,eATS,CASKC,cAAcC,QAAS;AAQrCF,eAjBS,CAiBKG,iBAAiB,EAAK;AAQpCH,eAzBS,CAyBKI,uBAAuB,EAAK;AAzBjCJ,gBA4BFK,SAA+B;EAClCC,MAAMC,aAAc;EACpBC,IAAM;AACV;AA2IJC,WAAWC,IAAIV,eAAe","names":["_TextureGCSystem","constructor","renderer","count","checkCount","maxIdle","checkCountMax","mode","postrender","renderingToScreen","MANUAL","run","managedTextures","tm","wasRemoved","i","length","texture","framebuffer","j","unload","displayObject","destroyTexture","destroy","TextureGCSystem","defaultMode","GC_MODES","defaultMaxIdle","defaultCheckCountMax","extension","type","ExtensionType","name","extensions","add"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/core/src/textures/TextureGCSystem.ts"],"sourcesContent":["import { GC_MODES } from '@pixi/constants';\nimport { extensions, ExtensionType } from '@pixi/extensions';\n\nimport type { ExtensionMetadata } from '@pixi/extensions';\nimport type { Renderer } from '../Renderer';\nimport type { RenderTexture } from '../renderTexture/RenderTexture';\nimport type { ISystem } from '../system/ISystem';\nimport type { Texture } from './Texture';\n\nexport interface IUnloadableTexture\n{\n    _texture: Texture | RenderTexture;\n    children: IUnloadableTexture[];\n}\n\n/**\n * System plugin to the renderer to manage texture garbage collection on the GPU,\n * ensuring that it does not get clogged up with textures that are no longer being used.\n * @memberof PIXI\n */\nexport class TextureGCSystem implements ISystem\n{\n    /**\n     * Default garbage collection mode.\n     * @static\n     * @type {PIXI.GC_MODES}\n     * @default PIXI.GC_MODES.AUTO\n     * @see PIXI.TextureGCSystem#mode\n     */\n    public static defaultMode = GC_MODES.AUTO;\n\n    /**\n     * Default maximum idle frames before a texture is destroyed by garbage collection.\n     * @static\n     * @default 3600\n     * @see PIXI.TextureGCSystem#maxIdle\n     */\n    public static defaultMaxIdle = 60 * 60;\n\n    /**\n     * Default frames between two garbage collections.\n     * @static\n     * @default 600\n     * @see PIXI.TextureGCSystem#checkCountMax\n     */\n    public static defaultCheckCountMax = 60 * 10;\n\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        type: ExtensionType.RendererSystem,\n        name: 'textureGC',\n    };\n\n    /**\n     * Frame count since started.\n     * @readonly\n     */\n    public count: number;\n\n    /**\n     * Frame count since last garbage collection.\n     * @readonly\n     */\n    public checkCount: number;\n\n    /**\n     * Maximum idle frames before a texture is destroyed by garbage collection.\n     * @see PIXI.TextureGCSystem.defaultMaxIdle\n     */\n    public maxIdle: number;\n\n    /**\n     * Frames between two garbage collections.\n     * @see PIXI.TextureGCSystem.defaultCheckCountMax\n     */\n    public checkCountMax: number;\n\n    /**\n     * Current garbage collection mode.\n     * @see PIXI.TextureGCSystem.defaultMode\n     */\n    public mode: GC_MODES;\n    private renderer: Renderer;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n\n        this.count = 0;\n        this.checkCount = 0;\n        this.maxIdle = TextureGCSystem.defaultMaxIdle;\n        this.checkCountMax = TextureGCSystem.defaultCheckCountMax;\n        this.mode = TextureGCSystem.defaultMode;\n    }\n\n    /**\n     * Checks to see when the last time a texture was used.\n     * If the texture has not been used for a specified amount of time, it will be removed from the GPU.\n     */\n    protected postrender(): void\n    {\n        if (!this.renderer.objectRenderer.renderingToScreen)\n        {\n            return;\n        }\n\n        this.count++;\n\n        if (this.mode === GC_MODES.MANUAL)\n        {\n            return;\n        }\n\n        this.checkCount++;\n\n        if (this.checkCount > this.checkCountMax)\n        {\n            this.checkCount = 0;\n\n            this.run();\n        }\n    }\n\n    /**\n     * Checks to see when the last time a texture was used.\n     * If the texture has not been used for a specified amount of time, it will be removed from the GPU.\n     */\n    run(): void\n    {\n        const tm = this.renderer.texture;\n        const managedTextures = tm.managedTextures;\n        let wasRemoved = false;\n\n        for (let i = 0; i < managedTextures.length; i++)\n        {\n            const texture = managedTextures[i];\n\n            // Only supports non generated textures at the moment!\n            if (!(texture as any).framebuffer && this.count - texture.touched > this.maxIdle)\n            {\n                tm.destroyTexture(texture, true);\n                managedTextures[i] = null;\n                wasRemoved = true;\n            }\n        }\n\n        if (wasRemoved)\n        {\n            let j = 0;\n\n            for (let i = 0; i < managedTextures.length; i++)\n            {\n                if (managedTextures[i] !== null)\n                {\n                    managedTextures[j++] = managedTextures[i];\n                }\n            }\n\n            managedTextures.length = j;\n        }\n    }\n\n    /**\n     * Removes all the textures within the specified displayObject and its children from the GPU.\n     * @param {PIXI.DisplayObject} displayObject - the displayObject to remove the textures from.\n     */\n    unload(displayObject: IUnloadableTexture): void\n    {\n        const tm = this.renderer.texture;\n        const texture = displayObject._texture as RenderTexture;\n\n        // only destroy non generated textures\n        if (texture && !texture.framebuffer)\n        {\n            tm.destroyTexture(texture);\n        }\n\n        for (let i = displayObject.children.length - 1; i >= 0; i--)\n        {\n            this.unload(displayObject.children[i]);\n        }\n    }\n\n    destroy(): void\n    {\n        this.renderer = null;\n    }\n}\n\nextensions.add(TextureGCSystem);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}