{"ast":null,"code":"import { LoaderParserPriority, checkExtension, createTexture } from '@pixi/assets';\nimport { ExtensionType, settings, BaseTexture, MIPMAP_MODES, ALPHA_MODES, utils, extensions } from '@pixi/core';\nimport '../parsers/index.mjs';\nimport { parseDDS } from '../parsers/parseDDS.mjs';\nconst loadDDS = {\n  extension: {\n    type: ExtensionType.LoadParser,\n    priority: LoaderParserPriority.High\n  },\n  test(url) {\n    return checkExtension(url, \".dds\");\n  },\n  async load(url, asset, loader) {\n    const response = await settings.ADAPTER.fetch(url);\n    const arrayBuffer = await response.arrayBuffer();\n    const resources = parseDDS(arrayBuffer);\n    const textures = resources.map(resource => {\n      const base = new BaseTexture(resource, {\n        mipmap: MIPMAP_MODES.OFF,\n        alphaMode: ALPHA_MODES.NO_PREMULTIPLIED_ALPHA,\n        resolution: utils.getResolutionOfUrl(url),\n        ...asset.data\n      });\n      return createTexture(base, loader, url);\n    });\n    return textures.length === 1 ? textures[0] : textures;\n  },\n  unload(texture) {\n    if (Array.isArray(texture)) {\n      texture.forEach(t => t.destroy(true));\n    } else {\n      texture.destroy(true);\n    }\n  }\n};\nextensions.add(loadDDS);\nexport { loadDDS };","map":{"version":3,"mappings":";;;;AAQO,MAAMA,OAAwB;EACjCC,SAAW;IACPC,MAAMC,aAAc;IACpBC,UAAUC,oBAAqB;EAAA,CACnC;EAEAC,KAAKC,GACL;IACW,sBAAeA,KAAK,MAAM;EAAA,CACrC;EAEA,MAAMC,KAAKD,GAAa,SAAkBE,MAC1C;IAEI,MAAMC,QAAW,SAAMC,QAAS,SAAQC,MAAML,GAAG;IAE3C,oBAAc,MAAMG,SAASG,WAAY;IAEzC,kBAAYC,SAASD,WAAW;IAEtC,MAAME,QAAW,aAAUC,GAAI,CAACC,QAChC;MACU,aAAO,IAAIC,YAAYD,QAAU;QACnCE,QAAQC,YAAa;QACrBC,WAAWC,WAAY;QACvBC,YAAYC,KAAM,oBAAmBjB,GAAG;QACxC,GAAGkB,KAAM;MAAA,CACZ;MAEM,qBAAcC,IAAM,UAAQnB,GAAG;IAAA,CACzC;IAED,OAAOQ,QAAS,YAAW,CAAI,YAAS,CAAK;EAAA,CACjD;EAEAY,OAAOC,OACP;IACQ,UAAMC,OAAQ,QAAO,CACzB;MACID,QAAQE,QAASC,KAAMA,CAAE,SAAQ,IAAI,CAAC;IAAA,CAG1C;MACIH,QAAQI,QAAQ,IAAI;IAAA;EACxB;AAGR;AAEAC,WAAWC,IAAIlC,OAAO","names":["loadDDS","extension","type","ExtensionType","priority","LoaderParserPriority","test","url","load","loader","response","settings","fetch","arrayBuffer","parseDDS","textures","map","resource","BaseTexture","mipmap","MIPMAP_MODES","alphaMode","ALPHA_MODES","resolution","utils","asset","base","unload","texture","isArray","forEach","t","destroy","extensions","add"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/compressed-textures/src/loaders/loadDDS.ts"],"sourcesContent":["import { checkExtension, createTexture, LoaderParserPriority } from '@pixi/assets';\nimport { ALPHA_MODES, BaseTexture, extensions, ExtensionType, MIPMAP_MODES, settings, utils } from '@pixi/core';\nimport { parseDDS } from '../parsers';\n\nimport type { LoadAsset, Loader, LoaderParser } from '@pixi/assets';\nimport type { IBaseTextureOptions, Texture } from '@pixi/core';\n\n/** Load our DDS textures! */\nexport const loadDDS: LoaderParser = {\n    extension: {\n        type: ExtensionType.LoadParser,\n        priority: LoaderParserPriority.High,\n    },\n\n    test(url: string): boolean\n    {\n        return checkExtension(url, '.dds');\n    },\n\n    async load(url: string, asset: LoadAsset, loader: Loader): Promise<Texture | Texture[]>\n    {\n        // get an array buffer...\n        const response = await settings.ADAPTER.fetch(url);\n\n        const arrayBuffer = await response.arrayBuffer();\n\n        const resources = parseDDS(arrayBuffer);\n\n        const textures = resources.map((resource) =>\n        {\n            const base = new BaseTexture(resource, {\n                mipmap: MIPMAP_MODES.OFF,\n                alphaMode: ALPHA_MODES.NO_PREMULTIPLIED_ALPHA,\n                resolution: utils.getResolutionOfUrl(url),\n                ...asset.data,\n            });\n\n            return createTexture(base, loader, url);\n        });\n\n        return textures.length === 1 ? textures[0] : textures;\n    },\n\n    unload(texture: Texture | Texture[]): void\n    {\n        if (Array.isArray(texture))\n        {\n            texture.forEach((t) => t.destroy(true));\n        }\n        else\n        {\n            texture.destroy(true);\n        }\n    }\n\n} as LoaderParser<Texture | Texture[], IBaseTextureOptions>;\n\nextensions.add(loadDDS);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}