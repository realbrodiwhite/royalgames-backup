{"ast":null,"code":"import { ALPHA_MODES } from '@pixi/constants';\nimport { Resource } from './Resource.mjs';\nclass BufferResource extends Resource {\n  constructor(source, options) {\n    const {\n      width,\n      height\n    } = options || {};\n    if (!width || !height) {\n      throw new Error(\"BufferResource width or height invalid\");\n    }\n    super(width, height);\n    this.data = source;\n  }\n  upload(renderer, baseTexture, glTexture) {\n    const gl = renderer.gl;\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, baseTexture.alphaMode === ALPHA_MODES.UNPACK);\n    const width = baseTexture.realWidth;\n    const height = baseTexture.realHeight;\n    if (glTexture.width === width && glTexture.height === height) {\n      gl.texSubImage2D(baseTexture.target, 0, 0, 0, width, height, baseTexture.format, glTexture.type, this.data);\n    } else {\n      glTexture.width = width;\n      glTexture.height = height;\n      gl.texImage2D(baseTexture.target, 0, glTexture.internalFormat, width, height, 0, baseTexture.format, glTexture.type, this.data);\n    }\n    return true;\n  }\n  dispose() {\n    this.data = null;\n  }\n  static test(source) {\n    return source instanceof Float32Array || source instanceof Uint8Array || source instanceof Uint32Array;\n  }\n}\nexport { BufferResource };","map":{"version":3,"mappings":";;AAeO,MAAMA,uBAAuBC,QACpC;EAUIC,YAAYC,QAA4EC,OACxF;IACI,MAAM;MAAEC;MAAOC;IAAW,eAAW,EAAC;IAElC,KAACD,KAAS,KAACC,MACf;MACU,UAAIC,MAAM,wCAAwC;IAAA;IAG5D,MAAMF,OAAOC,MAAM;IAEnB,KAAKE,IAAO;EAAA;EAUhBC,OAAOC,QAAoB,eAA0BC,SACrD;IACI,MAAMC,KAAKF,QAAS;IAEpBE,GAAGC,YAAYD,EAAG,iCAAgCE,WAAY,eAAcC,YAAYC,MAAM;IAE9F,MAAMX,QAAQS,WAAY;IAC1B,MAAMR,SAASQ,WAAY;IAE3B,IAAIH,SAAU,WAAUN,KAAS,cAAUC,WAAWA,MACtD;MACIM,GAAGK,aACC,aAAYC,MACZ,KACA,CACA,KACAb,KACA,UACAS,WAAY,SACZH,SAAU,OACV,KAAKH,IACT;IAAA,CAGJ;MACIG,UAAUN,KAAQ;MAClBM,UAAUL,MAAS;MAEnBM,GAAGO,UACC,aAAYD,MACZ,KACAP,UAAUS,cACV,SACAd,MACA,KACAQ,WAAY,SACZH,SAAU,OACV,KAAKH,IACT;IAAA;IAGG;EAAA;EAIXa,OACAA;IACI,KAAKb,IAAO;EAAA;EAQhB,OAAOc,KAAKnB,MACZ;IACI,OAAOA,MAAkB,4BAClBA,MAAkB,0BAClBA,MAAkB;EAAA;AAEjC","names":["BufferResource","Resource","constructor","source","options","width","height","Error","data","upload","renderer","glTexture","gl","pixelStorei","baseTexture","ALPHA_MODES","UNPACK","texSubImage2D","target","texImage2D","internalFormat","dispose","test"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/core/src/textures/resources/BufferResource.ts"],"sourcesContent":["import { ALPHA_MODES } from '@pixi/constants';\nimport { Resource } from './Resource';\n\nimport type { ISize } from '@pixi/math';\nimport type { Renderer } from '../../Renderer';\nimport type { BaseTexture } from '../BaseTexture';\nimport type { GLTexture } from '../GLTexture';\n/**\n * @interface SharedArrayBuffer\n */\n\n/**\n * Buffer resource with data of typed array.\n * @memberof PIXI\n */\nexport class BufferResource extends Resource\n{\n    /** Source array Cannot be {@code ClampedUint8Array} because it cant be uploaded to WebGL */\n    data: Float32Array | Uint8Array | Uint16Array | Int32Array | Uint32Array;\n\n    /**\n     * @param source - Source buffer\n     * @param options - Options\n     * @param {number} options.width - Width of the texture\n     * @param {number} options.height - Height of the texture\n     */\n    constructor(source: Float32Array | Uint8Array | Uint16Array | Int32Array | Uint32Array, options: ISize)\n    {\n        const { width, height } = options || {};\n\n        if (!width || !height)\n        {\n            throw new Error('BufferResource width or height invalid');\n        }\n\n        super(width, height);\n\n        this.data = source;\n    }\n\n    /**\n     * Upload the texture to the GPU.\n     * @param renderer - Upload to the renderer\n     * @param baseTexture - Reference to parent texture\n     * @param glTexture - glTexture\n     * @returns - true is success\n     */\n    upload(renderer: Renderer, baseTexture: BaseTexture, glTexture: GLTexture): boolean\n    {\n        const gl = renderer.gl;\n\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, baseTexture.alphaMode === ALPHA_MODES.UNPACK);\n\n        const width = baseTexture.realWidth;\n        const height = baseTexture.realHeight;\n\n        if (glTexture.width === width && glTexture.height === height)\n        {\n            gl.texSubImage2D(\n                baseTexture.target,\n                0,\n                0,\n                0,\n                width,\n                height,\n                baseTexture.format,\n                glTexture.type,\n                this.data\n            );\n        }\n        else\n        {\n            glTexture.width = width;\n            glTexture.height = height;\n\n            gl.texImage2D(\n                baseTexture.target,\n                0,\n                glTexture.internalFormat,\n                width,\n                height,\n                0,\n                baseTexture.format,\n                glTexture.type,\n                this.data\n            );\n        }\n\n        return true;\n    }\n\n    /** Destroy and don't use after this. */\n    dispose(): void\n    {\n        this.data = null;\n    }\n\n    /**\n     * Used to auto-detect the type of resource.\n     * @param {*} source - The source object\n     * @returns {boolean} `true` if <canvas>\n     */\n    static test(source: unknown): source is Float32Array | Uint8Array | Uint32Array\n    {\n        return source instanceof Float32Array\n            || source instanceof Uint8Array\n            || source instanceof Uint32Array;\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}