{"ast":null,"code":"import { settings } from '@pixi/core';\nconst contextSettings = {\n  willReadFrequently: true\n};\nconst _TextMetrics = class {\n  static get experimentalLetterSpacingSupported() {\n    let result = _TextMetrics._experimentalLetterSpacingSupported;\n    if (result !== void 0) {\n      const proto = settings.ADAPTER.getCanvasRenderingContext2D().prototype;\n      result = _TextMetrics._experimentalLetterSpacingSupported = \"letterSpacing\" in proto || \"textLetterSpacing\" in proto;\n    }\n    return result;\n  }\n  constructor(text, style, width, height, lines, lineWidths, lineHeight, maxLineWidth, fontProperties) {\n    this.text = text;\n    this.style = style;\n    this.width = width;\n    this.height = height;\n    this.lines = lines;\n    this.lineWidths = lineWidths;\n    this.lineHeight = lineHeight;\n    this.maxLineWidth = maxLineWidth;\n    this.fontProperties = fontProperties;\n  }\n  static measureText(text, style, wordWrap) {\n    let canvas = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _TextMetrics._canvas;\n    wordWrap = wordWrap === void 0 || wordWrap === null ? style.wordWrap : wordWrap;\n    const font = style.toFontString();\n    const fontProperties = _TextMetrics.measureFont(font);\n    if (fontProperties.fontSize === 0) {\n      fontProperties.fontSize = style.fontSize;\n      fontProperties.ascent = style.fontSize;\n    }\n    const context = canvas.getContext(\"2d\", contextSettings);\n    context.font = font;\n    const outputText = wordWrap ? _TextMetrics.wordWrap(text, style, canvas) : text;\n    const lines = outputText.split(/(?:\\r\\n|\\r|\\n)/);\n    const lineWidths = new Array(lines.length);\n    let maxLineWidth = 0;\n    for (let i = 0; i < lines.length; i++) {\n      const lineWidth = _TextMetrics._measureText(lines[i], style.letterSpacing, context);\n      lineWidths[i] = lineWidth;\n      maxLineWidth = Math.max(maxLineWidth, lineWidth);\n    }\n    let width = maxLineWidth + style.strokeThickness;\n    if (style.dropShadow) {\n      width += style.dropShadowDistance;\n    }\n    const lineHeight = style.lineHeight || fontProperties.fontSize + style.strokeThickness;\n    let height = Math.max(lineHeight, fontProperties.fontSize + style.strokeThickness * 2) + (lines.length - 1) * (lineHeight + style.leading);\n    if (style.dropShadow) {\n      height += style.dropShadowDistance;\n    }\n    return new _TextMetrics(text, style, width, height, lines, lineWidths, lineHeight + style.leading, maxLineWidth, fontProperties);\n  }\n  static _measureText(text, letterSpacing, context) {\n    let useExperimentalLetterSpacing = false;\n    if (_TextMetrics.experimentalLetterSpacingSupported) {\n      if (_TextMetrics.experimentalLetterSpacing) {\n        context.letterSpacing = \"\".concat(letterSpacing, \"px\");\n        context.textLetterSpacing = \"\".concat(letterSpacing, \"px\");\n        useExperimentalLetterSpacing = true;\n      } else {\n        context.letterSpacing = \"0px\";\n        context.textLetterSpacing = \"0px\";\n      }\n    }\n    let width = context.measureText(text).width;\n    if (width > 0) {\n      if (useExperimentalLetterSpacing) {\n        width -= letterSpacing;\n      } else {\n        width += (_TextMetrics.graphemeSegmenter(text).length - 1) * letterSpacing;\n      }\n    }\n    return width;\n  }\n  static wordWrap(text, style) {\n    let canvas = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _TextMetrics._canvas;\n    const context = canvas.getContext(\"2d\", contextSettings);\n    let width = 0;\n    let line = \"\";\n    let lines = \"\";\n    const cache = /* @__PURE__ */Object.create(null);\n    const {\n      letterSpacing,\n      whiteSpace\n    } = style;\n    const collapseSpaces = _TextMetrics.collapseSpaces(whiteSpace);\n    const collapseNewlines = _TextMetrics.collapseNewlines(whiteSpace);\n    let canPrependSpaces = !collapseSpaces;\n    const wordWrapWidth = style.wordWrapWidth + letterSpacing;\n    const tokens = _TextMetrics.tokenize(text);\n    for (let i = 0; i < tokens.length; i++) {\n      let token = tokens[i];\n      if (_TextMetrics.isNewline(token)) {\n        if (!collapseNewlines) {\n          lines += _TextMetrics.addLine(line);\n          canPrependSpaces = !collapseSpaces;\n          line = \"\";\n          width = 0;\n          continue;\n        }\n        token = \" \";\n      }\n      if (collapseSpaces) {\n        const currIsBreakingSpace = _TextMetrics.isBreakingSpace(token);\n        const lastIsBreakingSpace = _TextMetrics.isBreakingSpace(line[line.length - 1]);\n        if (currIsBreakingSpace && lastIsBreakingSpace) {\n          continue;\n        }\n      }\n      const tokenWidth = _TextMetrics.getFromCache(token, letterSpacing, cache, context);\n      if (tokenWidth > wordWrapWidth) {\n        if (line !== \"\") {\n          lines += _TextMetrics.addLine(line);\n          line = \"\";\n          width = 0;\n        }\n        if (_TextMetrics.canBreakWords(token, style.breakWords)) {\n          const characters = _TextMetrics.wordWrapSplit(token);\n          for (let j = 0; j < characters.length; j++) {\n            let char = characters[j];\n            let lastChar = char;\n            let k = 1;\n            while (characters[j + k]) {\n              const nextChar = characters[j + k];\n              if (!_TextMetrics.canBreakChars(lastChar, nextChar, token, j, style.breakWords)) {\n                char += nextChar;\n              } else {\n                break;\n              }\n              lastChar = nextChar;\n              k++;\n            }\n            j += k - 1;\n            const characterWidth = _TextMetrics.getFromCache(char, letterSpacing, cache, context);\n            if (characterWidth + width > wordWrapWidth) {\n              lines += _TextMetrics.addLine(line);\n              canPrependSpaces = false;\n              line = \"\";\n              width = 0;\n            }\n            line += char;\n            width += characterWidth;\n          }\n        } else {\n          if (line.length > 0) {\n            lines += _TextMetrics.addLine(line);\n            line = \"\";\n            width = 0;\n          }\n          const isLastToken = i === tokens.length - 1;\n          lines += _TextMetrics.addLine(token, !isLastToken);\n          canPrependSpaces = false;\n          line = \"\";\n          width = 0;\n        }\n      } else {\n        if (tokenWidth + width > wordWrapWidth) {\n          canPrependSpaces = false;\n          lines += _TextMetrics.addLine(line);\n          line = \"\";\n          width = 0;\n        }\n        if (line.length > 0 || !_TextMetrics.isBreakingSpace(token) || canPrependSpaces) {\n          line += token;\n          width += tokenWidth;\n        }\n      }\n    }\n    lines += _TextMetrics.addLine(line, false);\n    return lines;\n  }\n  static addLine(line) {\n    let newLine = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    line = _TextMetrics.trimRight(line);\n    line = newLine ? \"\".concat(line, \"\\n\") : line;\n    return line;\n  }\n  static getFromCache(key, letterSpacing, cache, context) {\n    let width = cache[key];\n    if (typeof width !== \"number\") {\n      width = _TextMetrics._measureText(key, letterSpacing, context) + letterSpacing;\n      cache[key] = width;\n    }\n    return width;\n  }\n  static collapseSpaces(whiteSpace) {\n    return whiteSpace === \"normal\" || whiteSpace === \"pre-line\";\n  }\n  static collapseNewlines(whiteSpace) {\n    return whiteSpace === \"normal\";\n  }\n  static trimRight(text) {\n    if (typeof text !== \"string\") {\n      return \"\";\n    }\n    for (let i = text.length - 1; i >= 0; i--) {\n      const char = text[i];\n      if (!_TextMetrics.isBreakingSpace(char)) {\n        break;\n      }\n      text = text.slice(0, -1);\n    }\n    return text;\n  }\n  static isNewline(char) {\n    if (typeof char !== \"string\") {\n      return false;\n    }\n    return _TextMetrics._newlines.includes(char.charCodeAt(0));\n  }\n  static isBreakingSpace(char, _nextChar) {\n    if (typeof char !== \"string\") {\n      return false;\n    }\n    return _TextMetrics._breakingSpaces.includes(char.charCodeAt(0));\n  }\n  static tokenize(text) {\n    const tokens = [];\n    let token = \"\";\n    if (typeof text !== \"string\") {\n      return tokens;\n    }\n    for (let i = 0; i < text.length; i++) {\n      const char = text[i];\n      const nextChar = text[i + 1];\n      if (_TextMetrics.isBreakingSpace(char, nextChar) || _TextMetrics.isNewline(char)) {\n        if (token !== \"\") {\n          tokens.push(token);\n          token = \"\";\n        }\n        tokens.push(char);\n        continue;\n      }\n      token += char;\n    }\n    if (token !== \"\") {\n      tokens.push(token);\n    }\n    return tokens;\n  }\n  static canBreakWords(_token, breakWords) {\n    return breakWords;\n  }\n  static canBreakChars(_char, _nextChar, _token, _index, _breakWords) {\n    return true;\n  }\n  static wordWrapSplit(token) {\n    return _TextMetrics.graphemeSegmenter(token);\n  }\n  static measureFont(font) {\n    if (_TextMetrics._fonts[font]) {\n      return _TextMetrics._fonts[font];\n    }\n    const properties = {\n      ascent: 0,\n      descent: 0,\n      fontSize: 0\n    };\n    const canvas = _TextMetrics._canvas;\n    const context = _TextMetrics._context;\n    context.font = font;\n    const metricsString = _TextMetrics.METRICS_STRING + _TextMetrics.BASELINE_SYMBOL;\n    const width = Math.ceil(context.measureText(metricsString).width);\n    let baseline = Math.ceil(context.measureText(_TextMetrics.BASELINE_SYMBOL).width);\n    const height = Math.ceil(_TextMetrics.HEIGHT_MULTIPLIER * baseline);\n    baseline = baseline * _TextMetrics.BASELINE_MULTIPLIER | 0;\n    if (width === 0 || height === 0) {\n      _TextMetrics._fonts[font] = properties;\n      return properties;\n    }\n    canvas.width = width;\n    canvas.height = height;\n    context.fillStyle = \"#f00\";\n    context.fillRect(0, 0, width, height);\n    context.font = font;\n    context.textBaseline = \"alphabetic\";\n    context.fillStyle = \"#000\";\n    context.fillText(metricsString, 0, baseline);\n    const imagedata = context.getImageData(0, 0, width, height).data;\n    const pixels = imagedata.length;\n    const line = width * 4;\n    let i = 0;\n    let idx = 0;\n    let stop = false;\n    for (i = 0; i < baseline; ++i) {\n      for (let j = 0; j < line; j += 4) {\n        if (imagedata[idx + j] !== 255) {\n          stop = true;\n          break;\n        }\n      }\n      if (!stop) {\n        idx += line;\n      } else {\n        break;\n      }\n    }\n    properties.ascent = baseline - i;\n    idx = pixels - line;\n    stop = false;\n    for (i = height; i > baseline; --i) {\n      for (let j = 0; j < line; j += 4) {\n        if (imagedata[idx + j] !== 255) {\n          stop = true;\n          break;\n        }\n      }\n      if (!stop) {\n        idx -= line;\n      } else {\n        break;\n      }\n    }\n    properties.descent = i - baseline;\n    properties.fontSize = properties.ascent + properties.descent;\n    _TextMetrics._fonts[font] = properties;\n    return properties;\n  }\n  static clearMetrics() {\n    let font = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    if (font) {\n      delete _TextMetrics._fonts[font];\n    } else {\n      _TextMetrics._fonts = {};\n    }\n  }\n  static get _canvas() {\n    if (!_TextMetrics.__canvas) {\n      let canvas;\n      try {\n        const c = new OffscreenCanvas(0, 0);\n        const context = c.getContext(\"2d\", contextSettings);\n        if (context !== null && context !== void 0 && context.measureText) {\n          _TextMetrics.__canvas = c;\n          return c;\n        }\n        canvas = settings.ADAPTER.createCanvas();\n      } catch (ex) {\n        canvas = settings.ADAPTER.createCanvas();\n      }\n      canvas.width = canvas.height = 10;\n      _TextMetrics.__canvas = canvas;\n    }\n    return _TextMetrics.__canvas;\n  }\n  static get _context() {\n    if (!_TextMetrics.__context) {\n      _TextMetrics.__context = _TextMetrics._canvas.getContext(\"2d\", contextSettings);\n    }\n    return _TextMetrics.__context;\n  }\n};\nlet TextMetrics = _TextMetrics;\nTextMetrics.METRICS_STRING = \"|\\xC9q\\xC5\";\nTextMetrics.BASELINE_SYMBOL = \"M\";\nTextMetrics.BASELINE_MULTIPLIER = 1.4;\nTextMetrics.HEIGHT_MULTIPLIER = 2;\nTextMetrics.graphemeSegmenter = (_Intl => {\n  if (typeof ((_Intl = Intl) === null || _Intl === void 0 ? void 0 : _Intl.Segmenter) === \"function\") {\n    const segmenter = new Intl.Segmenter();\n    return s => [...segmenter.segment(s)].map(x => x.segment);\n  }\n  return s => [...s];\n})();\nTextMetrics.experimentalLetterSpacing = false;\nTextMetrics._fonts = {};\nTextMetrics._newlines = [10, 13];\nTextMetrics._breakingSpaces = [9, 32, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8200, 8201, 8202, 8287, 12288];\nexport { TextMetrics };","map":{"version":3,"mappings":"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","names":["contextSettings","willReadFrequently","_TextMetrics","experimentalLetterSpacingSupported","result","proto","ADAPTER","constructor","text","style","height","lines","lineHeight","fontProperties","width","lineWidths","maxLineWidth","measureText","wordWrap","canvas","_canvas","toFontString","font","fontSize","ascent","context","getContext","outputText","Array","length","i","lineWidth","letterSpacing","max","dropShadow","strokeThickness","leading","_measureText","useExperimentalLetterSpacing","experimentalLetterSpacing","textLetterSpacing","line","Object","whiteSpace","canPrependSpaces","collapseSpaces","wordWrapWidth","token","tokens","isNewline","collapseNewlines","addLine","lastIsBreakingSpace","currIsBreakingSpace","tokenWidth","cache","breakWords","j","char","characters","lastChar","k","canBreakChars","nextChar","characterWidth","isLastToken","isBreakingSpace","newLine","trimRight","getFromCache","key","slice","_newlines","_nextChar","_breakingSpaces","tokenize","push","canBreakWords","_index","_breakWords","wordWrapSplit","graphemeSegmenter","measureFont","_fonts","properties","descent","Math","ceil","HEIGHT_MULTIPLIER","baseline","BASELINE_MULTIPLIER","fillStyle","fillRect","textBaseline","metricsString","imagedata","pixels","idx","stop","clearMetrics","__canvas","c","OffscreenCanvas","createCanvas","ex","_context","__context","TextMetrics","METRICS_STRING","BASELINE_SYMBOL","_Intl","Intl","Segmenter","s","segmenter","x","segment"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/text/src/TextMetrics.ts"],"sourcesContent":["import { settings } from '@pixi/core';\n\nimport type { ICanvas, ICanvasRenderingContext2D, ICanvasRenderingContext2DSettings } from '@pixi/core';\nimport type { TextStyle, TextStyleWhiteSpace } from './TextStyle';\n\n// The type for Intl.Segmenter is only available since TypeScript 4.7.2, so let's make a polyfill for it.\ninterface ISegmentData\n{\n    segment: string;\n}\ninterface ISegments\n{\n    [Symbol.iterator](): IterableIterator<ISegmentData>;\n}\ninterface ISegmenter\n{\n    segment(input: string): ISegments;\n}\ninterface IIntl\n{\n    Segmenter?: {\n        prototype: ISegmenter;\n        new(): ISegmenter;\n    };\n}\n\n/**\n * Internal return object for {@link PIXI.TextMetrics.measureFont `TextMetrics.measureFont`}.\n * @typedef {object} FontMetrics\n * @property {number} ascent - The ascent distance\n * @property {number} descent - The descent distance\n * @property {number} fontSize - Font size from ascent to descent\n * @memberof PIXI.TextMetrics\n * @private\n */\n\n/**\n * A number, or a string containing a number.\n * @memberof PIXI\n * @typedef {object} IFontMetrics\n * @property {number} ascent - Font ascent\n * @property {number} descent - Font descent\n * @property {number} fontSize - Font size\n */\ninterface IFontMetrics\n{\n    ascent: number;\n    descent: number;\n    fontSize: number;\n}\n\ntype CharacterWidthCache = Record<string, number>;\n\n// Default settings used for all getContext calls\nconst contextSettings: ICanvasRenderingContext2DSettings = {\n    // TextMetrics requires getImageData readback for measuring fonts.\n    willReadFrequently: true,\n};\n\n/**\n * The TextMetrics object represents the measurement of a block of text with a specified style.\n * @example\n * import { TextMetrics, TextStyle } from 'pixi.js';\n *\n * const style = new TextStyle({\n *     fontFamily: 'Arial',\n *     fontSize: 24,\n *     fill: 0xff1010,\n *     align: 'center',\n * });\n * const textMetrics = TextMetrics.measureText('Your text', style);\n * @memberof PIXI\n */\nexport class TextMetrics\n{\n    /** The text that was measured. */\n    public text: string;\n\n    /** The style that was measured. */\n    public style: TextStyle;\n\n    /** The measured width of the text. */\n    public width: number;\n\n    /** The measured height of the text. */\n    public height: number;\n\n    /** An array of lines of the text broken by new lines and wrapping is specified in style. */\n    public lines: string[];\n\n    /** An array of the line widths for each line matched to `lines`. */\n    public lineWidths: number[];\n\n    /** The measured line height for this style. */\n    public lineHeight: number;\n\n    /** The maximum line width for all measured lines. */\n    public maxLineWidth: number;\n\n    /** The font properties object from TextMetrics.measureFont. */\n    public fontProperties: IFontMetrics;\n\n    /**\n     * String used for calculate font metrics.\n     * These characters are all tall to help calculate the height required for text.\n     */\n    public static METRICS_STRING = '|ÉqÅ';\n\n    /** Baseline symbol for calculate font metrics. */\n    public static BASELINE_SYMBOL = 'M';\n\n    /** Baseline multiplier for calculate font metrics. */\n    public static BASELINE_MULTIPLIER = 1.4;\n\n    /** Height multiplier for setting height of canvas to calculate font metrics. */\n    public static HEIGHT_MULTIPLIER = 2.0;\n\n    /**\n     * A Unicode \"character\", or \"grapheme cluster\", can be composed of multiple Unicode code points,\n     * such as letters with diacritical marks (e.g. `'\\u0065\\u0301'`, letter e with acute)\n     * or emojis with modifiers (e.g. `'\\uD83E\\uDDD1\\u200D\\uD83D\\uDCBB'`, technologist).\n     * The new `Intl.Segmenter` API in ES2022 can split the string into grapheme clusters correctly. If it is not available,\n     * PixiJS will fallback to use the iterator of String, which can only spilt the string into code points.\n     * If you want to get full functionality in environments that don't support `Intl.Segmenter` (such as Firefox),\n     * you can use other libraries such as [grapheme-splitter]{@link https://www.npmjs.com/package/grapheme-splitter}\n     * or [graphemer]{@link https://www.npmjs.com/package/graphemer} to create a polyfill. Since these libraries can be\n     * relatively large in size to handle various Unicode grapheme clusters properly, PixiJS won't use them directly.\n     */\n    public static graphemeSegmenter: (s: string) => string[] = (() =>\n    {\n        if (typeof (Intl as IIntl)?.Segmenter === 'function')\n        {\n            const segmenter = new (Intl as IIntl).Segmenter();\n\n            return (s: string) => [...segmenter.segment(s)].map((x) => x.segment);\n        }\n\n        return (s: string) => [...s];\n    })();\n\n    public static _experimentalLetterSpacingSupported?: boolean;\n\n    /**\n     * Checking that we can use modern canvas 2D API.\n     *\n     * Note: This is an unstable API, Chrome < 94 use `textLetterSpacing`, later versions use `letterSpacing`.\n     * @see PIXI.TextMetrics.experimentalLetterSpacing\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/letterSpacing\n     * @see https://developer.chrome.com/origintrials/#/view_trial/3585991203293757441\n     */\n    public static get experimentalLetterSpacingSupported(): boolean\n    {\n        let result = TextMetrics._experimentalLetterSpacingSupported;\n\n        if (result !== undefined)\n        {\n            const proto = settings.ADAPTER.getCanvasRenderingContext2D().prototype;\n\n            result\n                = TextMetrics._experimentalLetterSpacingSupported\n                = 'letterSpacing' in proto || 'textLetterSpacing' in proto;\n        }\n\n        return result;\n    }\n\n    /**\n     * New rendering behavior for letter-spacing which uses Chrome's new native API. This will\n     * lead to more accurate letter-spacing results because it does not try to manually draw\n     * each character. However, this Chrome API is experimental and may not serve all cases yet.\n     * @see PIXI.TextMetrics.experimentalLetterSpacingSupported\n     */\n    public static experimentalLetterSpacing = false;\n\n    /** Cache of {@see PIXI.TextMetrics.FontMetrics} objects. */\n    private static _fonts: Record<string, IFontMetrics> = {};\n\n    /** Cache of new line chars. */\n    private static _newlines: number[] = [\n        0x000A, // line feed\n        0x000D, // carriage return\n    ];\n\n    /** Cache of breaking spaces. */\n    private static _breakingSpaces: number[] = [\n        0x0009, // character tabulation\n        0x0020, // space\n        0x2000, // en quad\n        0x2001, // em quad\n        0x2002, // en space\n        0x2003, // em space\n        0x2004, // three-per-em space\n        0x2005, // four-per-em space\n        0x2006, // six-per-em space\n        0x2008, // punctuation space\n        0x2009, // thin space\n        0x200A, // hair space\n        0x205F, // medium mathematical space\n        0x3000, // ideographic space\n    ];\n\n    private static __canvas: ICanvas;\n    private static __context: ICanvasRenderingContext2D;\n\n    /**\n     * @param text - the text that was measured\n     * @param style - the style that was measured\n     * @param width - the measured width of the text\n     * @param height - the measured height of the text\n     * @param lines - an array of the lines of text broken by new lines and wrapping if specified in style\n     * @param lineWidths - an array of the line widths for each line matched to `lines`\n     * @param lineHeight - the measured line height for this style\n     * @param maxLineWidth - the maximum line width for all measured lines\n     * @param {PIXI.IFontMetrics} fontProperties - the font properties object from TextMetrics.measureFont\n     */\n    constructor(text: string, style: TextStyle, width: number, height: number, lines: string[], lineWidths: number[],\n        lineHeight: number, maxLineWidth: number, fontProperties: IFontMetrics)\n    {\n        this.text = text;\n        this.style = style;\n        this.width = width;\n        this.height = height;\n        this.lines = lines;\n        this.lineWidths = lineWidths;\n        this.lineHeight = lineHeight;\n        this.maxLineWidth = maxLineWidth;\n        this.fontProperties = fontProperties;\n    }\n\n    /**\n     * Measures the supplied string of text and returns a Rectangle.\n     * @param text - The text to measure.\n     * @param style - The text style to use for measuring\n     * @param wordWrap - Override for if word-wrap should be applied to the text.\n     * @param canvas - optional specification of the canvas to use for measuring.\n     * @returns Measured width and height of the text.\n     */\n    public static measureText(\n        text: string,\n        style: TextStyle,\n        wordWrap?: boolean,\n        canvas: ICanvas = TextMetrics._canvas\n    ): TextMetrics\n    {\n        wordWrap = (wordWrap === undefined || wordWrap === null) ? style.wordWrap : wordWrap;\n        const font = style.toFontString();\n        const fontProperties = TextMetrics.measureFont(font);\n\n        // fallback in case UA disallow canvas data extraction\n        // (toDataURI, getImageData functions)\n        if (fontProperties.fontSize === 0)\n        {\n            fontProperties.fontSize = style.fontSize as number;\n            fontProperties.ascent = style.fontSize as number;\n        }\n\n        const context = canvas.getContext('2d', contextSettings);\n\n        context.font = font;\n\n        const outputText = wordWrap ? TextMetrics.wordWrap(text, style, canvas) : text;\n        const lines = outputText.split(/(?:\\r\\n|\\r|\\n)/);\n        const lineWidths = new Array<number>(lines.length);\n        let maxLineWidth = 0;\n\n        for (let i = 0; i < lines.length; i++)\n        {\n            const lineWidth = TextMetrics._measureText(lines[i], style.letterSpacing, context);\n\n            lineWidths[i] = lineWidth;\n            maxLineWidth = Math.max(maxLineWidth, lineWidth);\n        }\n        let width = maxLineWidth + style.strokeThickness;\n\n        if (style.dropShadow)\n        {\n            width += style.dropShadowDistance;\n        }\n\n        const lineHeight = style.lineHeight || fontProperties.fontSize + style.strokeThickness;\n        let height = Math.max(lineHeight, fontProperties.fontSize + (style.strokeThickness * 2))\n            + ((lines.length - 1) * (lineHeight + style.leading));\n\n        if (style.dropShadow)\n        {\n            height += style.dropShadowDistance;\n        }\n\n        return new TextMetrics(\n            text,\n            style,\n            width,\n            height,\n            lines,\n            lineWidths,\n            lineHeight + style.leading,\n            maxLineWidth,\n            fontProperties\n        );\n    }\n\n    private static _measureText(\n        text: string,\n        letterSpacing: number,\n        context: ICanvasRenderingContext2D\n    )\n    {\n        let useExperimentalLetterSpacing = false;\n\n        if (TextMetrics.experimentalLetterSpacingSupported)\n        {\n            if (TextMetrics.experimentalLetterSpacing)\n            {\n                context.letterSpacing = `${letterSpacing}px`;\n                context.textLetterSpacing = `${letterSpacing}px`;\n                useExperimentalLetterSpacing = true;\n            }\n            else\n            {\n                context.letterSpacing = '0px';\n                context.textLetterSpacing = '0px';\n            }\n        }\n\n        let width = context.measureText(text).width;\n\n        if (width > 0)\n        {\n            if (useExperimentalLetterSpacing)\n            {\n                width -= letterSpacing;\n            }\n            else\n            {\n                width += (TextMetrics.graphemeSegmenter(text).length - 1) * letterSpacing;\n            }\n        }\n\n        return width;\n    }\n\n    /**\n     * Applies newlines to a string to have it optimally fit into the horizontal\n     * bounds set by the Text object's wordWrapWidth property.\n     * @param text - String to apply word wrapping to\n     * @param style - the style to use when wrapping\n     * @param canvas - optional specification of the canvas to use for measuring.\n     * @returns New string with new lines applied where required\n     */\n    private static wordWrap(\n        text: string,\n        style: TextStyle,\n        canvas: ICanvas = TextMetrics._canvas\n    ): string\n    {\n        const context = canvas.getContext('2d', contextSettings);\n\n        let width = 0;\n        let line = '';\n        let lines = '';\n\n        const cache: CharacterWidthCache = Object.create(null);\n        const { letterSpacing, whiteSpace } = style;\n\n        // How to handle whitespaces\n        const collapseSpaces = TextMetrics.collapseSpaces(whiteSpace);\n        const collapseNewlines = TextMetrics.collapseNewlines(whiteSpace);\n\n        // whether or not spaces may be added to the beginning of lines\n        let canPrependSpaces = !collapseSpaces;\n\n        // There is letterSpacing after every char except the last one\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!\n        // so for convenience the above needs to be compared to width + 1 extra letterSpace\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!_\n        // ________________________________________________\n        // And then the final space is simply no appended to each line\n        const wordWrapWidth = style.wordWrapWidth + letterSpacing;\n\n        // break text into words, spaces and newline chars\n        const tokens = TextMetrics.tokenize(text);\n\n        for (let i = 0; i < tokens.length; i++)\n        {\n            // get the word, space or newlineChar\n            let token = tokens[i];\n\n            // if word is a new line\n            if (TextMetrics.isNewline(token))\n            {\n                // keep the new line\n                if (!collapseNewlines)\n                {\n                    lines += TextMetrics.addLine(line);\n                    canPrependSpaces = !collapseSpaces;\n                    line = '';\n                    width = 0;\n                    continue;\n                }\n\n                // if we should collapse new lines\n                // we simply convert it into a space\n                token = ' ';\n            }\n\n            // if we should collapse repeated whitespaces\n            if (collapseSpaces)\n            {\n                // check both this and the last tokens for spaces\n                const currIsBreakingSpace = TextMetrics.isBreakingSpace(token);\n                const lastIsBreakingSpace = TextMetrics.isBreakingSpace(line[line.length - 1]);\n\n                if (currIsBreakingSpace && lastIsBreakingSpace)\n                {\n                    continue;\n                }\n            }\n\n            // get word width from cache if possible\n            const tokenWidth = TextMetrics.getFromCache(token, letterSpacing, cache, context);\n\n            // word is longer than desired bounds\n            if (tokenWidth > wordWrapWidth)\n            {\n                // if we are not already at the beginning of a line\n                if (line !== '')\n                {\n                    // start newlines for overflow words\n                    lines += TextMetrics.addLine(line);\n                    line = '';\n                    width = 0;\n                }\n\n                // break large word over multiple lines\n                if (TextMetrics.canBreakWords(token, style.breakWords))\n                {\n                    // break word into characters\n                    const characters = TextMetrics.wordWrapSplit(token);\n\n                    // loop the characters\n                    for (let j = 0; j < characters.length; j++)\n                    {\n                        let char = characters[j];\n                        let lastChar = char;\n\n                        let k = 1;\n\n                        // we are not at the end of the token\n                        while (characters[j + k])\n                        {\n                            const nextChar = characters[j + k];\n\n                            // should not split chars\n                            if (!TextMetrics.canBreakChars(lastChar, nextChar, token, j, style.breakWords))\n                            {\n                                // combine chars & move forward one\n                                char += nextChar;\n                            }\n                            else\n                            {\n                                break;\n                            }\n\n                            lastChar = nextChar;\n                            k++;\n                        }\n\n                        j += k - 1;\n\n                        const characterWidth = TextMetrics.getFromCache(char, letterSpacing, cache, context);\n\n                        if (characterWidth + width > wordWrapWidth)\n                        {\n                            lines += TextMetrics.addLine(line);\n                            canPrependSpaces = false;\n                            line = '';\n                            width = 0;\n                        }\n\n                        line += char;\n                        width += characterWidth;\n                    }\n                }\n\n                // run word out of the bounds\n                else\n                {\n                    // if there are words in this line already\n                    // finish that line and start a new one\n                    if (line.length > 0)\n                    {\n                        lines += TextMetrics.addLine(line);\n                        line = '';\n                        width = 0;\n                    }\n\n                    const isLastToken = i === tokens.length - 1;\n\n                    // give it its own line if it's not the end\n                    lines += TextMetrics.addLine(token, !isLastToken);\n                    canPrependSpaces = false;\n                    line = '';\n                    width = 0;\n                }\n            }\n\n            // word could fit\n            else\n            {\n                // word won't fit because of existing words\n                // start a new line\n                if (tokenWidth + width > wordWrapWidth)\n                {\n                    // if its a space we don't want it\n                    canPrependSpaces = false;\n\n                    // add a new line\n                    lines += TextMetrics.addLine(line);\n\n                    // start a new line\n                    line = '';\n                    width = 0;\n                }\n\n                // don't add spaces to the beginning of lines\n                if (line.length > 0 || !TextMetrics.isBreakingSpace(token) || canPrependSpaces)\n                {\n                    // add the word to the current line\n                    line += token;\n\n                    // update width counter\n                    width += tokenWidth;\n                }\n            }\n        }\n\n        lines += TextMetrics.addLine(line, false);\n\n        return lines;\n    }\n\n    /**\n     * Convienience function for logging each line added during the wordWrap method.\n     * @param line    - The line of text to add\n     * @param newLine - Add new line character to end\n     * @returns A formatted line\n     */\n    private static addLine(line: string, newLine = true): string\n    {\n        line = TextMetrics.trimRight(line);\n\n        line = (newLine) ? `${line}\\n` : line;\n\n        return line;\n    }\n\n    /**\n     * Gets & sets the widths of calculated characters in a cache object\n     * @param key            - The key\n     * @param letterSpacing  - The letter spacing\n     * @param cache          - The cache\n     * @param context        - The canvas context\n     * @returns The from cache.\n     */\n    private static getFromCache(key: string, letterSpacing: number, cache: CharacterWidthCache,\n        context: ICanvasRenderingContext2D): number\n    {\n        let width = cache[key];\n\n        if (typeof width !== 'number')\n        {\n            width = TextMetrics._measureText(key, letterSpacing, context) + letterSpacing;\n            cache[key] = width;\n        }\n\n        return width;\n    }\n\n    /**\n     * Determines whether we should collapse breaking spaces.\n     * @param whiteSpace - The TextStyle property whiteSpace\n     * @returns Should collapse\n     */\n    private static collapseSpaces(whiteSpace: TextStyleWhiteSpace): boolean\n    {\n        return (whiteSpace === 'normal' || whiteSpace === 'pre-line');\n    }\n\n    /**\n     * Determines whether we should collapse newLine chars.\n     * @param whiteSpace - The white space\n     * @returns should collapse\n     */\n    private static collapseNewlines(whiteSpace: TextStyleWhiteSpace): boolean\n    {\n        return (whiteSpace === 'normal');\n    }\n\n    /**\n     * Trims breaking whitespaces from string.\n     * @param text - The text\n     * @returns Trimmed string\n     */\n    private static trimRight(text: string): string\n    {\n        if (typeof text !== 'string')\n        {\n            return '';\n        }\n\n        for (let i = text.length - 1; i >= 0; i--)\n        {\n            const char = text[i];\n\n            if (!TextMetrics.isBreakingSpace(char))\n            {\n                break;\n            }\n\n            text = text.slice(0, -1);\n        }\n\n        return text;\n    }\n\n    /**\n     * Determines if char is a newline.\n     * @param char - The character\n     * @returns True if newline, False otherwise.\n     */\n    private static isNewline(char: string): boolean\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return TextMetrics._newlines.includes(char.charCodeAt(0));\n    }\n\n    /**\n     * Determines if char is a breaking whitespace.\n     *\n     * It allows one to determine whether char should be a breaking whitespace\n     * For example certain characters in CJK langs or numbers.\n     * It must return a boolean.\n     * @param char - The character\n     * @param [_nextChar] - The next character\n     * @returns True if whitespace, False otherwise.\n     */\n    static isBreakingSpace(char: string, _nextChar?: string): boolean\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return TextMetrics._breakingSpaces.includes(char.charCodeAt(0));\n    }\n\n    /**\n     * Splits a string into words, breaking-spaces and newLine characters\n     * @param text - The text\n     * @returns A tokenized array\n     */\n    private static tokenize(text: string): string[]\n    {\n        const tokens: string[] = [];\n        let token = '';\n\n        if (typeof text !== 'string')\n        {\n            return tokens;\n        }\n\n        for (let i = 0; i < text.length; i++)\n        {\n            const char = text[i];\n            const nextChar = text[i + 1];\n\n            if (TextMetrics.isBreakingSpace(char, nextChar) || TextMetrics.isNewline(char))\n            {\n                if (token !== '')\n                {\n                    tokens.push(token);\n                    token = '';\n                }\n\n                tokens.push(char);\n\n                continue;\n            }\n\n            token += char;\n        }\n\n        if (token !== '')\n        {\n            tokens.push(token);\n        }\n\n        return tokens;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It allows one to customise which words should break\n     * Examples are if the token is CJK or numbers.\n     * It must return a boolean.\n     * @param _token - The token\n     * @param breakWords - The style attr break words\n     * @returns Whether to break word or not\n     */\n    static canBreakWords(_token: string, breakWords: boolean): boolean\n    {\n        return breakWords;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It allows one to determine whether a pair of characters\n     * should be broken by newlines\n     * For example certain characters in CJK langs or numbers.\n     * It must return a boolean.\n     * @param _char - The character\n     * @param _nextChar - The next character\n     * @param _token - The token/word the characters are from\n     * @param _index - The index in the token of the char\n     * @param _breakWords - The style attr break words\n     * @returns whether to break word or not\n     */\n    static canBreakChars(_char: string, _nextChar: string, _token: string, _index: number,\n        _breakWords: boolean): boolean\n    {\n        return true;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It is called when a token (usually a word) has to be split into separate pieces\n     * in order to determine the point to break a word.\n     * It must return an array of characters.\n     * @param token - The token to split\n     * @returns The characters of the token\n     * @see TextMetrics.graphemeSegmenter\n     */\n    static wordWrapSplit(token: string): string[]\n    {\n        return TextMetrics.graphemeSegmenter(token);\n    }\n\n    /**\n     * Calculates the ascent, descent and fontSize of a given font-style\n     * @param font - String representing the style of the font\n     * @returns Font properties object\n     */\n    public static measureFont(font: string): IFontMetrics\n    {\n        // as this method is used for preparing assets, don't recalculate things if we don't need to\n        if (TextMetrics._fonts[font])\n        {\n            return TextMetrics._fonts[font];\n        }\n\n        const properties: IFontMetrics = {\n            ascent: 0,\n            descent: 0,\n            fontSize: 0,\n        };\n\n        const canvas = TextMetrics._canvas;\n        const context = TextMetrics._context;\n\n        context.font = font;\n\n        const metricsString = TextMetrics.METRICS_STRING + TextMetrics.BASELINE_SYMBOL;\n        const width = Math.ceil(context.measureText(metricsString).width);\n        let baseline = Math.ceil(context.measureText(TextMetrics.BASELINE_SYMBOL).width);\n        const height = Math.ceil(TextMetrics.HEIGHT_MULTIPLIER * baseline);\n\n        baseline = baseline * TextMetrics.BASELINE_MULTIPLIER | 0;\n\n        if (width === 0 || height === 0)\n        {\n            TextMetrics._fonts[font] = properties;\n\n            return properties;\n        }\n\n        canvas.width = width;\n        canvas.height = height;\n\n        context.fillStyle = '#f00';\n        context.fillRect(0, 0, width, height);\n\n        context.font = font;\n\n        context.textBaseline = 'alphabetic';\n        context.fillStyle = '#000';\n        context.fillText(metricsString, 0, baseline);\n\n        const imagedata = context.getImageData(0, 0, width, height).data;\n        const pixels = imagedata.length;\n        const line = width * 4;\n\n        let i = 0;\n        let idx = 0;\n        let stop = false;\n\n        // ascent. scan from top to bottom until we find a non red pixel\n        for (i = 0; i < baseline; ++i)\n        {\n            for (let j = 0; j < line; j += 4)\n            {\n                if (imagedata[idx + j] !== 255)\n                {\n                    stop = true;\n                    break;\n                }\n            }\n            if (!stop)\n            {\n                idx += line;\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        properties.ascent = baseline - i;\n\n        idx = pixels - line;\n        stop = false;\n\n        // descent. scan from bottom to top until we find a non red pixel\n        for (i = height; i > baseline; --i)\n        {\n            for (let j = 0; j < line; j += 4)\n            {\n                if (imagedata[idx + j] !== 255)\n                {\n                    stop = true;\n                    break;\n                }\n            }\n\n            if (!stop)\n            {\n                idx -= line;\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        properties.descent = i - baseline;\n        properties.fontSize = properties.ascent + properties.descent;\n\n        TextMetrics._fonts[font] = properties;\n\n        return properties;\n    }\n\n    /**\n     * Clear font metrics in metrics cache.\n     * @param {string} [font] - font name. If font name not set then clear cache for all fonts.\n     */\n    public static clearMetrics(font = ''): void\n    {\n        if (font)\n        {\n            delete TextMetrics._fonts[font];\n        }\n        else\n        {\n            TextMetrics._fonts = {};\n        }\n    }\n\n    /**\n     * Cached canvas element for measuring text\n     * TODO: this should be private, but isn't because of backward compat, will fix later.\n     * @ignore\n     */\n    public static get _canvas(): ICanvas\n    {\n        if (!TextMetrics.__canvas)\n        {\n            let canvas: ICanvas;\n\n            try\n            {\n                // OffscreenCanvas2D measureText can be up to 40% faster.\n                const c = new OffscreenCanvas(0, 0);\n                const context = c.getContext('2d', contextSettings);\n\n                if (context?.measureText)\n                {\n                    TextMetrics.__canvas = c;\n\n                    return c;\n                }\n\n                canvas = settings.ADAPTER.createCanvas();\n            }\n            catch (ex)\n            {\n                canvas = settings.ADAPTER.createCanvas();\n            }\n            canvas.width = canvas.height = 10;\n            TextMetrics.__canvas = canvas;\n        }\n\n        return TextMetrics.__canvas;\n    }\n\n    /**\n     * TODO: this should be private, but isn't because of backward compat, will fix later.\n     * @ignore\n     */\n    public static get _context(): ICanvasRenderingContext2D\n    {\n        if (!TextMetrics.__context)\n        {\n            TextMetrics.__context = TextMetrics._canvas.getContext('2d', contextSettings);\n        }\n\n        return TextMetrics.__context;\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}