{"ast":null,"code":"import { Runner } from '@pixi/runner';\nimport { EventEmitter } from '@pixi/utils';\nclass SystemManager extends EventEmitter {\n  constructor() {\n    super(...arguments);\n    this.runners = {};\n    this._systemsHash = {};\n  }\n  setup(config) {\n    var _config$priority;\n    this.addRunners(...config.runners);\n    const priority = ((_config$priority = config.priority) !== null && _config$priority !== void 0 ? _config$priority : []).filter(key => config.systems[key]);\n    const orderByPriority = [...priority, ...Object.keys(config.systems).filter(key => !priority.includes(key))];\n    for (const i of orderByPriority) {\n      this.addSystem(config.systems[i], i);\n    }\n  }\n  addRunners() {\n    for (var _len = arguments.length, runnerIds = new Array(_len), _key = 0; _key < _len; _key++) {\n      runnerIds[_key] = arguments[_key];\n    }\n    runnerIds.forEach(runnerId => {\n      this.runners[runnerId] = new Runner(runnerId);\n    });\n  }\n  addSystem(ClassRef, name) {\n    const system = new ClassRef(this);\n    if (this[name]) {\n      throw new Error(\"Whoops! The name \\\"\".concat(name, \"\\\" is already in use\"));\n    }\n    this[name] = system;\n    this._systemsHash[name] = system;\n    for (const i in this.runners) {\n      this.runners[i].add(system);\n    }\n    return this;\n  }\n  emitWithCustomOptions(runner, options) {\n    const systemHashKeys = Object.keys(this._systemsHash);\n    runner.items.forEach(system => {\n      const systemName = systemHashKeys.find(systemId => this._systemsHash[systemId] === system);\n      system[runner.name](options[systemName]);\n    });\n  }\n  destroy() {\n    Object.values(this.runners).forEach(runner => {\n      runner.destroy();\n    });\n    this._systemsHash = {};\n  }\n}\nexport { SystemManager };","map":{"version":3,"mappings":";;AAkBO,MAAMA,sBAAmCC,YAChD;EADOC;IAAA;IAGH,KAASC,UAAmC,EAAC;IAE7C,KAAQC,eAAwC,EAAC;EAAA;EAOjDC,MAAMC,MACN;IAAA;IACS,gBAAW,GAAGA,OAAOH,OAAO;IAG3B,iBAAY,qBAAOG,8EAAY,EAAC,EAAGC,OAAQC,OAAQF,MAAO,SAAQE,GAAI;IAG5E,MAAMC,eAAkB,IACpB,GAAGC,UACH,GAAGC,OAAOC,IAAK,QAAOC,OAAO,EACxBN,MAAO,CAACC,GAAQ,KAACE,QAAS,UAASF,GAAG,CAAC,EAChD;IAEA,WAAWM,KAAKL,eAChB;MACI,KAAKM,SAAU,QAAOF,OAAQ,KAAIC,CAAC;IAAA;EACvC;EAOJE,aACA;IAAA,kCADcC,SACd;MADcA,SACd;IAAA;IACcA,kBAASC,QACnB;MACI,KAAKf,OAAQ,aAAY,IAAIgB,OAAOD,QAAQ;IAAA,CAC/C;EAAA;EAYLH,UAAUK,UAAiCC,IAC3C;IACU,eAAS,IAAID,SAAS,IAAgB;IAE5C,IAAK,KAAaC,IAClB;MACU,UAAIC,KAAM,8BAAqBD,IAAyB;IAAA;IAGjE,KAAaA,IAAQ;IAEtB,KAAKjB,aAAaiB,IAAQ;IAEf,gBAAK,KAAKlB,OACrB;MACS,aAAQW,CAAG,MAAIS,MAAM;IAAA;IAmBvB;EAAA;EAoBXC,sBAAsBC,QAAgBC,OACtC;IACI,MAAMC,cAAiB,UAAOf,IAAK,MAAKR,YAAY;IAE7CqB,aAAMG,OAAQ,CAACL,MACtB;MAGU,mBAAaI,eAAeE,IAAK,CAACC,YAAa,IAAK,cAAaA,cAAcP,MAAM;MAEpFA,cAAOF,IAAM,UAAQU,UAAW;IAAA,CAC1C;EAAA;EAILC,OACAA;IACIrB,OAAOsB,OAAO,IAAK,QAAO,CAAE,SAASR,MACrC;MACIA,OAAOO,OAAQ;IAAA,CAClB;IAED,KAAK5B,eAAe,EAAC;EAAA;AAQ7B","names":["SystemManager","EventEmitter","constructor","runners","_systemsHash","setup","config","filter","key","orderByPriority","priority","Object","keys","systems","i","addSystem","addRunners","runnerIds","runnerId","Runner","ClassRef","name","Error","system","emitWithCustomOptions","runner","options","systemHashKeys","forEach","find","systemId","systemName","destroy","values"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/core/src/system/SystemManager.ts"],"sourcesContent":["import { Runner } from '@pixi/runner';\nimport { EventEmitter } from '@pixi/utils';\n\nimport type { IRenderer } from '../IRenderer';\nimport type { ISystem, ISystemConstructor } from './ISystem';\n\ninterface ISystemConfig<R>\n{\n    runners: string[],\n    systems: Record<string, ISystemConstructor<R>>\n    priority: string[];\n}\n\n/**\n * The SystemManager is a class that provides functions for managing a set of systems\n * This is a base class, that is generic (no render code or knowledge at all)\n * @memberof PIXI\n */\nexport class SystemManager<R=IRenderer> extends EventEmitter\n{\n    /** a collection of runners defined by the user */\n    readonly runners: {[key: string]: Runner} = {};\n\n    private _systemsHash: Record<string, ISystem> = {};\n\n    /**\n     * Set up a system with a collection of SystemClasses and runners.\n     * Systems are attached dynamically to this class when added.\n     * @param config - the config for the system manager\n     */\n    setup(config: ISystemConfig<R>): void\n    {\n        this.addRunners(...config.runners);\n\n        // Remove keys that aren't available\n        const priority = (config.priority ?? []).filter((key) => config.systems[key]);\n\n        // Order the systems by priority\n        const orderByPriority = [\n            ...priority,\n            ...Object.keys(config.systems)\n                .filter((key) => !priority.includes(key))\n        ];\n\n        for (const i of orderByPriority)\n        {\n            this.addSystem(config.systems[i], i);\n        }\n    }\n\n    /**\n     * Create a bunch of runners based of a collection of ids\n     * @param runnerIds - the runner ids to add\n     */\n    addRunners(...runnerIds: string[]): void\n    {\n        runnerIds.forEach((runnerId) =>\n        {\n            this.runners[runnerId] = new Runner(runnerId);\n        });\n    }\n\n    /**\n     * Add a new system to the renderer.\n     * @param ClassRef - Class reference\n     * @param name - Property name for system, if not specified\n     *        will use a static `name` property on the class itself. This\n     *        name will be assigned as s property on the Renderer so make\n     *        sure it doesn't collide with properties on Renderer.\n     * @returns Return instance of renderer\n     */\n    addSystem(ClassRef: ISystemConstructor<R>, name: string): this\n    {\n        const system = new ClassRef(this as any as R);\n\n        if ((this as any)[name])\n        {\n            throw new Error(`Whoops! The name \"${name}\" is already in use`);\n        }\n\n        (this as any)[name] = system;\n\n        this._systemsHash[name] = system;\n\n        for (const i in this.runners)\n        {\n            this.runners[i].add(system);\n        }\n\n        /**\n         * Fired after rendering finishes.\n         * @event PIXI.Renderer#postrender\n         */\n\n        /**\n         * Fired before rendering starts.\n         * @event PIXI.Renderer#prerender\n         */\n\n        /**\n         * Fired when the WebGL context is set.\n         * @event PIXI.Renderer#context\n         * @param {WebGLRenderingContext} gl - WebGL context.\n         */\n\n        return this;\n    }\n\n    /**\n     * A function that will run a runner and call the runners function but pass in different options\n     * to each system based on there name.\n     *\n     * E.g. If you have two systems added called `systemA` and `systemB` you could call do the following:\n     *\n     * ```js\n     * system.emitWithCustomOptions(init, {\n     *     systemA: {...optionsForA},\n     *     systemB: {...optionsForB},\n     * });\n     * ```\n     *\n     * `init` would be called on system A passing `optionsForA` and on system B passing `optionsForB`.\n     * @param runner - the runner to target\n     * @param options - key value options for each system\n     */\n    emitWithCustomOptions(runner: Runner, options: Record<string, unknown>): void\n    {\n        const systemHashKeys = Object.keys(this._systemsHash);\n\n        runner.items.forEach((system) =>\n        {\n            // I know this does not need to be a performant function so it.. isn't!\n            // its only used for init and destroy.. we can refactor if required..\n            const systemName = systemHashKeys.find((systemId) => this._systemsHash[systemId] === system);\n\n            system[runner.name](options[systemName]);\n        });\n    }\n\n    /** destroy the all runners and systems. Its apps job to */\n    destroy(): void\n    {\n        Object.values(this.runners).forEach((runner) =>\n        {\n            runner.destroy();\n        });\n\n        this._systemsHash = {};\n    }\n\n    // TODO implement!\n    // removeSystem(ClassRef: ISystemConstructor, name: string): void\n    // {\n\n    // }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}