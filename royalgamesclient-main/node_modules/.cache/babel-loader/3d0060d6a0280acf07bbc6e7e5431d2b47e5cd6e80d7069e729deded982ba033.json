{"ast":null,"code":"import { BLEND_MODES } from '@pixi/constants';\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\nconst DEPTH_MASK = 5;\nclass State {\n  constructor() {\n    this.data = 0;\n    this.blendMode = BLEND_MODES.NORMAL;\n    this.polygonOffset = 0;\n    this.blend = true;\n    this.depthMask = true;\n  }\n  get blend() {\n    return !!(this.data & 1 << BLEND);\n  }\n  set blend(value) {\n    if (!!(this.data & 1 << BLEND) !== value) {\n      this.data ^= 1 << BLEND;\n    }\n  }\n  get offsets() {\n    return !!(this.data & 1 << OFFSET);\n  }\n  set offsets(value) {\n    if (!!(this.data & 1 << OFFSET) !== value) {\n      this.data ^= 1 << OFFSET;\n    }\n  }\n  get culling() {\n    return !!(this.data & 1 << CULLING);\n  }\n  set culling(value) {\n    if (!!(this.data & 1 << CULLING) !== value) {\n      this.data ^= 1 << CULLING;\n    }\n  }\n  get depthTest() {\n    return !!(this.data & 1 << DEPTH_TEST);\n  }\n  set depthTest(value) {\n    if (!!(this.data & 1 << DEPTH_TEST) !== value) {\n      this.data ^= 1 << DEPTH_TEST;\n    }\n  }\n  get depthMask() {\n    return !!(this.data & 1 << DEPTH_MASK);\n  }\n  set depthMask(value) {\n    if (!!(this.data & 1 << DEPTH_MASK) !== value) {\n      this.data ^= 1 << DEPTH_MASK;\n    }\n  }\n  get clockwiseFrontFace() {\n    return !!(this.data & 1 << WINDING);\n  }\n  set clockwiseFrontFace(value) {\n    if (!!(this.data & 1 << WINDING) !== value) {\n      this.data ^= 1 << WINDING;\n    }\n  }\n  get blendMode() {\n    return this._blendMode;\n  }\n  set blendMode(value) {\n    this.blend = value !== BLEND_MODES.NONE;\n    this._blendMode = value;\n  }\n  get polygonOffset() {\n    return this._polygonOffset;\n  }\n  set polygonOffset(value) {\n    this.offsets = !!value;\n    this._polygonOffset = value;\n  }\n  toString() {\n    return \"[@pixi/core:State blendMode=\".concat(this.blendMode, \" clockwiseFrontFace=\").concat(this.clockwiseFrontFace, \" culling=\").concat(this.culling, \" depthMask=\").concat(this.depthMask, \" polygonOffset=\").concat(this.polygonOffset, \"]\");\n  }\n  static for2d() {\n    const state = new State();\n    state.depthTest = false;\n    state.blend = true;\n    return state;\n  }\n}\nexport { State };","map":{"version":3,"mappings":";AAIA,MAAMA,KAAQ;AACd,MAAMC,MAAS;AACf,MAAMC,OAAU;AAChB,MAAMC,UAAa;AACnB,MAAMC,OAAU;AAChB,MAAMC,UAAa;AASZ,MAAMC,KACb;EAKIC,WACAA;IACI,KAAKC,IAAO;IAEZ,KAAKC,YAAYC,WAAY;IAC7B,KAAKC,aAAgB;IAErB,KAAKC,KAAQ;IACb,KAAKC,SAAY;EAAA;EAQrB,IAAID,KACJA;IACI,OAAO,CAAC,EAAO,YAAQ,CAAK;EAAA;EAGhC,IAAIA,MAAME,KACV;IACI,IAAI,CAAC,EAAE,KAAKN,IAAQ,QAAKR,WAAYc,KACrC;MACI,KAAKN,QAAS,CAAK;IAAA;EACvB;EAOJ,IAAIO,OACJA;IACI,OAAO,CAAC,EAAO,YAAQ,CAAK;EAAA;EAGhC,IAAIA,QAAQD,KACZ;IACI,IAAI,CAAC,EAAE,KAAKN,IAAQ,QAAKP,YAAaa,KACtC;MACI,KAAKN,QAAS,CAAK;IAAA;EACvB;EAOJ,IAAIQ,OACJA;IACI,OAAO,CAAC,EAAO,YAAQ,CAAK;EAAA;EAGhC,IAAIA,QAAQF,KACZ;IACI,IAAI,CAAC,EAAE,KAAKN,IAAQ,QAAKN,aAAcY,KACvC;MACI,KAAKN,QAAS,CAAK;IAAA;EACvB;EAOJ,IAAIS,SACJA;IACI,OAAO,CAAC,EAAO,YAAQ,CAAK;EAAA;EAGhC,IAAIA,UAAUH,KACd;IACI,IAAI,CAAC,EAAE,KAAKN,IAAQ,QAAKL,gBAAiBW,KAC1C;MACI,KAAKN,QAAS,CAAK;IAAA;EACvB;EAOJ,IAAIK,SACJA;IACI,OAAO,CAAC,EAAO,YAAQ,CAAK;EAAA;EAGhC,IAAIA,UAAUC,KACd;IACI,IAAI,CAAC,EAAE,KAAKN,IAAQ,QAAKH,gBAAiBS,KAC1C;MACI,KAAKN,QAAS,CAAK;IAAA;EACvB;EAOJ,IAAIU,kBACJA;IACI,OAAO,CAAC,EAAO,YAAQ,CAAK;EAAA;EAGhC,IAAIA,mBAAmBJ,KACvB;IACI,IAAI,CAAC,EAAE,KAAKN,IAAQ,QAAKJ,aAAcU,KACvC;MACI,KAAKN,QAAS,CAAK;IAAA;EACvB;EAQJ,IAAIC,SACJA;IACI,OAAO,IAAK;EAAA;EAGhB,IAAIA,UAAUK,KACd;IACS,aAASA,UAAUJ,WAAY;IACpC,KAAKS,UAAa;EAAA;EAOtB,IAAIR,aACJA;IACI,OAAO,IAAK;EAAA;EAGhB,IAAIA,cAAcG,KAClB;IACS,eAAU,CAAC,CAACA;IACjB,KAAKM,cAAiB;EAAA;EAI1BC,QACAA;IACW,6CACY,KAAKZ,SACI,sCAAKS,wCAChB,IAAK,gCACH,IAAK,sCACD,IAAK;EAAA;EAKhC,OAAOI,KACPA;IACU,cAAQ,IAAIhB,KAAM;IAExBiB,MAAMN,SAAY;IAClBM,MAAMX,KAAQ;IAEP;EAAA;AAEf","names":["BLEND","OFFSET","CULLING","DEPTH_TEST","WINDING","DEPTH_MASK","State","constructor","data","blendMode","BLEND_MODES","polygonOffset","blend","depthMask","value","offsets","culling","depthTest","clockwiseFrontFace","_blendMode","_polygonOffset","toString","for2d","state"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/core/src/state/State.ts"],"sourcesContent":["import { BLEND_MODES } from '@pixi/constants';\n\n/* eslint-disable max-len */\n\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\nconst DEPTH_MASK = 5;\n\n/**\n * This is a WebGL state, and is is passed to {@link PIXI.StateSystem}.\n *\n * Each mesh rendered may require WebGL to be in a different state.\n * For example you may want different blend mode or to enable polygon offsets\n * @memberof PIXI\n */\nexport class State\n{\n    data: number;\n    _blendMode: BLEND_MODES;\n    _polygonOffset: number;\n\n    constructor()\n    {\n        this.data = 0;\n\n        this.blendMode = BLEND_MODES.NORMAL;\n        this.polygonOffset = 0;\n\n        this.blend = true;\n        this.depthMask = true;\n        //  this.depthTest = true;\n    }\n\n    /**\n     * Activates blending of the computed fragment color values.\n     * @default true\n     */\n    get blend(): boolean\n    {\n        return !!(this.data & (1 << BLEND));\n    }\n\n    set blend(value: boolean)\n    {\n        if (!!(this.data & (1 << BLEND)) !== value)\n        {\n            this.data ^= (1 << BLEND);\n        }\n    }\n\n    /**\n     * Activates adding an offset to depth values of polygon's fragments\n     * @default false\n     */\n    get offsets(): boolean\n    {\n        return !!(this.data & (1 << OFFSET));\n    }\n\n    set offsets(value: boolean)\n    {\n        if (!!(this.data & (1 << OFFSET)) !== value)\n        {\n            this.data ^= (1 << OFFSET);\n        }\n    }\n\n    /**\n     * Activates culling of polygons.\n     * @default false\n     */\n    get culling(): boolean\n    {\n        return !!(this.data & (1 << CULLING));\n    }\n\n    set culling(value: boolean)\n    {\n        if (!!(this.data & (1 << CULLING)) !== value)\n        {\n            this.data ^= (1 << CULLING);\n        }\n    }\n\n    /**\n     * Activates depth comparisons and updates to the depth buffer.\n     * @default false\n     */\n    get depthTest(): boolean\n    {\n        return !!(this.data & (1 << DEPTH_TEST));\n    }\n\n    set depthTest(value: boolean)\n    {\n        if (!!(this.data & (1 << DEPTH_TEST)) !== value)\n        {\n            this.data ^= (1 << DEPTH_TEST);\n        }\n    }\n\n    /**\n     * Enables or disables writing to the depth buffer.\n     * @default true\n     */\n    get depthMask(): boolean\n    {\n        return !!(this.data & (1 << DEPTH_MASK));\n    }\n\n    set depthMask(value: boolean)\n    {\n        if (!!(this.data & (1 << DEPTH_MASK)) !== value)\n        {\n            this.data ^= (1 << DEPTH_MASK);\n        }\n    }\n\n    /**\n     * Specifies whether or not front or back-facing polygons can be culled.\n     * @default false\n     */\n    get clockwiseFrontFace(): boolean\n    {\n        return !!(this.data & (1 << WINDING));\n    }\n\n    set clockwiseFrontFace(value: boolean)\n    {\n        if (!!(this.data & (1 << WINDING)) !== value)\n        {\n            this.data ^= (1 << WINDING);\n        }\n    }\n\n    /**\n     * The blend mode to be applied when this state is set. Apply a value of `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n     * Setting this mode to anything other than NO_BLEND will automatically switch blending on.\n     * @default PIXI.BLEND_MODES.NORMAL\n     */\n    get blendMode(): BLEND_MODES\n    {\n        return this._blendMode;\n    }\n\n    set blendMode(value: BLEND_MODES)\n    {\n        this.blend = (value !== BLEND_MODES.NONE);\n        this._blendMode = value;\n    }\n\n    /**\n     * The polygon offset. Setting this property to anything other than 0 will automatically enable polygon offset fill.\n     * @default 0\n     */\n    get polygonOffset(): number\n    {\n        return this._polygonOffset;\n    }\n\n    set polygonOffset(value: number)\n    {\n        this.offsets = !!value;\n        this._polygonOffset = value;\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/core:State `\n            + `blendMode=${this.blendMode} `\n            + `clockwiseFrontFace=${this.clockwiseFrontFace} `\n            + `culling=${this.culling} `\n            + `depthMask=${this.depthMask} `\n            + `polygonOffset=${this.polygonOffset}`\n            + `]`;\n    }\n    // #endif\n\n    static for2d(): State\n    {\n        const state = new State();\n\n        state.depthTest = false;\n        state.blend = true;\n\n        return state;\n    }\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}