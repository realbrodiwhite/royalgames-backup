{"ast":null,"code":"import { SHAPES } from '../const.mjs';\nclass Polygon {\n  constructor() {\n    for (var _len = arguments.length, points = new Array(_len), _key = 0; _key < _len; _key++) {\n      points[_key] = arguments[_key];\n    }\n    let flat = Array.isArray(points[0]) ? points[0] : points;\n    if (typeof flat[0] !== \"number\") {\n      const p = [];\n      for (let i = 0, il = flat.length; i < il; i++) {\n        p.push(flat[i].x, flat[i].y);\n      }\n      flat = p;\n    }\n    this.points = flat;\n    this.type = SHAPES.POLY;\n    this.closeStroke = true;\n  }\n  clone() {\n    const points = this.points.slice();\n    const polygon = new Polygon(points);\n    polygon.closeStroke = this.closeStroke;\n    return polygon;\n  }\n  contains(x, y) {\n    let inside = false;\n    const length = this.points.length / 2;\n    for (let i = 0, j = length - 1; i < length; j = i++) {\n      const xi = this.points[i * 2];\n      const yi = this.points[i * 2 + 1];\n      const xj = this.points[j * 2];\n      const yj = this.points[j * 2 + 1];\n      const intersect = yi > y !== yj > y && x < (xj - xi) * ((y - yi) / (yj - yi)) + xi;\n      if (intersect) {\n        inside = !inside;\n      }\n    }\n    return inside;\n  }\n  toString() {\n    return \"[@pixi/math:PolygoncloseStroke=\".concat(this.closeStroke, \"points=\").concat(this.points.reduce((pointsDesc, currentPoint) => \"\".concat(pointsDesc, \", \").concat(currentPoint), \"\"), \"]\");\n  }\n}\nexport { Polygon };","map":{"version":3,"mappings":";AAQO,MAAMA,OACb;EAwBIC,cACA;IAAA,kCADeC,MACf;MADeA,MACf;IAAA;IACI,IAAIC,OAAgCC,KAAM,SAAQF,OAAO,CAAE,KAAIA,OAAO,CAAK;IAGvE,WAAOC,IAAK,QAAO,QACvB;MACI,MAAME,IAAc,EAAC;MAErB,SAASC,IAAI,CAAG,OAAKH,KAAKI,MAAQ,MAAIC,IAAIF,CAC1C;QACID,EAAEI,KAAMN,IAAK,IAAkBO,CAAI,OAAKJ,GAAkBK,CAAC;MAAA;MAGxDR;IAAA;IAGX,KAAKD,MAAS;IACd,KAAKU,OAAOC,MAAO;IACnB,KAAKC,WAAc;EAAA;EAOvBC,KACAA;IACU,eAAS,IAAK,QAAOC,KAAM;IAC3B,gBAAU,IAAIhB,QAAQE,MAAM;IAElCe,QAAQH,cAAc,IAAK;IAEpB;EAAA;EASXI,SAASR,GAAWC,CACpB;IACI,IAAIQ,MAAS;IAIP,eAAS,IAAK,QAAOZ,MAAS;IAE3B,aAAI,GAAGa,CAAI,YAAS,GAAGd,CAAI,WAAQc,IAAId,CAChD;MACU,WAAK,IAAK,QAAOA,CAAI;MAC3B,MAAMe,EAAK,QAAKnB,MAAQ,KAAI,CAAK;MAC3B,WAAK,IAAK,QAAOkB,CAAI;MAC3B,MAAME,EAAK,QAAKpB,MAAQ,KAAI,CAAK;MAC3B,kBAAcmB,EAAK,SAAQC,EAAK,QAAQZ,CAAM,SAAKa,EAAQ,UAAIF,EAAO,UAAKA,EAAQ;MAEzF,IAAIG,SACJ;QACIL,SAAS,CAACA;MAAA;IACd;IAGG;EAAA;EAIXM,QACAA;IACI,gDACqB,KAAKX,WACV,yBAAKZ,MAAO,QAAO,CAACwB,YAAYC,YAAiB,eAAGD,UAAe,8BAAgB,EAAE;EAAA;AAG7G","names":["Polygon","constructor","points","flat","Array","p","i","length","il","push","x","y","type","SHAPES","closeStroke","clone","slice","polygon","contains","inside","j","yi","yj","xi","intersect","toString","pointsDesc","currentPoint"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/math/src/shapes/Polygon.ts"],"sourcesContent":["import { SHAPES } from '../const';\n\nimport type { IPointData } from '../IPointData';\n\n/**\n * A class to define a shape via user defined coordinates.\n * @memberof PIXI\n */\nexport class Polygon\n{\n    /** An array of the points of this polygon. */\n    public points: number[];\n\n    /** `false` after moveTo, `true` after `closePath`. In all other cases it is `true`. */\n    public closeStroke: boolean;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default PIXI.SHAPES.POLY\n     * @see PIXI.SHAPES\n     */\n    public readonly type: SHAPES.POLY;\n\n    constructor(points: IPointData[] | number[]);\n    constructor(...points: IPointData[] | number[]);\n\n    /**\n     * @param {PIXI.IPointData[]|number[]} points - This can be an array of Points\n     *  that form the polygon, a flat array of numbers that will be interpreted as [x,y, x,y, ...], or\n     *  the arguments passed can be all the points of the polygon e.g.\n     *  `new Polygon(new Point(), new Point(), ...)`, or the arguments passed can be flat\n     *  x,y values e.g. `new Polygon(x,y, x,y, x,y, ...)` where `x` and `y` are Numbers.\n     */\n    constructor(...points: any[])\n    {\n        let flat: IPointData[] | number[] = Array.isArray(points[0]) ? points[0] : points;\n\n        // if this is an array of points, convert it to a flat array of numbers\n        if (typeof flat[0] !== 'number')\n        {\n            const p: number[] = [];\n\n            for (let i = 0, il = flat.length; i < il; i++)\n            {\n                p.push((flat[i] as IPointData).x, (flat[i] as IPointData).y);\n            }\n\n            flat = p;\n        }\n\n        this.points = flat as number[];\n        this.type = SHAPES.POLY;\n        this.closeStroke = true;\n    }\n\n    /**\n     * Creates a clone of this polygon.\n     * @returns - A copy of the polygon.\n     */\n    clone(): Polygon\n    {\n        const points = this.points.slice();\n        const polygon = new Polygon(points);\n\n        polygon.closeStroke = this.closeStroke;\n\n        return polygon;\n    }\n\n    /**\n     * Checks whether the x and y coordinates passed to this function are contained within this polygon.\n     * @param x - The X coordinate of the point to test.\n     * @param y - The Y coordinate of the point to test.\n     * @returns - Whether the x/y coordinates are within this polygon.\n     */\n    contains(x: number, y: number): boolean\n    {\n        let inside = false;\n\n        // use some raycasting to test hits\n        // https://github.com/substack/point-in-polygon/blob/master/index.js\n        const length = this.points.length / 2;\n\n        for (let i = 0, j = length - 1; i < length; j = i++)\n        {\n            const xi = this.points[i * 2];\n            const yi = this.points[(i * 2) + 1];\n            const xj = this.points[j * 2];\n            const yj = this.points[(j * 2) + 1];\n            const intersect = ((yi > y) !== (yj > y)) && (x < ((xj - xi) * ((y - yi) / (yj - yi))) + xi);\n\n            if (intersect)\n            {\n                inside = !inside;\n            }\n        }\n\n        return inside;\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:Polygon`\n            + `closeStroke=${this.closeStroke}`\n            + `points=${this.points.reduce((pointsDesc, currentPoint) => `${pointsDesc}, ${currentPoint}`, '')}]`;\n    }\n    // #endif\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}