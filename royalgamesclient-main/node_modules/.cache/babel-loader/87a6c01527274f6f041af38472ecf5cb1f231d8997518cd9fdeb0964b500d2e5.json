{"ast":null,"code":"import { Matrix, settings, RenderTexture, utils, BaseTexture, Texture } from '@pixi/core';\nimport { DisplayObject } from '@pixi/display';\nimport { Sprite } from '@pixi/sprite';\nconst _tempMatrix = new Matrix();\nDisplayObject.prototype._cacheAsBitmap = false;\nDisplayObject.prototype._cacheData = null;\nDisplayObject.prototype._cacheAsBitmapResolution = null;\nDisplayObject.prototype._cacheAsBitmapMultisample = null;\nclass CacheData {\n  constructor() {\n    this.textureCacheId = null;\n    this.originalRender = null;\n    this.originalRenderCanvas = null;\n    this.originalCalculateBounds = null;\n    this.originalGetLocalBounds = null;\n    this.originalUpdateTransform = null;\n    this.originalDestroy = null;\n    this.originalMask = null;\n    this.originalFilterArea = null;\n    this.originalContainsPoint = null;\n    this.sprite = null;\n  }\n}\nObject.defineProperties(DisplayObject.prototype, {\n  cacheAsBitmapResolution: {\n    get() {\n      return this._cacheAsBitmapResolution;\n    },\n    set(resolution) {\n      if (resolution === this._cacheAsBitmapResolution) {\n        return;\n      }\n      this._cacheAsBitmapResolution = resolution;\n      if (this.cacheAsBitmap) {\n        this.cacheAsBitmap = false;\n        this.cacheAsBitmap = true;\n      }\n    }\n  },\n  cacheAsBitmapMultisample: {\n    get() {\n      return this._cacheAsBitmapMultisample;\n    },\n    set(multisample) {\n      if (multisample === this._cacheAsBitmapMultisample) {\n        return;\n      }\n      this._cacheAsBitmapMultisample = multisample;\n      if (this.cacheAsBitmap) {\n        this.cacheAsBitmap = false;\n        this.cacheAsBitmap = true;\n      }\n    }\n  },\n  cacheAsBitmap: {\n    get() {\n      return this._cacheAsBitmap;\n    },\n    set(value) {\n      if (this._cacheAsBitmap === value) {\n        return;\n      }\n      this._cacheAsBitmap = value;\n      let data;\n      if (value) {\n        if (!this._cacheData) {\n          this._cacheData = new CacheData();\n        }\n        data = this._cacheData;\n        data.originalRender = this.render;\n        data.originalRenderCanvas = this.renderCanvas;\n        data.originalUpdateTransform = this.updateTransform;\n        data.originalCalculateBounds = this.calculateBounds;\n        data.originalGetLocalBounds = this.getLocalBounds;\n        data.originalDestroy = this.destroy;\n        data.originalContainsPoint = this.containsPoint;\n        data.originalMask = this._mask;\n        data.originalFilterArea = this.filterArea;\n        this.render = this._renderCached;\n        this.renderCanvas = this._renderCachedCanvas;\n        this.destroy = this._cacheAsBitmapDestroy;\n      } else {\n        data = this._cacheData;\n        if (data.sprite) {\n          this._destroyCachedDisplayObject();\n        }\n        this.render = data.originalRender;\n        this.renderCanvas = data.originalRenderCanvas;\n        this.calculateBounds = data.originalCalculateBounds;\n        this.getLocalBounds = data.originalGetLocalBounds;\n        this.destroy = data.originalDestroy;\n        this.updateTransform = data.originalUpdateTransform;\n        this.containsPoint = data.originalContainsPoint;\n        this._mask = data.originalMask;\n        this.filterArea = data.originalFilterArea;\n      }\n    }\n  }\n});\nDisplayObject.prototype._renderCached = function _renderCached(renderer) {\n  if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {\n    return;\n  }\n  this._initCachedDisplayObject(renderer);\n  this._cacheData.sprite.transform._worldID = this.transform._worldID;\n  this._cacheData.sprite.worldAlpha = this.worldAlpha;\n  this._cacheData.sprite._render(renderer);\n};\nDisplayObject.prototype._initCachedDisplayObject = function _initCachedDisplayObject(renderer) {\n  var _this$_cacheData, _this$filters, _this$cacheAsBitmapMu;\n  if ((_this$_cacheData = this._cacheData) !== null && _this$_cacheData !== void 0 && _this$_cacheData.sprite) {\n    return;\n  }\n  const cacheAlpha = this.alpha;\n  this.alpha = 1;\n  renderer.batch.flush();\n  const bounds = this.getLocalBounds(null, true).clone();\n  if ((_this$filters = this.filters) !== null && _this$filters !== void 0 && _this$filters.length) {\n    const padding = this.filters[0].padding;\n    bounds.pad(padding);\n  }\n  bounds.ceil(settings.RESOLUTION);\n  const cachedRenderTexture = renderer.renderTexture.current;\n  const cachedSourceFrame = renderer.renderTexture.sourceFrame.clone();\n  const cachedDestinationFrame = renderer.renderTexture.destinationFrame.clone();\n  const cachedProjectionTransform = renderer.projection.transform;\n  const renderTexture = RenderTexture.create({\n    width: bounds.width,\n    height: bounds.height,\n    resolution: this.cacheAsBitmapResolution || renderer.resolution,\n    multisample: (_this$cacheAsBitmapMu = this.cacheAsBitmapMultisample) !== null && _this$cacheAsBitmapMu !== void 0 ? _this$cacheAsBitmapMu : renderer.multisample\n  });\n  const textureCacheId = \"cacheAsBitmap_\".concat(utils.uid());\n  this._cacheData.textureCacheId = textureCacheId;\n  BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n  Texture.addToCache(renderTexture, textureCacheId);\n  const m = this.transform.localTransform.copyTo(_tempMatrix).invert().translate(-bounds.x, -bounds.y);\n  this.render = this._cacheData.originalRender;\n  renderer.render(this, {\n    renderTexture,\n    clear: true,\n    transform: m,\n    skipUpdateTransform: false\n  });\n  renderer.framebuffer.blit();\n  renderer.projection.transform = cachedProjectionTransform;\n  renderer.renderTexture.bind(cachedRenderTexture, cachedSourceFrame, cachedDestinationFrame);\n  this.render = this._renderCached;\n  this.updateTransform = this.displayObjectUpdateTransform;\n  this.calculateBounds = this._calculateCachedBounds;\n  this.getLocalBounds = this._getCachedLocalBounds;\n  this._mask = null;\n  this.filterArea = null;\n  this.alpha = cacheAlpha;\n  const cachedSprite = new Sprite(renderTexture);\n  cachedSprite.transform.worldTransform = this.transform.worldTransform;\n  cachedSprite.anchor.x = -(bounds.x / bounds.width);\n  cachedSprite.anchor.y = -(bounds.y / bounds.height);\n  cachedSprite.alpha = cacheAlpha;\n  cachedSprite._bounds = this._bounds;\n  this._cacheData.sprite = cachedSprite;\n  this.transform._parentID = -1;\n  if (!this.parent) {\n    this.enableTempParent();\n    this.updateTransform();\n    this.disableTempParent(null);\n  } else {\n    this.updateTransform();\n  }\n  this.containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\nDisplayObject.prototype._renderCachedCanvas = function _renderCachedCanvas(renderer) {\n  if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {\n    return;\n  }\n  this._initCachedDisplayObjectCanvas(renderer);\n  this._cacheData.sprite.worldAlpha = this.worldAlpha;\n  this._cacheData.sprite._renderCanvas(renderer);\n};\nDisplayObject.prototype._initCachedDisplayObjectCanvas = function _initCachedDisplayObjectCanvas(renderer) {\n  var _this$_cacheData2;\n  if ((_this$_cacheData2 = this._cacheData) !== null && _this$_cacheData2 !== void 0 && _this$_cacheData2.sprite) {\n    return;\n  }\n  const bounds = this.getLocalBounds(null, true);\n  const cacheAlpha = this.alpha;\n  this.alpha = 1;\n  const cachedRenderTarget = renderer.canvasContext.activeContext;\n  const cachedProjectionTransform = renderer._projTransform;\n  bounds.ceil(settings.RESOLUTION);\n  const renderTexture = RenderTexture.create({\n    width: bounds.width,\n    height: bounds.height\n  });\n  const textureCacheId = \"cacheAsBitmap_\".concat(utils.uid());\n  this._cacheData.textureCacheId = textureCacheId;\n  BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n  Texture.addToCache(renderTexture, textureCacheId);\n  const m = _tempMatrix;\n  this.transform.localTransform.copyTo(m);\n  m.invert();\n  m.tx -= bounds.x;\n  m.ty -= bounds.y;\n  this.renderCanvas = this._cacheData.originalRenderCanvas;\n  renderer.render(this, {\n    renderTexture,\n    clear: true,\n    transform: m,\n    skipUpdateTransform: false\n  });\n  renderer.canvasContext.activeContext = cachedRenderTarget;\n  renderer._projTransform = cachedProjectionTransform;\n  this.renderCanvas = this._renderCachedCanvas;\n  this.updateTransform = this.displayObjectUpdateTransform;\n  this.calculateBounds = this._calculateCachedBounds;\n  this.getLocalBounds = this._getCachedLocalBounds;\n  this._mask = null;\n  this.filterArea = null;\n  this.alpha = cacheAlpha;\n  const cachedSprite = new Sprite(renderTexture);\n  cachedSprite.transform.worldTransform = this.transform.worldTransform;\n  cachedSprite.anchor.x = -(bounds.x / bounds.width);\n  cachedSprite.anchor.y = -(bounds.y / bounds.height);\n  cachedSprite.alpha = cacheAlpha;\n  cachedSprite._bounds = this._bounds;\n  this._cacheData.sprite = cachedSprite;\n  this.transform._parentID = -1;\n  if (!this.parent) {\n    this.parent = renderer._tempDisplayObjectParent;\n    this.updateTransform();\n    this.parent = null;\n  } else {\n    this.updateTransform();\n  }\n  this.containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\nDisplayObject.prototype._calculateCachedBounds = function _calculateCachedBounds() {\n  this._bounds.clear();\n  this._cacheData.sprite.transform._worldID = this.transform._worldID;\n  this._cacheData.sprite._calculateBounds();\n  this._bounds.updateID = this._boundsID;\n};\nDisplayObject.prototype._getCachedLocalBounds = function _getCachedLocalBounds() {\n  return this._cacheData.sprite.getLocalBounds(null);\n};\nDisplayObject.prototype._destroyCachedDisplayObject = function _destroyCachedDisplayObject() {\n  this._cacheData.sprite._texture.destroy(true);\n  this._cacheData.sprite = null;\n  BaseTexture.removeFromCache(this._cacheData.textureCacheId);\n  Texture.removeFromCache(this._cacheData.textureCacheId);\n  this._cacheData.textureCacheId = null;\n};\nDisplayObject.prototype._cacheAsBitmapDestroy = function _cacheAsBitmapDestroy(options) {\n  this.cacheAsBitmap = false;\n  this.destroy(options);\n};\nexport { CacheData };","map":{"version":3,"mappings":"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","names":["_tempMatrix","Matrix","DisplayObject","prototype","_cacheAsBitmap","_cacheData","_cacheAsBitmapResolution","_cacheAsBitmapMultisample","CacheData","constructor","textureCacheId","originalRender","originalRenderCanvas","originalCalculateBounds","originalGetLocalBounds","originalUpdateTransform","originalDestroy","originalMask","originalFilterArea","originalContainsPoint","sprite","Object","cacheAsBitmapResolution","get","set","resolution","cacheAsBitmap","cacheAsBitmapMultisample","multisample","value","data","render","renderCanvas","destroy","_destroyCachedDisplayObject","calculateBounds","getLocalBounds","updateTransform","containsPoint","_mask","filterArea","_renderCached","renderer","visible","worldAlpha","renderable","_initCachedDisplayObject","transform","_this$_cacheData","cacheAlpha","alpha","batch","flush","bounds","clone","filters","_this$filters","length","pad","padding","settings","RESOLUTION","renderTexture","cachedSourceFrame","cachedDestinationFrame","projection","RenderTexture","create","width","height","utils","uid","BaseTexture","Texture","m","copyTo","invert","translate","x","y","clear","skipUpdateTransform","framebuffer","blit","cachedRenderTexture","Sprite","cachedSprite","worldTransform","anchor","_bounds","_parentID","parent","enableTempParent","disableTempParent","bind","_renderCachedCanvas","_initCachedDisplayObjectCanvas","_this$_cacheData2","canvasContext","cachedProjectionTransform","localTransform","tx","ty","activeContext","_projTransform","_calculateCachedBounds","_calculateBounds","updateID","_getCachedLocalBounds","_texture","_cacheAsBitmapDestroy","options"],"sources":["/workspaces/royalgames/royalgamesclient-main/node_modules/@pixi/mixin-cache-as-bitmap/src/index.ts"],"sourcesContent":["/// <reference path=\"../global.d.ts\" />\nimport { BaseTexture, Matrix, RenderTexture, settings, Texture, utils } from '@pixi/core';\nimport { DisplayObject } from '@pixi/display';\nimport { Sprite } from '@pixi/sprite';\n\nimport type {\n    ICanvasRenderingContext2D,\n    IPointData,\n    IRenderer,\n    MaskData,\n    MSAA_QUALITY,\n    Rectangle,\n    Renderer,\n} from '@pixi/core';\nimport type { Container, IDestroyOptions } from '@pixi/display';\n\n// Don't import CanvasRender to remove dependency on this optional package\n// this type should satisify these requirements for cacheAsBitmap types\ninterface CanvasRenderer extends IRenderer\n{\n    canvasContext: {\n        activeContext: ICanvasRenderingContext2D;\n    }\n}\n\nconst _tempMatrix = new Matrix();\n\nDisplayObject.prototype._cacheAsBitmap = false;\nDisplayObject.prototype._cacheData = null;\nDisplayObject.prototype._cacheAsBitmapResolution = null;\nDisplayObject.prototype._cacheAsBitmapMultisample = null;\n\n// figured there's no point adding ALL the extra variables to prototype.\n// this model can hold the information needed. This can also be generated on demand as\n// most objects are not cached as bitmaps.\n/**\n * @class\n * @ignore\n * @private\n */\nexport class CacheData\n{\n    public textureCacheId: string;\n    public originalRender: (renderer: Renderer) => void;\n    public originalRenderCanvas: (renderer: IRenderer) => void;\n    public originalCalculateBounds: () => void;\n    public originalGetLocalBounds: (rect?: Rectangle) => Rectangle;\n    public originalUpdateTransform: () => void;\n    public originalDestroy: (options?: IDestroyOptions | boolean) => void;\n    public originalMask: Container | MaskData;\n    public originalFilterArea: Rectangle;\n    public originalContainsPoint: (point: IPointData) => boolean;\n    public sprite: Sprite;\n\n    constructor()\n    {\n        this.textureCacheId = null;\n\n        this.originalRender = null;\n        this.originalRenderCanvas = null;\n        this.originalCalculateBounds = null;\n        this.originalGetLocalBounds = null;\n\n        this.originalUpdateTransform = null;\n        this.originalDestroy = null;\n        this.originalMask = null;\n        this.originalFilterArea = null;\n        this.originalContainsPoint = null;\n        this.sprite = null;\n    }\n}\n\nObject.defineProperties(DisplayObject.prototype, {\n    /**\n     * The resolution to use for cacheAsBitmap. By default this will use the renderer's resolution\n     * but can be overriden for performance. Lower values will reduce memory usage at the expense\n     * of render quality. A falsey value of `null` or `0` will default to the renderer's resolution.\n     * If `cacheAsBitmap` is set to `true`, this will re-render with the new resolution.\n     * @member {number} cacheAsBitmapResolution\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     */\n    cacheAsBitmapResolution: {\n        get(): number\n        {\n            return this._cacheAsBitmapResolution;\n        },\n        set(resolution: number): void\n        {\n            if (resolution === this._cacheAsBitmapResolution)\n            {\n                return;\n            }\n\n            this._cacheAsBitmapResolution = resolution;\n\n            if (this.cacheAsBitmap)\n            {\n                // Toggle to re-render at the new resolution\n                this.cacheAsBitmap = false;\n                this.cacheAsBitmap = true;\n            }\n        },\n    },\n\n    /**\n     * The number of samples to use for cacheAsBitmap. If set to `null`, the renderer's\n     * sample count is used.\n     * If `cacheAsBitmap` is set to `true`, this will re-render with the new number of samples.\n     * @member {number} cacheAsBitmapMultisample\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     */\n    cacheAsBitmapMultisample: {\n        get(): MSAA_QUALITY\n        {\n            return this._cacheAsBitmapMultisample;\n        },\n        set(multisample: MSAA_QUALITY): void\n        {\n            if (multisample === this._cacheAsBitmapMultisample)\n            {\n                return;\n            }\n\n            this._cacheAsBitmapMultisample = multisample;\n\n            if (this.cacheAsBitmap)\n            {\n                // Toggle to re-render with new multisample\n                this.cacheAsBitmap = false;\n                this.cacheAsBitmap = true;\n            }\n        },\n    },\n\n    /**\n     * Set this to true if you want this display object to be cached as a bitmap.\n     * This basically takes a snapshot of the display object as it is at that moment. It can\n     * provide a performance benefit for complex static displayObjects.\n     * To remove simply set this property to `false`\n     *\n     * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\n     * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     */\n    cacheAsBitmap: {\n        get(): CacheData\n        {\n            return this._cacheAsBitmap;\n        },\n        set(value: CacheData): void\n        {\n            if (this._cacheAsBitmap === value)\n            {\n                return;\n            }\n\n            this._cacheAsBitmap = value;\n\n            let data: CacheData;\n\n            if (value)\n            {\n                if (!this._cacheData)\n                {\n                    this._cacheData = new CacheData();\n                }\n\n                data = this._cacheData;\n\n                data.originalRender = this.render;\n                data.originalRenderCanvas = this.renderCanvas;\n\n                data.originalUpdateTransform = this.updateTransform;\n                data.originalCalculateBounds = this.calculateBounds;\n                data.originalGetLocalBounds = this.getLocalBounds;\n\n                data.originalDestroy = this.destroy;\n\n                data.originalContainsPoint = this.containsPoint;\n\n                data.originalMask = this._mask;\n                data.originalFilterArea = this.filterArea;\n\n                this.render = this._renderCached;\n                this.renderCanvas = this._renderCachedCanvas;\n\n                this.destroy = this._cacheAsBitmapDestroy;\n            }\n            else\n            {\n                data = this._cacheData;\n\n                if (data.sprite)\n                {\n                    this._destroyCachedDisplayObject();\n                }\n\n                this.render = data.originalRender;\n                this.renderCanvas = data.originalRenderCanvas;\n                this.calculateBounds = data.originalCalculateBounds;\n                this.getLocalBounds = data.originalGetLocalBounds;\n\n                this.destroy = data.originalDestroy;\n\n                this.updateTransform = data.originalUpdateTransform;\n                this.containsPoint = data.originalContainsPoint;\n\n                this._mask = data.originalMask;\n                this.filterArea = data.originalFilterArea;\n            }\n        },\n    },\n});\n\n/**\n * Renders a cached version of the sprite with WebGL\n * @private\n * @method _renderCached\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._renderCached = function _renderCached(renderer: Renderer): void\n{\n    if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n    {\n        return;\n    }\n\n    this._initCachedDisplayObject(renderer);\n\n    this._cacheData.sprite.transform._worldID = this.transform._worldID;\n    this._cacheData.sprite.worldAlpha = this.worldAlpha;\n    (this._cacheData.sprite as any)._render(renderer);\n};\n\n/**\n * Prepares the WebGL renderer to cache the sprite\n * @private\n * @method _initCachedDisplayObject\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._initCachedDisplayObject = function _initCachedDisplayObject(renderer: Renderer): void\n{\n    if (this._cacheData?.sprite)\n    {\n        return;\n    }\n\n    // make sure alpha is set to 1 otherwise it will get rendered as invisible!\n    const cacheAlpha = this.alpha;\n\n    this.alpha = 1;\n\n    // first we flush anything left in the renderer (otherwise it would get rendered to the cached texture)\n    renderer.batch.flush();\n    // this.filters= [];\n\n    // next we find the dimensions of the untransformed object\n    // this function also calls updatetransform on all its children as part of the measuring.\n    // This means we don't need to update the transform again in this function\n    // TODO pass an object to clone too? saves having to create a new one each time!\n    const bounds = (this as Container).getLocalBounds(null, true).clone();\n\n    // add some padding!\n    if (this.filters?.length)\n    {\n        const padding = this.filters[0].padding;\n\n        bounds.pad(padding);\n    }\n\n    bounds.ceil(settings.RESOLUTION);\n\n    // for now we cache the current renderTarget that the WebGL renderer is currently using.\n    // this could be more elegant..\n    const cachedRenderTexture = renderer.renderTexture.current;\n    const cachedSourceFrame = renderer.renderTexture.sourceFrame.clone();\n    const cachedDestinationFrame = renderer.renderTexture.destinationFrame.clone();\n    const cachedProjectionTransform = renderer.projection.transform;\n\n    // We also store the filter stack - I will definitely look to change how this works a little later down the line.\n    // const stack = renderer.filterManager.filterStack;\n\n    // this renderTexture will be used to store the cached DisplayObject\n    const renderTexture = RenderTexture.create({\n        width: bounds.width,\n        height: bounds.height,\n        resolution: this.cacheAsBitmapResolution || renderer.resolution,\n        multisample: this.cacheAsBitmapMultisample ?? renderer.multisample,\n    });\n\n    const textureCacheId = `cacheAsBitmap_${utils.uid()}`;\n\n    this._cacheData.textureCacheId = textureCacheId;\n\n    BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n    Texture.addToCache(renderTexture, textureCacheId);\n\n    // need to set //\n    const m = this.transform.localTransform.copyTo(_tempMatrix).invert().translate(-bounds.x, -bounds.y);\n\n    // set all properties to there original so we can render to a texture\n    this.render = this._cacheData.originalRender;\n\n    renderer.render(this, { renderTexture, clear: true, transform: m, skipUpdateTransform: false });\n    renderer.framebuffer.blit();\n\n    // now restore the state be setting the new properties\n    renderer.projection.transform = cachedProjectionTransform;\n    renderer.renderTexture.bind(cachedRenderTexture, cachedSourceFrame, cachedDestinationFrame);\n\n    // renderer.filterManager.filterStack = stack;\n\n    this.render = this._renderCached;\n    // the rest is the same as for Canvas\n    this.updateTransform = this.displayObjectUpdateTransform;\n    this.calculateBounds = this._calculateCachedBounds;\n    this.getLocalBounds = this._getCachedLocalBounds;\n\n    this._mask = null;\n    this.filterArea = null;\n    this.alpha = cacheAlpha;\n\n    // create our cached sprite\n    const cachedSprite = new Sprite(renderTexture);\n\n    cachedSprite.transform.worldTransform = this.transform.worldTransform;\n    cachedSprite.anchor.x = -(bounds.x / bounds.width);\n    cachedSprite.anchor.y = -(bounds.y / bounds.height);\n    cachedSprite.alpha = cacheAlpha;\n    cachedSprite._bounds = this._bounds;\n\n    this._cacheData.sprite = cachedSprite;\n\n    this.transform._parentID = -1;\n    // restore the transform of the cached sprite to avoid the nasty flicker..\n    if (!this.parent)\n    {\n        this.enableTempParent();\n        this.updateTransform();\n        this.disableTempParent(null);\n    }\n    else\n    {\n        this.updateTransform();\n    }\n\n    // map the hit test..\n    (this as Sprite).containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n\n/**\n * Renders a cached version of the sprite with canvas\n * @private\n * @method _renderCachedCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer\n */\nDisplayObject.prototype._renderCachedCanvas = function _renderCachedCanvas(renderer: IRenderer): void\n{\n    if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n    {\n        return;\n    }\n\n    this._initCachedDisplayObjectCanvas(renderer);\n\n    this._cacheData.sprite.worldAlpha = this.worldAlpha;\n    (this._cacheData.sprite as any)._renderCanvas(renderer);\n};\n\n// TODO this can be the same as the WebGL version.. will need to do a little tweaking first though..\n/**\n * Prepares the Canvas renderer to cache the sprite\n * @private\n * @method _initCachedDisplayObjectCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer\n */\nDisplayObject.prototype._initCachedDisplayObjectCanvas = function _initCachedDisplayObjectCanvas(\n    renderer: CanvasRenderer\n): void\n{\n    if (this._cacheData?.sprite)\n    {\n        return;\n    }\n\n    // get bounds actually transforms the object for us already!\n    const bounds = (this as Container).getLocalBounds(null, true);\n\n    const cacheAlpha = this.alpha;\n\n    this.alpha = 1;\n\n    const cachedRenderTarget = renderer.canvasContext.activeContext;\n    const cachedProjectionTransform = (renderer as any)._projTransform;\n\n    bounds.ceil(settings.RESOLUTION);\n\n    const renderTexture = RenderTexture.create({ width: bounds.width, height: bounds.height });\n\n    const textureCacheId = `cacheAsBitmap_${utils.uid()}`;\n\n    this._cacheData.textureCacheId = textureCacheId;\n\n    BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n    Texture.addToCache(renderTexture, textureCacheId);\n\n    // need to set //\n    const m = _tempMatrix;\n\n    this.transform.localTransform.copyTo(m);\n    m.invert();\n\n    m.tx -= bounds.x;\n    m.ty -= bounds.y;\n\n    // m.append(this.transform.worldTransform.)\n    // set all properties to there original so we can render to a texture\n    this.renderCanvas = this._cacheData.originalRenderCanvas;\n\n    renderer.render(this, { renderTexture, clear: true, transform: m, skipUpdateTransform: false });\n    // now restore the state be setting the new properties\n    renderer.canvasContext.activeContext = cachedRenderTarget;\n    (renderer as any)._projTransform = cachedProjectionTransform;\n\n    this.renderCanvas = this._renderCachedCanvas;\n    // the rest is the same as for WebGL\n    this.updateTransform = this.displayObjectUpdateTransform;\n    this.calculateBounds = this._calculateCachedBounds;\n    this.getLocalBounds = this._getCachedLocalBounds;\n\n    this._mask = null;\n    this.filterArea = null;\n    this.alpha = cacheAlpha;\n\n    // create our cached sprite\n    const cachedSprite = new Sprite(renderTexture);\n\n    cachedSprite.transform.worldTransform = this.transform.worldTransform;\n    cachedSprite.anchor.x = -(bounds.x / bounds.width);\n    cachedSprite.anchor.y = -(bounds.y / bounds.height);\n    cachedSprite.alpha = cacheAlpha;\n    cachedSprite._bounds = this._bounds;\n\n    this._cacheData.sprite = cachedSprite;\n\n    this.transform._parentID = -1;\n    // restore the transform of the cached sprite to avoid the nasty flicker..\n    if (!this.parent)\n    {\n        this.parent = (renderer as any)._tempDisplayObjectParent;\n        this.updateTransform();\n        this.parent = null;\n    }\n    else\n    {\n        this.updateTransform();\n    }\n\n    // map the hit test..\n    (this as Sprite).containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n\n/**\n * Calculates the bounds of the cached sprite\n * @private\n * @method\n */\nDisplayObject.prototype._calculateCachedBounds = function _calculateCachedBounds(): void\n{\n    this._bounds.clear();\n    this._cacheData.sprite.transform._worldID = this.transform._worldID;\n    (this._cacheData.sprite as any)._calculateBounds();\n    this._bounds.updateID = (this as any)._boundsID;\n};\n\n/**\n * Gets the bounds of the cached sprite.\n * @private\n * @method\n * @returns {Rectangle} The local bounds.\n */\nDisplayObject.prototype._getCachedLocalBounds = function _getCachedLocalBounds(): Rectangle\n{\n    return this._cacheData.sprite.getLocalBounds(null);\n};\n\n/**\n * Destroys the cached sprite.\n * @private\n * @method\n */\nDisplayObject.prototype._destroyCachedDisplayObject = function _destroyCachedDisplayObject(): void\n{\n    this._cacheData.sprite._texture.destroy(true);\n    this._cacheData.sprite = null;\n\n    BaseTexture.removeFromCache(this._cacheData.textureCacheId);\n    Texture.removeFromCache(this._cacheData.textureCacheId);\n\n    this._cacheData.textureCacheId = null;\n};\n\n/**\n * Destroys the cached object.\n * @private\n * @method\n * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n *  have been set to that value.\n *  Used when destroying containers, see the Container.destroy method.\n */\nDisplayObject.prototype._cacheAsBitmapDestroy = function _cacheAsBitmapDestroy(options?: IDestroyOptions | boolean): void\n{\n    this.cacheAsBitmap = false;\n    this.destroy(options);\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}